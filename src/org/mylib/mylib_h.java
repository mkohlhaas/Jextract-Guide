// Generated by jextract

package org.mylib;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class mylib_h {

    mylib_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int MY_MACRO = (int)42L;
    /**
     * {@snippet lang=c :
     * #define MY_MACRO 42
     * }
     */
    public static int MY_MACRO() {
        return MY_MACRO;
    }

    private static class call_me_back {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mylib_h.C_INT,
            mylib_h.C_POINTER
        );

        public static final MemorySegment ADDR = mylib_h.findOrThrow("call_me_back");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int call_me_back(callback_t callback)
     * }
     */
    public static FunctionDescriptor call_me_back$descriptor() {
        return call_me_back.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int call_me_back(callback_t callback)
     * }
     */
    public static MethodHandle call_me_back$handle() {
        return call_me_back.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int call_me_back(callback_t callback)
     * }
     */
    public static MemorySegment call_me_back$address() {
        return call_me_back.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int call_me_back(callback_t callback)
     * }
     */
    public static int call_me_back(MemorySegment callback) {
        var mh$ = call_me_back.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("call_me_back", callback);
            }
            return (int)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bar$constants {
        public static final OfInt LAYOUT = mylib_h.C_INT;
        public static final MemorySegment SEGMENT = mylib_h.findOrThrow("bar").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * int bar
     * }
     */
    public static OfInt bar$layout() {
        return bar$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * int bar
     * }
     */
    public static MemorySegment bar$segment() {
        return bar$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * int bar
     * }
     */
    public static int bar() {
        return bar$constants.SEGMENT.get(bar$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * int bar
     * }
     */
    public static void bar(int varValue) {
        bar$constants.SEGMENT.set(bar$constants.LAYOUT, 0L, varValue);
    }
    private static final int A = (int)0L;
    /**
     * {@snippet lang=c :
     * enum MY_ENUM.A = 0
     * }
     */
    public static int A() {
        return A;
    }
    private static final int B = (int)1L;
    /**
     * {@snippet lang=c :
     * enum MY_ENUM.B = 1
     * }
     */
    public static int B() {
        return B;
    }
    private static final int C = (int)2L;
    /**
     * {@snippet lang=c :
     * enum MY_ENUM.C = 2
     * }
     */
    public static int C() {
        return C;
    }

    private static class new_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            mylib_h.C_POINTER    );

        public static final MemorySegment ADDR = mylib_h.findOrThrow("new_point");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct Point *new_point()
     * }
     */
    public static FunctionDescriptor new_point$descriptor() {
        return new_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct Point *new_point()
     * }
     */
    public static MethodHandle new_point$handle() {
        return new_point.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct Point *new_point()
     * }
     */
    public static MemorySegment new_point$address() {
        return new_point.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct Point *new_point()
     * }
     */
    public static MemorySegment new_point() {
        var mh$ = new_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_point");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mylib_h.C_POINTER
        );

        public static final MemorySegment ADDR = mylib_h.findOrThrow("delete_point");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_point(struct Point *ptr)
     * }
     */
    public static FunctionDescriptor delete_point$descriptor() {
        return delete_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_point(struct Point *ptr)
     * }
     */
    public static MethodHandle delete_point$handle() {
        return delete_point.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_point(struct Point *ptr)
     * }
     */
    public static MemorySegment delete_point$address() {
        return delete_point.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_point(struct Point *ptr)
     * }
     */
    public static void delete_point(MemorySegment ptr) {
        var mh$ = delete_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_point", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class foo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            mylib_h.C_INT
        );

        public static final MemorySegment ADDR = mylib_h.findOrThrow("foo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void foo(int x)
     * }
     */
    public static FunctionDescriptor foo$descriptor() {
        return foo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void foo(int x)
     * }
     */
    public static MethodHandle foo$handle() {
        return foo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void foo(int x)
     * }
     */
    public static MemorySegment foo$address() {
        return foo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void foo(int x)
     * }
     */
    public static void foo(int x) {
        var mh$ = foo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("foo", x);
            }
            mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

