// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _MagickInfo {
 *     struct _MagickInfo *next;
 *     struct _MagickInfo *previous;
 *     const char *name;
 *     const char *description;
 *     const char *note;
 *     const char *version;
 *     const char *module;
 *     DecoderHandler decoder;
 *     EncoderHandler encoder;
 *     MagickHandler magick;
 *     void *client_data;
 *     unsigned int adjoin;
 *     unsigned int raw;
 *     unsigned int stealth;
 *     unsigned int seekable_stream;
 *     unsigned int blob_support;
 *     unsigned int thread_support;
 *     CoderClass coder_class;
 *     ExtensionTreatment extension_treatment;
 *     unsigned long signature;
 * }
 * }
 */
public class _MagickInfo {

    _MagickInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_POINTER.withName("next"),
        magick_wand_h.C_POINTER.withName("previous"),
        magick_wand_h.C_POINTER.withName("name"),
        magick_wand_h.C_POINTER.withName("description"),
        magick_wand_h.C_POINTER.withName("note"),
        magick_wand_h.C_POINTER.withName("version"),
        magick_wand_h.C_POINTER.withName("module"),
        magick_wand_h.C_POINTER.withName("decoder"),
        magick_wand_h.C_POINTER.withName("encoder"),
        magick_wand_h.C_POINTER.withName("magick"),
        magick_wand_h.C_POINTER.withName("client_data"),
        magick_wand_h.C_INT.withName("adjoin"),
        magick_wand_h.C_INT.withName("raw"),
        magick_wand_h.C_INT.withName("stealth"),
        magick_wand_h.C_INT.withName("seekable_stream"),
        magick_wand_h.C_INT.withName("blob_support"),
        magick_wand_h.C_INT.withName("thread_support"),
        magick_wand_h.C_INT.withName("coder_class"),
        magick_wand_h.C_INT.withName("extension_treatment"),
        magick_wand_h.C_LONG.withName("signature")
    ).withName("_MagickInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _MagickInfo *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _MagickInfo *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _MagickInfo *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _MagickInfo *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    private static final AddressLayout previous$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("previous"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _MagickInfo *previous
     * }
     */
    public static final AddressLayout previous$layout() {
        return previous$LAYOUT;
    }

    private static final long previous$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _MagickInfo *previous
     * }
     */
    public static final long previous$offset() {
        return previous$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _MagickInfo *previous
     * }
     */
    public static MemorySegment previous(MemorySegment struct) {
        return struct.get(previous$LAYOUT, previous$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _MagickInfo *previous
     * }
     */
    public static void previous(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(previous$LAYOUT, previous$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final AddressLayout note$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("note"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *note
     * }
     */
    public static final AddressLayout note$layout() {
        return note$LAYOUT;
    }

    private static final long note$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *note
     * }
     */
    public static final long note$offset() {
        return note$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *note
     * }
     */
    public static MemorySegment note(MemorySegment struct) {
        return struct.get(note$LAYOUT, note$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *note
     * }
     */
    public static void note(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(note$LAYOUT, note$OFFSET, fieldValue);
    }

    private static final AddressLayout version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static final AddressLayout version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static MemorySegment version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *version
     * }
     */
    public static void version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final AddressLayout module$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("module"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *module
     * }
     */
    public static final AddressLayout module$layout() {
        return module$LAYOUT;
    }

    private static final long module$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *module
     * }
     */
    public static final long module$offset() {
        return module$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *module
     * }
     */
    public static MemorySegment module(MemorySegment struct) {
        return struct.get(module$LAYOUT, module$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *module
     * }
     */
    public static void module(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(module$LAYOUT, module$OFFSET, fieldValue);
    }

    private static final AddressLayout decoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("decoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DecoderHandler decoder
     * }
     */
    public static final AddressLayout decoder$layout() {
        return decoder$LAYOUT;
    }

    private static final long decoder$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DecoderHandler decoder
     * }
     */
    public static final long decoder$offset() {
        return decoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DecoderHandler decoder
     * }
     */
    public static MemorySegment decoder(MemorySegment struct) {
        return struct.get(decoder$LAYOUT, decoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DecoderHandler decoder
     * }
     */
    public static void decoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(decoder$LAYOUT, decoder$OFFSET, fieldValue);
    }

    private static final AddressLayout encoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("encoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EncoderHandler encoder
     * }
     */
    public static final AddressLayout encoder$layout() {
        return encoder$LAYOUT;
    }

    private static final long encoder$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EncoderHandler encoder
     * }
     */
    public static final long encoder$offset() {
        return encoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EncoderHandler encoder
     * }
     */
    public static MemorySegment encoder(MemorySegment struct) {
        return struct.get(encoder$LAYOUT, encoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EncoderHandler encoder
     * }
     */
    public static void encoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(encoder$LAYOUT, encoder$OFFSET, fieldValue);
    }

    private static final AddressLayout magick$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("magick"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MagickHandler magick
     * }
     */
    public static final AddressLayout magick$layout() {
        return magick$LAYOUT;
    }

    private static final long magick$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MagickHandler magick
     * }
     */
    public static final long magick$offset() {
        return magick$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MagickHandler magick
     * }
     */
    public static MemorySegment magick(MemorySegment struct) {
        return struct.get(magick$LAYOUT, magick$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MagickHandler magick
     * }
     */
    public static void magick(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(magick$LAYOUT, magick$OFFSET, fieldValue);
    }

    private static final AddressLayout client_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final AddressLayout client_data$layout() {
        return client_data$LAYOUT;
    }

    private static final long client_data$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final long client_data$offset() {
        return client_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static MemorySegment client_data(MemorySegment struct) {
        return struct.get(client_data$LAYOUT, client_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static void client_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client_data$LAYOUT, client_data$OFFSET, fieldValue);
    }

    private static final OfInt adjoin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("adjoin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int adjoin
     * }
     */
    public static final OfInt adjoin$layout() {
        return adjoin$LAYOUT;
    }

    private static final long adjoin$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int adjoin
     * }
     */
    public static final long adjoin$offset() {
        return adjoin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int adjoin
     * }
     */
    public static int adjoin(MemorySegment struct) {
        return struct.get(adjoin$LAYOUT, adjoin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int adjoin
     * }
     */
    public static void adjoin(MemorySegment struct, int fieldValue) {
        struct.set(adjoin$LAYOUT, adjoin$OFFSET, fieldValue);
    }

    private static final OfInt raw$LAYOUT = (OfInt)$LAYOUT.select(groupElement("raw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int raw
     * }
     */
    public static final OfInt raw$layout() {
        return raw$LAYOUT;
    }

    private static final long raw$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int raw
     * }
     */
    public static final long raw$offset() {
        return raw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int raw
     * }
     */
    public static int raw(MemorySegment struct) {
        return struct.get(raw$LAYOUT, raw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int raw
     * }
     */
    public static void raw(MemorySegment struct, int fieldValue) {
        struct.set(raw$LAYOUT, raw$OFFSET, fieldValue);
    }

    private static final OfInt stealth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stealth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static final OfInt stealth$layout() {
        return stealth$LAYOUT;
    }

    private static final long stealth$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static final long stealth$offset() {
        return stealth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static int stealth(MemorySegment struct) {
        return struct.get(stealth$LAYOUT, stealth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static void stealth(MemorySegment struct, int fieldValue) {
        struct.set(stealth$LAYOUT, stealth$OFFSET, fieldValue);
    }

    private static final OfInt seekable_stream$LAYOUT = (OfInt)$LAYOUT.select(groupElement("seekable_stream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int seekable_stream
     * }
     */
    public static final OfInt seekable_stream$layout() {
        return seekable_stream$LAYOUT;
    }

    private static final long seekable_stream$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int seekable_stream
     * }
     */
    public static final long seekable_stream$offset() {
        return seekable_stream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int seekable_stream
     * }
     */
    public static int seekable_stream(MemorySegment struct) {
        return struct.get(seekable_stream$LAYOUT, seekable_stream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int seekable_stream
     * }
     */
    public static void seekable_stream(MemorySegment struct, int fieldValue) {
        struct.set(seekable_stream$LAYOUT, seekable_stream$OFFSET, fieldValue);
    }

    private static final OfInt blob_support$LAYOUT = (OfInt)$LAYOUT.select(groupElement("blob_support"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int blob_support
     * }
     */
    public static final OfInt blob_support$layout() {
        return blob_support$LAYOUT;
    }

    private static final long blob_support$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int blob_support
     * }
     */
    public static final long blob_support$offset() {
        return blob_support$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int blob_support
     * }
     */
    public static int blob_support(MemorySegment struct) {
        return struct.get(blob_support$LAYOUT, blob_support$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int blob_support
     * }
     */
    public static void blob_support(MemorySegment struct, int fieldValue) {
        struct.set(blob_support$LAYOUT, blob_support$OFFSET, fieldValue);
    }

    private static final OfInt thread_support$LAYOUT = (OfInt)$LAYOUT.select(groupElement("thread_support"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int thread_support
     * }
     */
    public static final OfInt thread_support$layout() {
        return thread_support$LAYOUT;
    }

    private static final long thread_support$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int thread_support
     * }
     */
    public static final long thread_support$offset() {
        return thread_support$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int thread_support
     * }
     */
    public static int thread_support(MemorySegment struct) {
        return struct.get(thread_support$LAYOUT, thread_support$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int thread_support
     * }
     */
    public static void thread_support(MemorySegment struct, int fieldValue) {
        struct.set(thread_support$LAYOUT, thread_support$OFFSET, fieldValue);
    }

    private static final OfInt coder_class$LAYOUT = (OfInt)$LAYOUT.select(groupElement("coder_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CoderClass coder_class
     * }
     */
    public static final OfInt coder_class$layout() {
        return coder_class$LAYOUT;
    }

    private static final long coder_class$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CoderClass coder_class
     * }
     */
    public static final long coder_class$offset() {
        return coder_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CoderClass coder_class
     * }
     */
    public static int coder_class(MemorySegment struct) {
        return struct.get(coder_class$LAYOUT, coder_class$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CoderClass coder_class
     * }
     */
    public static void coder_class(MemorySegment struct, int fieldValue) {
        struct.set(coder_class$LAYOUT, coder_class$OFFSET, fieldValue);
    }

    private static final OfInt extension_treatment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extension_treatment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ExtensionTreatment extension_treatment
     * }
     */
    public static final OfInt extension_treatment$layout() {
        return extension_treatment$LAYOUT;
    }

    private static final long extension_treatment$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ExtensionTreatment extension_treatment
     * }
     */
    public static final long extension_treatment$offset() {
        return extension_treatment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ExtensionTreatment extension_treatment
     * }
     */
    public static int extension_treatment(MemorySegment struct) {
        return struct.get(extension_treatment$LAYOUT, extension_treatment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ExtensionTreatment extension_treatment
     * }
     */
    public static void extension_treatment(MemorySegment struct, int fieldValue) {
        struct.set(extension_treatment$LAYOUT, extension_treatment$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

