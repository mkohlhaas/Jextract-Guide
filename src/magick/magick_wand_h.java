// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class magick_wand_h extends magick_wand_h_1 {

    magick_wand_h() {
        // Should not be called directly
    }

    private static class MagickGetImageType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageType$descriptor() {
        return MagickGetImageType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageType$handle() {
        return MagickGetImageType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageType$address() {
        return MagickGetImageType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImageType MagickGetImageType(MagickWand *)
     * }
     */
    public static int MagickGetImageType(MemorySegment x0) {
        var mh$ = MagickGetImageType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageType", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageSavedType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageSavedType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageSavedType(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageSavedType$descriptor() {
        return MagickGetImageSavedType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageSavedType(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageSavedType$handle() {
        return MagickGetImageSavedType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImageType MagickGetImageSavedType(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageSavedType$address() {
        return MagickGetImageSavedType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImageType MagickGetImageSavedType(MagickWand *)
     * }
     */
    public static int MagickGetImageSavedType(MemorySegment x0) {
        var mh$ = MagickGetImageSavedType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageSavedType", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageInterlaceScheme$descriptor() {
        return MagickGetImageInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageInterlaceScheme$handle() {
        return MagickGetImageInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageInterlaceScheme$address() {
        return MagickGetImageInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern InterlaceType MagickGetImageInterlaceScheme(MagickWand *)
     * }
     */
    public static int MagickGetImageInterlaceScheme(MemorySegment x0) {
        var mh$ = MagickGetImageInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageInterlaceScheme", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long MagickGetImageIndex(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageIndex$descriptor() {
        return MagickGetImageIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long MagickGetImageIndex(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageIndex$handle() {
        return MagickGetImageIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long MagickGetImageIndex(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageIndex$address() {
        return MagickGetImageIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long MagickGetImageIndex(MagickWand *)
     * }
     */
    public static long MagickGetImageIndex(MemorySegment x0) {
        var mh$ = MagickGetImageIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageIndex", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern magick_int64_t MagickGetImageSize(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageSize$descriptor() {
        return MagickGetImageSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern magick_int64_t MagickGetImageSize(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageSize$handle() {
        return MagickGetImageSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern magick_int64_t MagickGetImageSize(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageSize$address() {
        return MagickGetImageSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern magick_int64_t MagickGetImageSize(MagickWand *)
     * }
     */
    public static long MagickGetImageSize(MemorySegment x0) {
        var mh$ = MagickGetImageSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageSize", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CloneMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("CloneMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static FunctionDescriptor CloneMagickWand$descriptor() {
        return CloneMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static MethodHandle CloneMagickWand$handle() {
        return CloneMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static MemorySegment CloneMagickWand$address() {
        return CloneMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *CloneMagickWand(const MagickWand *)
     * }
     */
    public static MemorySegment CloneMagickWand(MemorySegment x0) {
        var mh$ = CloneMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CloneMagickWand", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAppendImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickAppendImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickAppendImages$descriptor() {
        return MagickAppendImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickAppendImages$handle() {
        return MagickAppendImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickAppendImages$address() {
        return MagickAppendImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickAppendImages(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickAppendImages(MemorySegment x0, int x1) {
        var mh$ = MagickAppendImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAppendImages", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAverageImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickAverageImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAverageImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickAverageImages$descriptor() {
        return MagickAverageImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAverageImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickAverageImages$handle() {
        return MagickAverageImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickAverageImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickAverageImages$address() {
        return MagickAverageImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickAverageImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickAverageImages(MemorySegment x0) {
        var mh$ = MagickAverageImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAverageImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCoalesceImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickCoalesceImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickCoalesceImages$descriptor() {
        return MagickCoalesceImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickCoalesceImages$handle() {
        return MagickCoalesceImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickCoalesceImages$address() {
        return MagickCoalesceImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCoalesceImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickCoalesceImages(MemorySegment x0) {
        var mh$ = MagickCoalesceImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCoalesceImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompareImageChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickCompareImageChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImageChannels(MagickWand *, const MagickWand *, const ChannelType, const MetricType, double *)
     * }
     */
    public static FunctionDescriptor MagickCompareImageChannels$descriptor() {
        return MagickCompareImageChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImageChannels(MagickWand *, const MagickWand *, const ChannelType, const MetricType, double *)
     * }
     */
    public static MethodHandle MagickCompareImageChannels$handle() {
        return MagickCompareImageChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImageChannels(MagickWand *, const MagickWand *, const ChannelType, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImageChannels$address() {
        return MagickCompareImageChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImageChannels(MagickWand *, const MagickWand *, const ChannelType, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImageChannels(MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4) {
        var mh$ = MagickCompareImageChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompareImageChannels", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompareImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickCompareImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static FunctionDescriptor MagickCompareImages$descriptor() {
        return MagickCompareImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MethodHandle MagickCompareImages$handle() {
        return MagickCompareImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImages$address() {
        return MagickCompareImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickCompareImages(MagickWand *, const MagickWand *, const MetricType, double *)
     * }
     */
    public static MemorySegment MagickCompareImages(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = MagickCompareImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompareImages", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDeconstructImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickDeconstructImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickDeconstructImages$descriptor() {
        return MagickDeconstructImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickDeconstructImages$handle() {
        return MagickDeconstructImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickDeconstructImages$address() {
        return MagickDeconstructImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickDeconstructImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickDeconstructImages(MemorySegment x0) {
        var mh$ = MagickDeconstructImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDeconstructImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFlattenImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickFlattenImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFlattenImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickFlattenImages$descriptor() {
        return MagickFlattenImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFlattenImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickFlattenImages$handle() {
        return MagickFlattenImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFlattenImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlattenImages$address() {
        return MagickFlattenImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickFlattenImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlattenImages(MemorySegment x0) {
        var mh$ = MagickFlattenImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFlattenImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFxImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickFxImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickFxImage$descriptor() {
        return MagickFxImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickFxImage$handle() {
        return MagickFxImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickFxImage$address() {
        return MagickFxImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickFxImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickFxImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFxImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFxImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickFxImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImageChannel(MagickWand *, const ChannelType, const char *)
     * }
     */
    public static FunctionDescriptor MagickFxImageChannel$descriptor() {
        return MagickFxImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImageChannel(MagickWand *, const ChannelType, const char *)
     * }
     */
    public static MethodHandle MagickFxImageChannel$handle() {
        return MagickFxImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImageChannel(MagickWand *, const ChannelType, const char *)
     * }
     */
    public static MemorySegment MagickFxImageChannel$address() {
        return MagickFxImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickFxImageChannel(MagickWand *, const ChannelType, const char *)
     * }
     */
    public static MemorySegment MagickFxImageChannel(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = MagickFxImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFxImageChannel", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImage$descriptor() {
        return MagickGetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImage$handle() {
        return MagickGetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImage$address() {
        return MagickGetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickGetImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImage(MemorySegment x0) {
        var mh$ = MagickGetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImage", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMorphImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickMorphImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickMorphImages$descriptor() {
        return MagickMorphImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickMorphImages$handle() {
        return MagickMorphImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickMorphImages$address() {
        return MagickMorphImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickMorphImages(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickMorphImages(MemorySegment x0, long x1) {
        var mh$ = MagickMorphImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMorphImages", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMosaicImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickMosaicImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMosaicImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickMosaicImages$descriptor() {
        return MagickMosaicImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMosaicImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickMosaicImages$handle() {
        return MagickMosaicImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMosaicImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickMosaicImages$address() {
        return MagickMosaicImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickMosaicImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickMosaicImages(MemorySegment x0) {
        var mh$ = MagickMosaicImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMosaicImages", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMontageImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickMontageImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static FunctionDescriptor MagickMontageImage$descriptor() {
        return MagickMontageImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static MethodHandle MagickMontageImage$handle() {
        return MagickMontageImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static MemorySegment MagickMontageImage$address() {
        return MagickMontageImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickMontageImage(MagickWand *, const DrawingWand *, const char *, const char *, const MontageMode, const char *)
     * }
     */
    public static MemorySegment MagickMontageImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, int x4, MemorySegment x5) {
        var mh$ = MagickMontageImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMontageImage", x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPreviewImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickPreviewImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static FunctionDescriptor MagickPreviewImages$descriptor() {
        return MagickPreviewImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static MethodHandle MagickPreviewImages$handle() {
        return MagickPreviewImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static MemorySegment MagickPreviewImages$address() {
        return MagickPreviewImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickPreviewImages(MagickWand *wand, const PreviewType)
     * }
     */
    public static MemorySegment MagickPreviewImages(MemorySegment wand, int x1) {
        var mh$ = MagickPreviewImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPreviewImages", wand, x1);
            }
            return (MemorySegment)mh$.invokeExact(wand, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSteganoImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSteganoImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const long)
     * }
     */
    public static FunctionDescriptor MagickSteganoImage$descriptor() {
        return MagickSteganoImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const long)
     * }
     */
    public static MethodHandle MagickSteganoImage$handle() {
        return MagickSteganoImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const long)
     * }
     */
    public static MemorySegment MagickSteganoImage$address() {
        return MagickSteganoImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickSteganoImage(MagickWand *, const MagickWand *, const long)
     * }
     */
    public static MemorySegment MagickSteganoImage(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = MagickSteganoImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSteganoImage", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickStereoImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickStereoImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickStereoImage$descriptor() {
        return MagickStereoImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickStereoImage$handle() {
        return MagickStereoImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickStereoImage$address() {
        return MagickStereoImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickStereoImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickStereoImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickStereoImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickStereoImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTextureImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickTextureImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickTextureImage$descriptor() {
        return MagickTextureImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickTextureImage$handle() {
        return MagickTextureImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickTextureImage$address() {
        return MagickTextureImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickTextureImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickTextureImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickTextureImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTextureImage", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTransformImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickTransformImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTransformImage(MagickWand *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickTransformImage$descriptor() {
        return MagickTransformImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTransformImage(MagickWand *, const char *, const char *)
     * }
     */
    public static MethodHandle MagickTransformImage$handle() {
        return MagickTransformImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *MagickTransformImage(MagickWand *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickTransformImage$address() {
        return MagickTransformImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *MagickTransformImage(MagickWand *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickTransformImage(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickTransformImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTransformImage", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NewMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER    );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("NewMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static FunctionDescriptor NewMagickWand$descriptor() {
        return NewMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static MethodHandle NewMagickWand$handle() {
        return NewMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static MemorySegment NewMagickWand$address() {
        return NewMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern MagickWand *NewMagickWand()
     * }
     */
    public static MemorySegment NewMagickWand() {
        var mh$ = NewMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NewMagickWand");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageOrientation$descriptor() {
        return MagickGetImageOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageOrientation$handle() {
        return MagickGetImageOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageOrientation$address() {
        return MagickGetImageOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern OrientationType MagickGetImageOrientation(MagickWand *)
     * }
     */
    public static int MagickGetImageOrientation(MemorySegment x0) {
        var mh$ = MagickGetImageOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageOrientation", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageHistogram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageHistogram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetImageHistogram$descriptor() {
        return MagickGetImageHistogram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetImageHistogram$handle() {
        return MagickGetImageHistogram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageHistogram$address() {
        return MagickGetImageHistogram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PixelWand **MagickGetImageHistogram(MagickWand *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageHistogram(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageHistogram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageHistogram", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageRenderingIntent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageRenderingIntent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageRenderingIntent$descriptor() {
        return MagickGetImageRenderingIntent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageRenderingIntent$handle() {
        return MagickGetImageRenderingIntent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageRenderingIntent$address() {
        return MagickGetImageRenderingIntent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern RenderingIntent MagickGetImageRenderingIntent(MagickWand *)
     * }
     */
    public static int MagickGetImageRenderingIntent(MemorySegment x0) {
        var mh$ = MagickGetImageRenderingIntent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageRenderingIntent", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageUnits$descriptor() {
        return MagickGetImageUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageUnits$handle() {
        return MagickGetImageUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageUnits$address() {
        return MagickGetImageUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ResolutionType MagickGetImageUnits(MagickWand *)
     * }
     */
    public static int MagickGetImageUnits(MemorySegment x0) {
        var mh$ = MagickGetImageUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageUnits", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DestroyMagickWand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("DestroyMagickWand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int DestroyMagickWand(MagickWand *)
     * }
     */
    public static FunctionDescriptor DestroyMagickWand$descriptor() {
        return DestroyMagickWand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int DestroyMagickWand(MagickWand *)
     * }
     */
    public static MethodHandle DestroyMagickWand$handle() {
        return DestroyMagickWand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int DestroyMagickWand(MagickWand *)
     * }
     */
    public static MemorySegment DestroyMagickWand$address() {
        return DestroyMagickWand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int DestroyMagickWand(MagickWand *)
     * }
     */
    public static int DestroyMagickWand(MemorySegment x0) {
        var mh$ = DestroyMagickWand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DestroyMagickWand", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAdaptiveThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickAdaptiveThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAdaptiveThresholdImage(MagickWand *, const unsigned long, const unsigned long, const long)
     * }
     */
    public static FunctionDescriptor MagickAdaptiveThresholdImage$descriptor() {
        return MagickAdaptiveThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAdaptiveThresholdImage(MagickWand *, const unsigned long, const unsigned long, const long)
     * }
     */
    public static MethodHandle MagickAdaptiveThresholdImage$handle() {
        return MagickAdaptiveThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAdaptiveThresholdImage(MagickWand *, const unsigned long, const unsigned long, const long)
     * }
     */
    public static MemorySegment MagickAdaptiveThresholdImage$address() {
        return MagickAdaptiveThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAdaptiveThresholdImage(MagickWand *, const unsigned long, const unsigned long, const long)
     * }
     */
    public static int MagickAdaptiveThresholdImage(MemorySegment x0, long x1, long x2, long x3) {
        var mh$ = MagickAdaptiveThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAdaptiveThresholdImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAddImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickAddImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickAddImage$descriptor() {
        return MagickAddImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickAddImage$handle() {
        return MagickAddImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickAddImage$address() {
        return MagickAddImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAddImage(MagickWand *, const MagickWand *)
     * }
     */
    public static int MagickAddImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickAddImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAddImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAddNoiseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickAddNoiseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddNoiseImage(MagickWand *, const NoiseType)
     * }
     */
    public static FunctionDescriptor MagickAddNoiseImage$descriptor() {
        return MagickAddNoiseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddNoiseImage(MagickWand *, const NoiseType)
     * }
     */
    public static MethodHandle MagickAddNoiseImage$handle() {
        return MagickAddNoiseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAddNoiseImage(MagickWand *, const NoiseType)
     * }
     */
    public static MemorySegment MagickAddNoiseImage$address() {
        return MagickAddNoiseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAddNoiseImage(MagickWand *, const NoiseType)
     * }
     */
    public static int MagickAddNoiseImage(MemorySegment x0, int x1) {
        var mh$ = MagickAddNoiseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAddNoiseImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAffineTransformImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickAffineTransformImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickAffineTransformImage$descriptor() {
        return MagickAffineTransformImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MethodHandle MagickAffineTransformImage$handle() {
        return MagickAffineTransformImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MemorySegment MagickAffineTransformImage$address() {
        return MagickAffineTransformImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAffineTransformImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static int MagickAffineTransformImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickAffineTransformImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAffineTransformImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAnnotateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickAnnotateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static FunctionDescriptor MagickAnnotateImage$descriptor() {
        return MagickAnnotateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static MethodHandle MagickAnnotateImage$handle() {
        return MagickAnnotateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static MemorySegment MagickAnnotateImage$address() {
        return MagickAnnotateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAnnotateImage(MagickWand *, const DrawingWand *, const double, const double, const double, const char *)
     * }
     */
    public static int MagickAnnotateImage(MemorySegment x0, MemorySegment x1, double x2, double x3, double x4, MemorySegment x5) {
        var mh$ = MagickAnnotateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAnnotateImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAnimateImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickAnimateImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickAnimateImages$descriptor() {
        return MagickAnimateImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickAnimateImages$handle() {
        return MagickAnimateImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickAnimateImages$address() {
        return MagickAnimateImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAnimateImages(MagickWand *, const char *)
     * }
     */
    public static int MagickAnimateImages(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickAnimateImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAnimateImages", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickAutoOrientImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickAutoOrientImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickAutoOrientImage(MagickWand *wand, const OrientationType)
     * }
     */
    public static FunctionDescriptor MagickAutoOrientImage$descriptor() {
        return MagickAutoOrientImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickAutoOrientImage(MagickWand *wand, const OrientationType)
     * }
     */
    public static MethodHandle MagickAutoOrientImage$handle() {
        return MagickAutoOrientImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickAutoOrientImage(MagickWand *wand, const OrientationType)
     * }
     */
    public static MemorySegment MagickAutoOrientImage$address() {
        return MagickAutoOrientImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickAutoOrientImage(MagickWand *wand, const OrientationType)
     * }
     */
    public static int MagickAutoOrientImage(MemorySegment wand, int x1) {
        var mh$ = MagickAutoOrientImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickAutoOrientImage", wand, x1);
            }
            return (int)mh$.invokeExact(wand, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBlackThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickBlackThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickBlackThresholdImage$descriptor() {
        return MagickBlackThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickBlackThresholdImage$handle() {
        return MagickBlackThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickBlackThresholdImage$address() {
        return MagickBlackThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickBlackThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickBlackThresholdImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickBlackThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBlackThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickBlurImage$descriptor() {
        return MagickBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickBlurImage$handle() {
        return MagickBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickBlurImage$address() {
        return MagickBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickBlurImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickBlurImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBlurImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickBorderImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickBorderImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickBorderImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickBorderImage$descriptor() {
        return MagickBorderImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickBorderImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickBorderImage$handle() {
        return MagickBorderImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickBorderImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickBorderImage$address() {
        return MagickBorderImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickBorderImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickBorderImage(MemorySegment x0, MemorySegment x1, long x2, long x3) {
        var mh$ = MagickBorderImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickBorderImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCdlImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickCdlImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCdlImage(MagickWand *wand, const char *cdl)
     * }
     */
    public static FunctionDescriptor MagickCdlImage$descriptor() {
        return MagickCdlImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCdlImage(MagickWand *wand, const char *cdl)
     * }
     */
    public static MethodHandle MagickCdlImage$handle() {
        return MagickCdlImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCdlImage(MagickWand *wand, const char *cdl)
     * }
     */
    public static MemorySegment MagickCdlImage$address() {
        return MagickCdlImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCdlImage(MagickWand *wand, const char *cdl)
     * }
     */
    public static int MagickCdlImage(MemorySegment wand, MemorySegment cdl) {
        var mh$ = MagickCdlImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCdlImage", wand, cdl);
            }
            return (int)mh$.invokeExact(wand, cdl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCharcoalImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickCharcoalImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickCharcoalImage$descriptor() {
        return MagickCharcoalImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickCharcoalImage$handle() {
        return MagickCharcoalImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickCharcoalImage$address() {
        return MagickCharcoalImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCharcoalImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickCharcoalImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickCharcoalImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCharcoalImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickChopImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickChopImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickChopImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickChopImage$descriptor() {
        return MagickChopImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickChopImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MethodHandle MagickChopImage$handle() {
        return MagickChopImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickChopImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MemorySegment MagickChopImage$address() {
        return MagickChopImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickChopImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static int MagickChopImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickChopImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickChopImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClipImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickClipImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickClipImage$descriptor() {
        return MagickClipImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickClipImage$handle() {
        return MagickClipImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickClipImage$address() {
        return MagickClipImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickClipImage(MagickWand *)
     * }
     */
    public static int MagickClipImage(MemorySegment x0) {
        var mh$ = MagickClipImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClipImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClipPathImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickClipPathImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipPathImage(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickClipPathImage$descriptor() {
        return MagickClipPathImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipPathImage(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static MethodHandle MagickClipPathImage$handle() {
        return MagickClipPathImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickClipPathImage(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static MemorySegment MagickClipPathImage$address() {
        return MagickClipPathImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickClipPathImage(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static int MagickClipPathImage(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickClipPathImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClipPathImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickColorFloodfillImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickColorFloodfillImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorFloodfillImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickColorFloodfillImage$descriptor() {
        return MagickColorFloodfillImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorFloodfillImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const long, const long)
     * }
     */
    public static MethodHandle MagickColorFloodfillImage$handle() {
        return MagickColorFloodfillImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorFloodfillImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const long, const long)
     * }
     */
    public static MemorySegment MagickColorFloodfillImage$address() {
        return MagickColorFloodfillImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickColorFloodfillImage(MagickWand *, const PixelWand *, const double, const PixelWand *, const long, const long)
     * }
     */
    public static int MagickColorFloodfillImage(MemorySegment x0, MemorySegment x1, double x2, MemorySegment x3, long x4, long x5) {
        var mh$ = MagickColorFloodfillImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickColorFloodfillImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickColorizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickColorizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickColorizeImage$descriptor() {
        return MagickColorizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickColorizeImage$handle() {
        return MagickColorizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickColorizeImage$address() {
        return MagickColorizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickColorizeImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static int MagickColorizeImage(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickColorizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickColorizeImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCommentImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickCommentImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickCommentImage$descriptor() {
        return MagickCommentImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickCommentImage$handle() {
        return MagickCommentImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickCommentImage$address() {
        return MagickCommentImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCommentImage(MagickWand *, const char *)
     * }
     */
    public static int MagickCommentImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickCommentImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCommentImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCompositeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickCompositeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickCompositeImage$descriptor() {
        return MagickCompositeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const long, const long)
     * }
     */
    public static MethodHandle MagickCompositeImage$handle() {
        return MagickCompositeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const long, const long)
     * }
     */
    public static MemorySegment MagickCompositeImage$address() {
        return MagickCompositeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCompositeImage(MagickWand *, const MagickWand *, const CompositeOperator, const long, const long)
     * }
     */
    public static int MagickCompositeImage(MemorySegment x0, MemorySegment x1, int x2, long x3, long x4) {
        var mh$ = MagickCompositeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCompositeImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickContrastImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickContrastImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickContrastImage(MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickContrastImage$descriptor() {
        return MagickContrastImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickContrastImage(MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickContrastImage$handle() {
        return MagickContrastImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickContrastImage(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickContrastImage$address() {
        return MagickContrastImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickContrastImage(MagickWand *, const unsigned int)
     * }
     */
    public static int MagickContrastImage(MemorySegment x0, int x1) {
        var mh$ = MagickContrastImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickContrastImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickConvolveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickConvolveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickConvolveImage(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static FunctionDescriptor MagickConvolveImage$descriptor() {
        return MagickConvolveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickConvolveImage(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static MethodHandle MagickConvolveImage$handle() {
        return MagickConvolveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickConvolveImage(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static MemorySegment MagickConvolveImage$address() {
        return MagickConvolveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickConvolveImage(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static int MagickConvolveImage(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickConvolveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickConvolveImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCropImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickCropImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCropImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickCropImage$descriptor() {
        return MagickCropImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCropImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MethodHandle MagickCropImage$handle() {
        return MagickCropImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCropImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MemorySegment MagickCropImage$address() {
        return MagickCropImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCropImage(MagickWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static int MagickCropImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickCropImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCropImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickCycleColormapImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickCycleColormapImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickCycleColormapImage(MagickWand *, const long)
     * }
     */
    public static FunctionDescriptor MagickCycleColormapImage$descriptor() {
        return MagickCycleColormapImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickCycleColormapImage(MagickWand *, const long)
     * }
     */
    public static MethodHandle MagickCycleColormapImage$handle() {
        return MagickCycleColormapImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickCycleColormapImage(MagickWand *, const long)
     * }
     */
    public static MemorySegment MagickCycleColormapImage$address() {
        return MagickCycleColormapImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickCycleColormapImage(MagickWand *, const long)
     * }
     */
    public static int MagickCycleColormapImage(MemorySegment x0, long x1) {
        var mh$ = MagickCycleColormapImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickCycleColormapImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDespeckleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickDespeckleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDespeckleImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickDespeckleImage$descriptor() {
        return MagickDespeckleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDespeckleImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickDespeckleImage$handle() {
        return MagickDespeckleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDespeckleImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickDespeckleImage$address() {
        return MagickDespeckleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDespeckleImage(MagickWand *)
     * }
     */
    public static int MagickDespeckleImage(MemorySegment x0) {
        var mh$ = MagickDespeckleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDespeckleImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDisplayImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickDisplayImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDisplayImage$descriptor() {
        return MagickDisplayImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDisplayImage$handle() {
        return MagickDisplayImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDisplayImage$address() {
        return MagickDisplayImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImage(MagickWand *, const char *)
     * }
     */
    public static int MagickDisplayImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDisplayImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDisplayImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDisplayImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickDisplayImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickDisplayImages$descriptor() {
        return MagickDisplayImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickDisplayImages$handle() {
        return MagickDisplayImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickDisplayImages$address() {
        return MagickDisplayImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDisplayImages(MagickWand *, const char *)
     * }
     */
    public static int MagickDisplayImages(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDisplayImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDisplayImages", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickDrawImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickDrawImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static FunctionDescriptor MagickDrawImage$descriptor() {
        return MagickDrawImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MethodHandle MagickDrawImage$handle() {
        return MagickDrawImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static MemorySegment MagickDrawImage$address() {
        return MagickDrawImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickDrawImage(MagickWand *, const DrawingWand *)
     * }
     */
    public static int MagickDrawImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickDrawImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickDrawImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEdgeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickEdgeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickEdgeImage$descriptor() {
        return MagickEdgeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickEdgeImage$handle() {
        return MagickEdgeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickEdgeImage$address() {
        return MagickEdgeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickEdgeImage(MagickWand *, const double)
     * }
     */
    public static int MagickEdgeImage(MemorySegment x0, double x1) {
        var mh$ = MagickEdgeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEdgeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEmbossImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickEmbossImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickEmbossImage$descriptor() {
        return MagickEmbossImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickEmbossImage$handle() {
        return MagickEmbossImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickEmbossImage$address() {
        return MagickEmbossImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickEmbossImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickEmbossImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickEmbossImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEmbossImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEnhanceImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickEnhanceImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickEnhanceImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickEnhanceImage$descriptor() {
        return MagickEnhanceImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickEnhanceImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickEnhanceImage$handle() {
        return MagickEnhanceImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickEnhanceImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickEnhanceImage$address() {
        return MagickEnhanceImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickEnhanceImage(MagickWand *)
     * }
     */
    public static int MagickEnhanceImage(MemorySegment x0) {
        var mh$ = MagickEnhanceImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEnhanceImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickEqualizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickEqualizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickEqualizeImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickEqualizeImage$descriptor() {
        return MagickEqualizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickEqualizeImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickEqualizeImage$handle() {
        return MagickEqualizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickEqualizeImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickEqualizeImage$address() {
        return MagickEqualizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickEqualizeImage(MagickWand *)
     * }
     */
    public static int MagickEqualizeImage(MemorySegment x0) {
        var mh$ = MagickEqualizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickEqualizeImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickExtentImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickExtentImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static FunctionDescriptor MagickExtentImage$descriptor() {
        return MagickExtentImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MethodHandle MagickExtentImage$handle() {
        return MagickExtentImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static MemorySegment MagickExtentImage$address() {
        return MagickExtentImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickExtentImage(MagickWand *, const size_t, const size_t, const ssize_t, const ssize_t)
     * }
     */
    public static int MagickExtentImage(MemorySegment x0, long x1, long x2, long x3, long x4) {
        var mh$ = MagickExtentImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickExtentImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFlipImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickFlipImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlipImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickFlipImage$descriptor() {
        return MagickFlipImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlipImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickFlipImage$handle() {
        return MagickFlipImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlipImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlipImage$address() {
        return MagickFlipImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickFlipImage(MagickWand *)
     * }
     */
    public static int MagickFlipImage(MemorySegment x0) {
        var mh$ = MagickFlipImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFlipImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFlopImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickFlopImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlopImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickFlopImage$descriptor() {
        return MagickFlopImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlopImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickFlopImage$handle() {
        return MagickFlopImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickFlopImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickFlopImage$address() {
        return MagickFlopImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickFlopImage(MagickWand *)
     * }
     */
    public static int MagickFlopImage(MemorySegment x0) {
        var mh$ = MagickFlopImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFlopImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickFrameImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickFrameImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickFrameImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickFrameImage$descriptor() {
        return MagickFrameImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickFrameImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MethodHandle MagickFrameImage$handle() {
        return MagickFrameImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickFrameImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static MemorySegment MagickFrameImage$address() {
        return MagickFrameImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickFrameImage(MagickWand *, const PixelWand *, const unsigned long, const unsigned long, const long, const long)
     * }
     */
    public static int MagickFrameImage(MemorySegment x0, MemorySegment x1, long x2, long x3, long x4, long x5) {
        var mh$ = MagickFrameImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickFrameImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGammaImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGammaImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickGammaImage$descriptor() {
        return MagickGammaImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickGammaImage$handle() {
        return MagickGammaImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickGammaImage$address() {
        return MagickGammaImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImage(MagickWand *, const double)
     * }
     */
    public static int MagickGammaImage(MemorySegment x0, double x1) {
        var mh$ = MagickGammaImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGammaImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGammaImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGammaImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static FunctionDescriptor MagickGammaImageChannel$descriptor() {
        return MagickGammaImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static MethodHandle MagickGammaImageChannel$handle() {
        return MagickGammaImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static MemorySegment MagickGammaImageChannel$address() {
        return MagickGammaImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGammaImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static int MagickGammaImageChannel(MemorySegment x0, int x1, double x2) {
        var mh$ = MagickGammaImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGammaImageChannel", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBackgroundColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageBackgroundColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBackgroundColor$descriptor() {
        return MagickGetImageBackgroundColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageBackgroundColor$handle() {
        return MagickGetImageBackgroundColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageBackgroundColor$address() {
        return MagickGetImageBackgroundColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBackgroundColor(MagickWand *, PixelWand *)
     * }
     */
    public static int MagickGetImageBackgroundColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageBackgroundColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBackgroundColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBluePrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageBluePrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBluePrimary(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBluePrimary$descriptor() {
        return MagickGetImageBluePrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBluePrimary(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageBluePrimary$handle() {
        return MagickGetImageBluePrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBluePrimary(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageBluePrimary$address() {
        return MagickGetImageBluePrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBluePrimary(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageBluePrimary(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageBluePrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBluePrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBorderColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageBorderColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageBorderColor$descriptor() {
        return MagickGetImageBorderColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageBorderColor$handle() {
        return MagickGetImageBorderColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageBorderColor$address() {
        return MagickGetImageBorderColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBorderColor(MagickWand *, PixelWand *)
     * }
     */
    public static int MagickGetImageBorderColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageBorderColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBorderColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageBoundingBox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageBoundingBox");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBoundingBox(MagickWand *wand, const double fuzz, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static FunctionDescriptor MagickGetImageBoundingBox$descriptor() {
        return MagickGetImageBoundingBox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBoundingBox(MagickWand *wand, const double fuzz, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static MethodHandle MagickGetImageBoundingBox$handle() {
        return MagickGetImageBoundingBox.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBoundingBox(MagickWand *wand, const double fuzz, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static MemorySegment MagickGetImageBoundingBox$address() {
        return MagickGetImageBoundingBox.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageBoundingBox(MagickWand *wand, const double fuzz, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static int MagickGetImageBoundingBox(MemorySegment wand, double fuzz, MemorySegment width, MemorySegment height, MemorySegment x, MemorySegment y) {
        var mh$ = MagickGetImageBoundingBox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageBoundingBox", wand, fuzz, width, height, x, y);
            }
            return (int)mh$.invokeExact(wand, fuzz, width, height, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageChannelExtrema {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageChannelExtrema");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelExtrema(MagickWand *, const ChannelType, unsigned long *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetImageChannelExtrema$descriptor() {
        return MagickGetImageChannelExtrema.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelExtrema(MagickWand *, const ChannelType, unsigned long *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetImageChannelExtrema$handle() {
        return MagickGetImageChannelExtrema.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelExtrema(MagickWand *, const ChannelType, unsigned long *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageChannelExtrema$address() {
        return MagickGetImageChannelExtrema.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelExtrema(MagickWand *, const ChannelType, unsigned long *, unsigned long *)
     * }
     */
    public static int MagickGetImageChannelExtrema(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickGetImageChannelExtrema.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageChannelExtrema", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageChannelMean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageChannelMean");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelMean(MagickWand *, const ChannelType, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageChannelMean$descriptor() {
        return MagickGetImageChannelMean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelMean(MagickWand *, const ChannelType, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageChannelMean$handle() {
        return MagickGetImageChannelMean.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelMean(MagickWand *, const ChannelType, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageChannelMean$address() {
        return MagickGetImageChannelMean.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageChannelMean(MagickWand *, const ChannelType, double *, double *)
     * }
     */
    public static int MagickGetImageChannelMean(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickGetImageChannelMean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageChannelMean", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageColormapColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageColormapColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageColormapColor(MagickWand *, const unsigned long, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageColormapColor$descriptor() {
        return MagickGetImageColormapColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageColormapColor(MagickWand *, const unsigned long, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageColormapColor$handle() {
        return MagickGetImageColormapColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageColormapColor(MagickWand *, const unsigned long, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageColormapColor$address() {
        return MagickGetImageColormapColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageColormapColor(MagickWand *, const unsigned long, PixelWand *)
     * }
     */
    public static int MagickGetImageColormapColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickGetImageColormapColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageColormapColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageExtrema {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageExtrema");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageExtrema(MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetImageExtrema$descriptor() {
        return MagickGetImageExtrema.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageExtrema(MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetImageExtrema$handle() {
        return MagickGetImageExtrema.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageExtrema(MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageExtrema$address() {
        return MagickGetImageExtrema.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageExtrema(MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static int MagickGetImageExtrema(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageExtrema.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageExtrema", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageGreenPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageGreenPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageGreenPrimary(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageGreenPrimary$descriptor() {
        return MagickGetImageGreenPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageGreenPrimary(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageGreenPrimary$handle() {
        return MagickGetImageGreenPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageGreenPrimary(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageGreenPrimary$address() {
        return MagickGetImageGreenPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageGreenPrimary(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageGreenPrimary(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageGreenPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageGreenPrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageMatte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageMatte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatte(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageMatte$descriptor() {
        return MagickGetImageMatte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatte(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageMatte$handle() {
        return MagickGetImageMatte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatte(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageMatte$address() {
        return MagickGetImageMatte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatte(MagickWand *)
     * }
     */
    public static int MagickGetImageMatte(MemorySegment x0) {
        var mh$ = MagickGetImageMatte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageMatte", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageMatteColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageMatteColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageMatteColor$descriptor() {
        return MagickGetImageMatteColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static MethodHandle MagickGetImageMatteColor$handle() {
        return MagickGetImageMatteColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static MemorySegment MagickGetImageMatteColor$address() {
        return MagickGetImageMatteColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageMatteColor(MagickWand *, PixelWand *)
     * }
     */
    public static int MagickGetImageMatteColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickGetImageMatteColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageMatteColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImagePage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImagePage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePage(MagickWand *wand, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static FunctionDescriptor MagickGetImagePage$descriptor() {
        return MagickGetImagePage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePage(MagickWand *wand, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static MethodHandle MagickGetImagePage$handle() {
        return MagickGetImagePage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePage(MagickWand *wand, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static MemorySegment MagickGetImagePage$address() {
        return MagickGetImagePage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePage(MagickWand *wand, unsigned long *width, unsigned long *height, long *x, long *y)
     * }
     */
    public static int MagickGetImagePage(MemorySegment wand, MemorySegment width, MemorySegment height, MemorySegment x, MemorySegment y) {
        var mh$ = MagickGetImagePage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImagePage", wand, width, height, x, y);
            }
            return (int)mh$.invokeExact(wand, width, height, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImagePixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImagePixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static FunctionDescriptor MagickGetImagePixels$descriptor() {
        return MagickGetImagePixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static MethodHandle MagickGetImagePixels$handle() {
        return MagickGetImagePixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static MemorySegment MagickGetImagePixels$address() {
        return MagickGetImagePixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static int MagickGetImagePixels(MemorySegment x0, long x1, long x2, long x3, long x4, MemorySegment x5, int x6, MemorySegment x7) {
        var mh$ = MagickGetImagePixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImagePixels", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageRedPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageRedPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageRedPrimary(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageRedPrimary$descriptor() {
        return MagickGetImageRedPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageRedPrimary(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageRedPrimary$handle() {
        return MagickGetImageRedPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageRedPrimary(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageRedPrimary$address() {
        return MagickGetImageRedPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageRedPrimary(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageRedPrimary(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageRedPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageRedPrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageResolution$descriptor() {
        return MagickGetImageResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageResolution$handle() {
        return MagickGetImageResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageResolution$address() {
        return MagickGetImageResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageResolution(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageResolution(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageResolution", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageWhitePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageWhitePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageWhitePoint(MagickWand *, double *, double *)
     * }
     */
    public static FunctionDescriptor MagickGetImageWhitePoint$descriptor() {
        return MagickGetImageWhitePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageWhitePoint(MagickWand *, double *, double *)
     * }
     */
    public static MethodHandle MagickGetImageWhitePoint$handle() {
        return MagickGetImageWhitePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageWhitePoint(MagickWand *, double *, double *)
     * }
     */
    public static MemorySegment MagickGetImageWhitePoint$address() {
        return MagickGetImageWhitePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetImageWhitePoint(MagickWand *, double *, double *)
     * }
     */
    public static int MagickGetImageWhitePoint(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageWhitePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageWhitePoint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetSize(const MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetSize$descriptor() {
        return MagickGetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetSize(const MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetSize$handle() {
        return MagickGetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickGetSize(const MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetSize$address() {
        return MagickGetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickGetSize(const MagickWand *, unsigned long *, unsigned long *)
     * }
     */
    public static int MagickGetSize(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHaldClutImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickHaldClutImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickHaldClutImage(MagickWand *wand, const MagickWand *clut_wand)
     * }
     */
    public static FunctionDescriptor MagickHaldClutImage$descriptor() {
        return MagickHaldClutImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickHaldClutImage(MagickWand *wand, const MagickWand *clut_wand)
     * }
     */
    public static MethodHandle MagickHaldClutImage$handle() {
        return MagickHaldClutImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickHaldClutImage(MagickWand *wand, const MagickWand *clut_wand)
     * }
     */
    public static MemorySegment MagickHaldClutImage$address() {
        return MagickHaldClutImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickHaldClutImage(MagickWand *wand, const MagickWand *clut_wand)
     * }
     */
    public static int MagickHaldClutImage(MemorySegment wand, MemorySegment clut_wand) {
        var mh$ = MagickHaldClutImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHaldClutImage", wand, clut_wand);
            }
            return (int)mh$.invokeExact(wand, clut_wand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHasColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickHasColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasColormap(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickHasColormap$descriptor() {
        return MagickHasColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasColormap(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickHasColormap$handle() {
        return MagickHasColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasColormap(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickHasColormap$address() {
        return MagickHasColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickHasColormap(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickHasColormap(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickHasColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHasColormap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHasNextImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickHasNextImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasNextImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickHasNextImage$descriptor() {
        return MagickHasNextImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasNextImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickHasNextImage$handle() {
        return MagickHasNextImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasNextImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickHasNextImage$address() {
        return MagickHasNextImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickHasNextImage(MagickWand *)
     * }
     */
    public static int MagickHasNextImage(MemorySegment x0) {
        var mh$ = MagickHasNextImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHasNextImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickHasPreviousImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickHasPreviousImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickHasPreviousImage$descriptor() {
        return MagickHasPreviousImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickHasPreviousImage$handle() {
        return MagickHasPreviousImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickHasPreviousImage$address() {
        return MagickHasPreviousImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickHasPreviousImage(MagickWand *)
     * }
     */
    public static int MagickHasPreviousImage(MemorySegment x0) {
        var mh$ = MagickHasPreviousImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickHasPreviousImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickImplodeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickImplodeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickImplodeImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickImplodeImage$descriptor() {
        return MagickImplodeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickImplodeImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickImplodeImage$handle() {
        return MagickImplodeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickImplodeImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickImplodeImage$address() {
        return MagickImplodeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickImplodeImage(MagickWand *, const double)
     * }
     */
    public static int MagickImplodeImage(MemorySegment x0, double x1) {
        var mh$ = MagickImplodeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickImplodeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIsGrayImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickIsGrayImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsGrayImage(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickIsGrayImage$descriptor() {
        return MagickIsGrayImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsGrayImage(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickIsGrayImage$handle() {
        return MagickIsGrayImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsGrayImage(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickIsGrayImage$address() {
        return MagickIsGrayImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickIsGrayImage(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickIsGrayImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickIsGrayImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIsGrayImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIsMonochromeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickIsMonochromeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsMonochromeImage(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickIsMonochromeImage$descriptor() {
        return MagickIsMonochromeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsMonochromeImage(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickIsMonochromeImage$handle() {
        return MagickIsMonochromeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsMonochromeImage(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickIsMonochromeImage$address() {
        return MagickIsMonochromeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickIsMonochromeImage(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickIsMonochromeImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickIsMonochromeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIsMonochromeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIsOpaqueImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickIsOpaqueImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsOpaqueImage(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickIsOpaqueImage$descriptor() {
        return MagickIsOpaqueImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsOpaqueImage(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickIsOpaqueImage$handle() {
        return MagickIsOpaqueImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsOpaqueImage(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickIsOpaqueImage$address() {
        return MagickIsOpaqueImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickIsOpaqueImage(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickIsOpaqueImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickIsOpaqueImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIsOpaqueImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickIsPaletteImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickIsPaletteImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsPaletteImage(MagickWand *, unsigned int *)
     * }
     */
    public static FunctionDescriptor MagickIsPaletteImage$descriptor() {
        return MagickIsPaletteImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsPaletteImage(MagickWand *, unsigned int *)
     * }
     */
    public static MethodHandle MagickIsPaletteImage$handle() {
        return MagickIsPaletteImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickIsPaletteImage(MagickWand *, unsigned int *)
     * }
     */
    public static MemorySegment MagickIsPaletteImage$address() {
        return MagickIsPaletteImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickIsPaletteImage(MagickWand *, unsigned int *)
     * }
     */
    public static int MagickIsPaletteImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickIsPaletteImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickIsPaletteImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLabelImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickLabelImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickLabelImage$descriptor() {
        return MagickLabelImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickLabelImage$handle() {
        return MagickLabelImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickLabelImage$address() {
        return MagickLabelImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickLabelImage(MagickWand *, const char *)
     * }
     */
    public static int MagickLabelImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickLabelImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLabelImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLevelImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickLevelImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickLevelImage$descriptor() {
        return MagickLevelImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickLevelImage$handle() {
        return MagickLevelImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickLevelImage$address() {
        return MagickLevelImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickLevelImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickLevelImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLevelImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickLevelImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickLevelImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImageChannel(MagickWand *, const ChannelType, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickLevelImageChannel$descriptor() {
        return MagickLevelImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImageChannel(MagickWand *, const ChannelType, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickLevelImageChannel$handle() {
        return MagickLevelImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImageChannel(MagickWand *, const ChannelType, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickLevelImageChannel$address() {
        return MagickLevelImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickLevelImageChannel(MagickWand *, const ChannelType, const double, const double, const double)
     * }
     */
    public static int MagickLevelImageChannel(MemorySegment x0, int x1, double x2, double x3, double x4) {
        var mh$ = MagickLevelImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickLevelImageChannel", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMagnifyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickMagnifyImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMagnifyImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickMagnifyImage$descriptor() {
        return MagickMagnifyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMagnifyImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickMagnifyImage$handle() {
        return MagickMagnifyImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMagnifyImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickMagnifyImage$address() {
        return MagickMagnifyImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMagnifyImage(MagickWand *)
     * }
     */
    public static int MagickMagnifyImage(MemorySegment x0) {
        var mh$ = MagickMagnifyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMagnifyImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMapImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickMapImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMapImage(MagickWand *, const MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickMapImage$descriptor() {
        return MagickMapImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMapImage(MagickWand *, const MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickMapImage$handle() {
        return MagickMapImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMapImage(MagickWand *, const MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickMapImage$address() {
        return MagickMapImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMapImage(MagickWand *, const MagickWand *, const unsigned int)
     * }
     */
    public static int MagickMapImage(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickMapImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMapImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMatteFloodfillImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_SHORT,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickMatteFloodfillImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMatteFloodfillImage(MagickWand *, const Quantum, const double, const PixelWand *, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickMatteFloodfillImage$descriptor() {
        return MagickMatteFloodfillImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMatteFloodfillImage(MagickWand *, const Quantum, const double, const PixelWand *, const long, const long)
     * }
     */
    public static MethodHandle MagickMatteFloodfillImage$handle() {
        return MagickMatteFloodfillImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMatteFloodfillImage(MagickWand *, const Quantum, const double, const PixelWand *, const long, const long)
     * }
     */
    public static MemorySegment MagickMatteFloodfillImage$address() {
        return MagickMatteFloodfillImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMatteFloodfillImage(MagickWand *, const Quantum, const double, const PixelWand *, const long, const long)
     * }
     */
    public static int MagickMatteFloodfillImage(MemorySegment x0, short x1, double x2, MemorySegment x3, long x4, long x5) {
        var mh$ = MagickMatteFloodfillImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMatteFloodfillImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMedianFilterImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickMedianFilterImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMedianFilterImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickMedianFilterImage$descriptor() {
        return MagickMedianFilterImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMedianFilterImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickMedianFilterImage$handle() {
        return MagickMedianFilterImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMedianFilterImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickMedianFilterImage$address() {
        return MagickMedianFilterImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMedianFilterImage(MagickWand *, const double)
     * }
     */
    public static int MagickMedianFilterImage(MemorySegment x0, double x1) {
        var mh$ = MagickMedianFilterImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMedianFilterImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMinifyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickMinifyImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMinifyImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickMinifyImage$descriptor() {
        return MagickMinifyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMinifyImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickMinifyImage$handle() {
        return MagickMinifyImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMinifyImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickMinifyImage$address() {
        return MagickMinifyImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMinifyImage(MagickWand *)
     * }
     */
    public static int MagickMinifyImage(MemorySegment x0) {
        var mh$ = MagickMinifyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMinifyImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickModulateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickModulateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickModulateImage$descriptor() {
        return MagickModulateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickModulateImage$handle() {
        return MagickModulateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickModulateImage$address() {
        return MagickModulateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickModulateImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickModulateImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickModulateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickModulateImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickMotionBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickMotionBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickMotionBlurImage$descriptor() {
        return MagickMotionBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickMotionBlurImage$handle() {
        return MagickMotionBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickMotionBlurImage$address() {
        return MagickMotionBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickMotionBlurImage(MagickWand *, const double, const double, const double)
     * }
     */
    public static int MagickMotionBlurImage(MemorySegment x0, double x1, double x2, double x3) {
        var mh$ = MagickMotionBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickMotionBlurImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNegateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickNegateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImage(MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickNegateImage$descriptor() {
        return MagickNegateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImage(MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickNegateImage$handle() {
        return MagickNegateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImage(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickNegateImage$address() {
        return MagickNegateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImage(MagickWand *, const unsigned int)
     * }
     */
    public static int MagickNegateImage(MemorySegment x0, int x1) {
        var mh$ = MagickNegateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNegateImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNegateImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickNegateImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImageChannel(MagickWand *, const ChannelType, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickNegateImageChannel$descriptor() {
        return MagickNegateImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImageChannel(MagickWand *, const ChannelType, const unsigned int)
     * }
     */
    public static MethodHandle MagickNegateImageChannel$handle() {
        return MagickNegateImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImageChannel(MagickWand *, const ChannelType, const unsigned int)
     * }
     */
    public static MemorySegment MagickNegateImageChannel$address() {
        return MagickNegateImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickNegateImageChannel(MagickWand *, const ChannelType, const unsigned int)
     * }
     */
    public static int MagickNegateImageChannel(MemorySegment x0, int x1, int x2) {
        var mh$ = MagickNegateImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNegateImageChannel", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNextImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickNextImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickNextImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickNextImage$descriptor() {
        return MagickNextImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickNextImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickNextImage$handle() {
        return MagickNextImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickNextImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickNextImage$address() {
        return MagickNextImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickNextImage(MagickWand *)
     * }
     */
    public static int MagickNextImage(MemorySegment x0) {
        var mh$ = MagickNextImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNextImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickNormalizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickNormalizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickNormalizeImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickNormalizeImage$descriptor() {
        return MagickNormalizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickNormalizeImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickNormalizeImage$handle() {
        return MagickNormalizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickNormalizeImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickNormalizeImage$address() {
        return MagickNormalizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickNormalizeImage(MagickWand *)
     * }
     */
    public static int MagickNormalizeImage(MemorySegment x0) {
        var mh$ = MagickNormalizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickNormalizeImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOilPaintImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickOilPaintImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickOilPaintImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickOilPaintImage$descriptor() {
        return MagickOilPaintImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickOilPaintImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickOilPaintImage$handle() {
        return MagickOilPaintImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickOilPaintImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickOilPaintImage$address() {
        return MagickOilPaintImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickOilPaintImage(MagickWand *, const double)
     * }
     */
    public static int MagickOilPaintImage(MemorySegment x0, double x1) {
        var mh$ = MagickOilPaintImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOilPaintImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOpaqueImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickOpaqueImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickOpaqueImage(MagickWand *, const PixelWand *, const PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickOpaqueImage$descriptor() {
        return MagickOpaqueImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickOpaqueImage(MagickWand *, const PixelWand *, const PixelWand *, const double)
     * }
     */
    public static MethodHandle MagickOpaqueImage$handle() {
        return MagickOpaqueImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickOpaqueImage(MagickWand *, const PixelWand *, const PixelWand *, const double)
     * }
     */
    public static MemorySegment MagickOpaqueImage$address() {
        return MagickOpaqueImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickOpaqueImage(MagickWand *, const PixelWand *, const PixelWand *, const double)
     * }
     */
    public static int MagickOpaqueImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, double x3) {
        var mh$ = MagickOpaqueImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOpaqueImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickOperatorImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_INT,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickOperatorImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickOperatorImageChannel(MagickWand *, const ChannelType, const QuantumOperator, const double)
     * }
     */
    public static FunctionDescriptor MagickOperatorImageChannel$descriptor() {
        return MagickOperatorImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickOperatorImageChannel(MagickWand *, const ChannelType, const QuantumOperator, const double)
     * }
     */
    public static MethodHandle MagickOperatorImageChannel$handle() {
        return MagickOperatorImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickOperatorImageChannel(MagickWand *, const ChannelType, const QuantumOperator, const double)
     * }
     */
    public static MemorySegment MagickOperatorImageChannel$address() {
        return MagickOperatorImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickOperatorImageChannel(MagickWand *, const ChannelType, const QuantumOperator, const double)
     * }
     */
    public static int MagickOperatorImageChannel(MemorySegment x0, int x1, int x2, double x3) {
        var mh$ = MagickOperatorImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickOperatorImageChannel", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPingImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickPingImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickPingImage$descriptor() {
        return MagickPingImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickPingImage$handle() {
        return MagickPingImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickPingImage$address() {
        return MagickPingImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickPingImage(MagickWand *, const char *)
     * }
     */
    public static int MagickPingImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickPingImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPingImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickPreviousImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickPreviousImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickPreviousImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickPreviousImage$descriptor() {
        return MagickPreviousImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickPreviousImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickPreviousImage$handle() {
        return MagickPreviousImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickPreviousImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickPreviousImage$address() {
        return MagickPreviousImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickPreviousImage(MagickWand *)
     * }
     */
    public static int MagickPreviousImage(MemorySegment x0) {
        var mh$ = MagickPreviousImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickPreviousImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickProfileImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickProfileImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickProfileImage(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickProfileImage$descriptor() {
        return MagickProfileImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickProfileImage(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static MethodHandle MagickProfileImage$handle() {
        return MagickProfileImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickProfileImage(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static MemorySegment MagickProfileImage$address() {
        return MagickProfileImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickProfileImage(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static int MagickProfileImage(MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = MagickProfileImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickProfileImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQuantizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_INT,
            magick_wand_h.C_LONG,
            magick_wand_h.C_INT,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickQuantizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImage(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickQuantizeImage$descriptor() {
        return MagickQuantizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImage(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static MethodHandle MagickQuantizeImage$handle() {
        return MagickQuantizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImage(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static MemorySegment MagickQuantizeImage$address() {
        return MagickQuantizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImage(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static int MagickQuantizeImage(MemorySegment x0, long x1, int x2, long x3, int x4, int x5) {
        var mh$ = MagickQuantizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQuantizeImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickQuantizeImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_INT,
            magick_wand_h.C_LONG,
            magick_wand_h.C_INT,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickQuantizeImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImages(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickQuantizeImages$descriptor() {
        return MagickQuantizeImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImages(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static MethodHandle MagickQuantizeImages$handle() {
        return MagickQuantizeImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImages(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static MemorySegment MagickQuantizeImages$address() {
        return MagickQuantizeImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickQuantizeImages(MagickWand *, const unsigned long, const ColorspaceType, const unsigned long, const unsigned int, const unsigned int)
     * }
     */
    public static int MagickQuantizeImages(MemorySegment x0, long x1, int x2, long x3, int x4, int x5) {
        var mh$ = MagickQuantizeImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickQuantizeImages", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRadialBlurImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickRadialBlurImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRadialBlurImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickRadialBlurImage$descriptor() {
        return MagickRadialBlurImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRadialBlurImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickRadialBlurImage$handle() {
        return MagickRadialBlurImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRadialBlurImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickRadialBlurImage$address() {
        return MagickRadialBlurImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRadialBlurImage(MagickWand *, const double)
     * }
     */
    public static int MagickRadialBlurImage(MemorySegment x0, double x1) {
        var mh$ = MagickRadialBlurImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRadialBlurImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRaiseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickRaiseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRaiseImage(MagickWand *, const unsigned long, const unsigned long, const long, const long, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickRaiseImage$descriptor() {
        return MagickRaiseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRaiseImage(MagickWand *, const unsigned long, const unsigned long, const long, const long, const unsigned int)
     * }
     */
    public static MethodHandle MagickRaiseImage$handle() {
        return MagickRaiseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRaiseImage(MagickWand *, const unsigned long, const unsigned long, const long, const long, const unsigned int)
     * }
     */
    public static MemorySegment MagickRaiseImage$address() {
        return MagickRaiseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRaiseImage(MagickWand *, const unsigned long, const unsigned long, const long, const long, const unsigned int)
     * }
     */
    public static int MagickRaiseImage(MemorySegment x0, long x1, long x2, long x3, long x4, int x5) {
        var mh$ = MagickRaiseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRaiseImage", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReadImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickReadImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickReadImage$descriptor() {
        return MagickReadImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickReadImage$handle() {
        return MagickReadImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickReadImage$address() {
        return MagickReadImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickReadImage(MagickWand *, const char *)
     * }
     */
    public static int MagickReadImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickReadImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReadImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReadImageBlob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickReadImageBlob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageBlob(MagickWand *, const unsigned char *, const size_t length)
     * }
     */
    public static FunctionDescriptor MagickReadImageBlob$descriptor() {
        return MagickReadImageBlob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageBlob(MagickWand *, const unsigned char *, const size_t length)
     * }
     */
    public static MethodHandle MagickReadImageBlob$handle() {
        return MagickReadImageBlob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageBlob(MagickWand *, const unsigned char *, const size_t length)
     * }
     */
    public static MemorySegment MagickReadImageBlob$address() {
        return MagickReadImageBlob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageBlob(MagickWand *, const unsigned char *, const size_t length)
     * }
     */
    public static int MagickReadImageBlob(MemorySegment x0, MemorySegment x1, long length) {
        var mh$ = MagickReadImageBlob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReadImageBlob", x0, x1, length);
            }
            return (int)mh$.invokeExact(x0, x1, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReadImageFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickReadImageFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static FunctionDescriptor MagickReadImageFile$descriptor() {
        return MagickReadImageFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static MethodHandle MagickReadImageFile$handle() {
        return MagickReadImageFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static MemorySegment MagickReadImageFile$address() {
        return MagickReadImageFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickReadImageFile(MagickWand *, FILE *)
     * }
     */
    public static int MagickReadImageFile(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickReadImageFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReadImageFile", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickReduceNoiseImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickReduceNoiseImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickReduceNoiseImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickReduceNoiseImage$descriptor() {
        return MagickReduceNoiseImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickReduceNoiseImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickReduceNoiseImage$handle() {
        return MagickReduceNoiseImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickReduceNoiseImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickReduceNoiseImage$address() {
        return MagickReduceNoiseImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickReduceNoiseImage(MagickWand *, const double)
     * }
     */
    public static int MagickReduceNoiseImage(MemorySegment x0, double x1) {
        var mh$ = MagickReduceNoiseImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickReduceNoiseImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRelinquishMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickRelinquishMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRelinquishMemory(void *)
     * }
     */
    public static FunctionDescriptor MagickRelinquishMemory$descriptor() {
        return MagickRelinquishMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRelinquishMemory(void *)
     * }
     */
    public static MethodHandle MagickRelinquishMemory$handle() {
        return MagickRelinquishMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRelinquishMemory(void *)
     * }
     */
    public static MemorySegment MagickRelinquishMemory$address() {
        return MagickRelinquishMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRelinquishMemory(void *)
     * }
     */
    public static int MagickRelinquishMemory(MemorySegment x0) {
        var mh$ = MagickRelinquishMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRelinquishMemory", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRemoveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickRemoveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickRemoveImage$descriptor() {
        return MagickRemoveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickRemoveImage$handle() {
        return MagickRemoveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickRemoveImage$address() {
        return MagickRemoveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImage(MagickWand *)
     * }
     */
    public static int MagickRemoveImage(MemorySegment x0) {
        var mh$ = MagickRemoveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRemoveImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRemoveImageOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickRemoveImageOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImageOption(MagickWand *wand, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickRemoveImageOption$descriptor() {
        return MagickRemoveImageOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImageOption(MagickWand *wand, const char *, const char *)
     * }
     */
    public static MethodHandle MagickRemoveImageOption$handle() {
        return MagickRemoveImageOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImageOption(MagickWand *wand, const char *, const char *)
     * }
     */
    public static MemorySegment MagickRemoveImageOption$address() {
        return MagickRemoveImageOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRemoveImageOption(MagickWand *wand, const char *, const char *)
     * }
     */
    public static int MagickRemoveImageOption(MemorySegment wand, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickRemoveImageOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRemoveImageOption", wand, x1, x2);
            }
            return (int)mh$.invokeExact(wand, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResampleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_INT,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickResampleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickResampleImage(MagickWand *, const double, const double, const FilterTypes, const double)
     * }
     */
    public static FunctionDescriptor MagickResampleImage$descriptor() {
        return MagickResampleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickResampleImage(MagickWand *, const double, const double, const FilterTypes, const double)
     * }
     */
    public static MethodHandle MagickResampleImage$handle() {
        return MagickResampleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickResampleImage(MagickWand *, const double, const double, const FilterTypes, const double)
     * }
     */
    public static MemorySegment MagickResampleImage$address() {
        return MagickResampleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickResampleImage(MagickWand *, const double, const double, const FilterTypes, const double)
     * }
     */
    public static int MagickResampleImage(MemorySegment x0, double x1, double x2, int x3, double x4) {
        var mh$ = MagickResampleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResampleImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_INT,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickResizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickResizeImage(MagickWand *, const unsigned long, const unsigned long, const FilterTypes, const double)
     * }
     */
    public static FunctionDescriptor MagickResizeImage$descriptor() {
        return MagickResizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickResizeImage(MagickWand *, const unsigned long, const unsigned long, const FilterTypes, const double)
     * }
     */
    public static MethodHandle MagickResizeImage$handle() {
        return MagickResizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickResizeImage(MagickWand *, const unsigned long, const unsigned long, const FilterTypes, const double)
     * }
     */
    public static MemorySegment MagickResizeImage$address() {
        return MagickResizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickResizeImage(MagickWand *, const unsigned long, const unsigned long, const FilterTypes, const double)
     * }
     */
    public static int MagickResizeImage(MemorySegment x0, long x1, long x2, int x3, double x4) {
        var mh$ = MagickResizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResizeImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRollImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickRollImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRollImage(MagickWand *, const long, const long)
     * }
     */
    public static FunctionDescriptor MagickRollImage$descriptor() {
        return MagickRollImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRollImage(MagickWand *, const long, const long)
     * }
     */
    public static MethodHandle MagickRollImage$handle() {
        return MagickRollImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRollImage(MagickWand *, const long, const long)
     * }
     */
    public static MemorySegment MagickRollImage$address() {
        return MagickRollImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRollImage(MagickWand *, const long, const long)
     * }
     */
    public static int MagickRollImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickRollImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRollImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRotateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickRotateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickRotateImage$descriptor() {
        return MagickRotateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static MethodHandle MagickRotateImage$handle() {
        return MagickRotateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static MemorySegment MagickRotateImage$address() {
        return MagickRotateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickRotateImage(MagickWand *, const PixelWand *, const double)
     * }
     */
    public static int MagickRotateImage(MemorySegment x0, MemorySegment x1, double x2) {
        var mh$ = MagickRotateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRotateImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSampleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSampleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSampleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSampleImage$descriptor() {
        return MagickSampleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSampleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickSampleImage$handle() {
        return MagickSampleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSampleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickSampleImage$address() {
        return MagickSampleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSampleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickSampleImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickSampleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSampleImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickScaleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickScaleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickScaleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickScaleImage$descriptor() {
        return MagickScaleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickScaleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickScaleImage$handle() {
        return MagickScaleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickScaleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickScaleImage$address() {
        return MagickScaleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickScaleImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickScaleImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickScaleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickScaleImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSeparateImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSeparateImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSeparateImageChannel(MagickWand *, const ChannelType)
     * }
     */
    public static FunctionDescriptor MagickSeparateImageChannel$descriptor() {
        return MagickSeparateImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSeparateImageChannel(MagickWand *, const ChannelType)
     * }
     */
    public static MethodHandle MagickSeparateImageChannel$handle() {
        return MagickSeparateImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSeparateImageChannel(MagickWand *, const ChannelType)
     * }
     */
    public static MemorySegment MagickSeparateImageChannel$address() {
        return MagickSeparateImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSeparateImageChannel(MagickWand *, const ChannelType)
     * }
     */
    public static int MagickSeparateImageChannel(MemorySegment x0, int x1) {
        var mh$ = MagickSeparateImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSeparateImageChannel", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetCompressionQuality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetCompressionQuality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetCompressionQuality(MagickWand *wand, const unsigned long quality)
     * }
     */
    public static FunctionDescriptor MagickSetCompressionQuality$descriptor() {
        return MagickSetCompressionQuality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetCompressionQuality(MagickWand *wand, const unsigned long quality)
     * }
     */
    public static MethodHandle MagickSetCompressionQuality$handle() {
        return MagickSetCompressionQuality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetCompressionQuality(MagickWand *wand, const unsigned long quality)
     * }
     */
    public static MemorySegment MagickSetCompressionQuality$address() {
        return MagickSetCompressionQuality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetCompressionQuality(MagickWand *wand, const unsigned long quality)
     * }
     */
    public static int MagickSetCompressionQuality(MemorySegment wand, long quality) {
        var mh$ = MagickSetCompressionQuality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetCompressionQuality", wand, quality);
            }
            return (int)mh$.invokeExact(wand, quality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetFilename$descriptor() {
        return MagickSetFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetFilename$handle() {
        return MagickSetFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetFilename$address() {
        return MagickSetFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetFilename(MagickWand *, const char *)
     * }
     */
    public static int MagickSetFilename(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetFilename", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetFormat$descriptor() {
        return MagickSetFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetFormat$handle() {
        return MagickSetFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetFormat$address() {
        return MagickSetFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetFormat(MagickWand *, const char *)
     * }
     */
    public static int MagickSetFormat(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetFormat", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImage$descriptor() {
        return MagickSetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MethodHandle MagickSetImage$handle() {
        return MagickSetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static MemorySegment MagickSetImage$address() {
        return MagickSetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImage(MagickWand *, const MagickWand *)
     * }
     */
    public static int MagickSetImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageAttribute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageAttribute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageAttribute(MagickWand *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageAttribute$descriptor() {
        return MagickSetImageAttribute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageAttribute(MagickWand *, const char *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageAttribute$handle() {
        return MagickSetImageAttribute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageAttribute(MagickWand *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageAttribute$address() {
        return MagickSetImageAttribute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageAttribute(MagickWand *, const char *, const char *)
     * }
     */
    public static int MagickSetImageAttribute(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickSetImageAttribute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageAttribute", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageBackgroundColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageBackgroundColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageBackgroundColor$descriptor() {
        return MagickSetImageBackgroundColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageBackgroundColor$handle() {
        return MagickSetImageBackgroundColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageBackgroundColor$address() {
        return MagickSetImageBackgroundColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBackgroundColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageBackgroundColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageBackgroundColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageBackgroundColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageBluePrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageBluePrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBluePrimary(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageBluePrimary$descriptor() {
        return MagickSetImageBluePrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBluePrimary(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageBluePrimary$handle() {
        return MagickSetImageBluePrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBluePrimary(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageBluePrimary$address() {
        return MagickSetImageBluePrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBluePrimary(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageBluePrimary(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageBluePrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageBluePrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageBorderColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageBorderColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageBorderColor$descriptor() {
        return MagickSetImageBorderColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageBorderColor$handle() {
        return MagickSetImageBorderColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageBorderColor$address() {
        return MagickSetImageBorderColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageBorderColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageBorderColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageBorderColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageBorderColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageChannelDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageChannelDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageChannelDepth(MagickWand *, const ChannelType, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageChannelDepth$descriptor() {
        return MagickSetImageChannelDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageChannelDepth(MagickWand *, const ChannelType, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageChannelDepth$handle() {
        return MagickSetImageChannelDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageChannelDepth(MagickWand *, const ChannelType, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageChannelDepth$address() {
        return MagickSetImageChannelDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageChannelDepth(MagickWand *, const ChannelType, const unsigned long)
     * }
     */
    public static int MagickSetImageChannelDepth(MemorySegment x0, int x1, long x2) {
        var mh$ = MagickSetImageChannelDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageChannelDepth", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageColormapColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageColormapColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColormapColor(MagickWand *, const unsigned long, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageColormapColor$descriptor() {
        return MagickSetImageColormapColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColormapColor(MagickWand *, const unsigned long, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageColormapColor$handle() {
        return MagickSetImageColormapColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColormapColor(MagickWand *, const unsigned long, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageColormapColor$address() {
        return MagickSetImageColormapColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColormapColor(MagickWand *, const unsigned long, const PixelWand *)
     * }
     */
    public static int MagickSetImageColormapColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickSetImageColormapColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageColormapColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageCompose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageCompose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static FunctionDescriptor MagickSetImageCompose$descriptor() {
        return MagickSetImageCompose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static MethodHandle MagickSetImageCompose$handle() {
        return MagickSetImageCompose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static MemorySegment MagickSetImageCompose$address() {
        return MagickSetImageCompose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompose(MagickWand *, const CompositeOperator)
     * }
     */
    public static int MagickSetImageCompose(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageCompose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageCompose", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageCompression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageCompression");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static FunctionDescriptor MagickSetImageCompression$descriptor() {
        return MagickSetImageCompression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static MethodHandle MagickSetImageCompression$handle() {
        return MagickSetImageCompression.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static MemorySegment MagickSetImageCompression$address() {
        return MagickSetImageCompression.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageCompression(MagickWand *, const CompressionType)
     * }
     */
    public static int MagickSetImageCompression(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageCompression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageCompression", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDelay(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageDelay$descriptor() {
        return MagickSetImageDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDelay(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageDelay$handle() {
        return MagickSetImageDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDelay(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageDelay$address() {
        return MagickSetImageDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDelay(MagickWand *, const unsigned long)
     * }
     */
    public static int MagickSetImageDelay(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageDelay", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDepth(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageDepth$descriptor() {
        return MagickSetImageDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDepth(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageDepth$handle() {
        return MagickSetImageDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDepth(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageDepth$address() {
        return MagickSetImageDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDepth(MagickWand *, const unsigned long)
     * }
     */
    public static int MagickSetImageDepth(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageDepth", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageDispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageDispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static FunctionDescriptor MagickSetImageDispose$descriptor() {
        return MagickSetImageDispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static MethodHandle MagickSetImageDispose$handle() {
        return MagickSetImageDispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static MemorySegment MagickSetImageDispose$address() {
        return MagickSetImageDispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageDispose(MagickWand *, const DisposeType)
     * }
     */
    public static int MagickSetImageDispose(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageDispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageDispose", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageColorspace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageColorspace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static FunctionDescriptor MagickSetImageColorspace$descriptor() {
        return MagickSetImageColorspace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MethodHandle MagickSetImageColorspace$handle() {
        return MagickSetImageColorspace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static MemorySegment MagickSetImageColorspace$address() {
        return MagickSetImageColorspace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageColorspace(MagickWand *, const ColorspaceType)
     * }
     */
    public static int MagickSetImageColorspace(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageColorspace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageColorspace", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGreenPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageGreenPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGreenPrimary(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageGreenPrimary$descriptor() {
        return MagickSetImageGreenPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGreenPrimary(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageGreenPrimary$handle() {
        return MagickSetImageGreenPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGreenPrimary(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageGreenPrimary$address() {
        return MagickSetImageGreenPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGreenPrimary(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageGreenPrimary(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageGreenPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGreenPrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGamma {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageGamma");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageGamma$descriptor() {
        return MagickSetImageGamma.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSetImageGamma$handle() {
        return MagickSetImageGamma.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSetImageGamma$address() {
        return MagickSetImageGamma.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGamma(MagickWand *, const double)
     * }
     */
    public static int MagickSetImageGamma(MemorySegment x0, double x1) {
        var mh$ = MagickSetImageGamma.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGamma", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageGeometry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGeometry(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageGeometry$descriptor() {
        return MagickSetImageGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGeometry(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageGeometry$handle() {
        return MagickSetImageGeometry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGeometry(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageGeometry$address() {
        return MagickSetImageGeometry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGeometry(MagickWand *, const char *)
     * }
     */
    public static int MagickSetImageGeometry(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGeometry", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static FunctionDescriptor MagickSetImageGravity$descriptor() {
        return MagickSetImageGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static MethodHandle MagickSetImageGravity$handle() {
        return MagickSetImageGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static MemorySegment MagickSetImageGravity$address() {
        return MagickSetImageGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageGravity(MagickWand *, const GravityType)
     * }
     */
    public static int MagickSetImageGravity(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageGravity", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFilename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageFilename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageFilename$descriptor() {
        return MagickSetImageFilename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageFilename$handle() {
        return MagickSetImageFilename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageFilename$address() {
        return MagickSetImageFilename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFilename(MagickWand *, const char *)
     * }
     */
    public static int MagickSetImageFilename(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageFilename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFilename", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFormat(MagickWand *wand, const char *format)
     * }
     */
    public static FunctionDescriptor MagickSetImageFormat$descriptor() {
        return MagickSetImageFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFormat(MagickWand *wand, const char *format)
     * }
     */
    public static MethodHandle MagickSetImageFormat$handle() {
        return MagickSetImageFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFormat(MagickWand *wand, const char *format)
     * }
     */
    public static MemorySegment MagickSetImageFormat$address() {
        return MagickSetImageFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFormat(MagickWand *wand, const char *format)
     * }
     */
    public static int MagickSetImageFormat(MemorySegment wand, MemorySegment format) {
        var mh$ = MagickSetImageFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFormat", wand, format);
            }
            return (int)mh$.invokeExact(wand, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageFuzz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageFuzz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageFuzz$descriptor() {
        return MagickSetImageFuzz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSetImageFuzz$handle() {
        return MagickSetImageFuzz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSetImageFuzz$address() {
        return MagickSetImageFuzz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageFuzz(MagickWand *, const double)
     * }
     */
    public static int MagickSetImageFuzz(MemorySegment x0, double x1) {
        var mh$ = MagickSetImageFuzz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageFuzz", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIndex(MagickWand *, const long)
     * }
     */
    public static FunctionDescriptor MagickSetImageIndex$descriptor() {
        return MagickSetImageIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIndex(MagickWand *, const long)
     * }
     */
    public static MethodHandle MagickSetImageIndex$handle() {
        return MagickSetImageIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIndex(MagickWand *, const long)
     * }
     */
    public static MemorySegment MagickSetImageIndex$address() {
        return MagickSetImageIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIndex(MagickWand *, const long)
     * }
     */
    public static int MagickSetImageIndex(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageIndex", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static FunctionDescriptor MagickSetImageInterlaceScheme$descriptor() {
        return MagickSetImageInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MethodHandle MagickSetImageInterlaceScheme$handle() {
        return MagickSetImageInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MemorySegment MagickSetImageInterlaceScheme$address() {
        return MagickSetImageInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static int MagickSetImageInterlaceScheme(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageInterlaceScheme", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIterations(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageIterations$descriptor() {
        return MagickSetImageIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIterations(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageIterations$handle() {
        return MagickSetImageIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIterations(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageIterations$address() {
        return MagickSetImageIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageIterations(MagickWand *, const unsigned long)
     * }
     */
    public static int MagickSetImageIterations(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageIterations", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageMatte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageMatte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatte(MagickWand *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickSetImageMatte$descriptor() {
        return MagickSetImageMatte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatte(MagickWand *, const unsigned int)
     * }
     */
    public static MethodHandle MagickSetImageMatte$handle() {
        return MagickSetImageMatte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatte(MagickWand *, const unsigned int)
     * }
     */
    public static MemorySegment MagickSetImageMatte$address() {
        return MagickSetImageMatte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatte(MagickWand *, const unsigned int)
     * }
     */
    public static int MagickSetImageMatte(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageMatte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageMatte", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageMatteColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageMatteColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickSetImageMatteColor$descriptor() {
        return MagickSetImageMatteColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickSetImageMatteColor$handle() {
        return MagickSetImageMatteColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickSetImageMatteColor$address() {
        return MagickSetImageMatteColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageMatteColor(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickSetImageMatteColor(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetImageMatteColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageMatteColor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOption(MagickWand *, const char *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetImageOption$descriptor() {
        return MagickSetImageOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOption(MagickWand *, const char *, const char *, const char *)
     * }
     */
    public static MethodHandle MagickSetImageOption$handle() {
        return MagickSetImageOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOption(MagickWand *, const char *, const char *, const char *)
     * }
     */
    public static MemorySegment MagickSetImageOption$address() {
        return MagickSetImageOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOption(MagickWand *, const char *, const char *, const char *)
     * }
     */
    public static int MagickSetImageOption(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MagickSetImageOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageOption", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static FunctionDescriptor MagickSetImageOrientation$descriptor() {
        return MagickSetImageOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static MethodHandle MagickSetImageOrientation$handle() {
        return MagickSetImageOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static MemorySegment MagickSetImageOrientation$address() {
        return MagickSetImageOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageOrientation(MagickWand *, const OrientationType)
     * }
     */
    public static int MagickSetImageOrientation(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageOrientation", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImagePage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImagePage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePage(MagickWand *wand, const unsigned long width, const unsigned long height, const long x, const long y)
     * }
     */
    public static FunctionDescriptor MagickSetImagePage$descriptor() {
        return MagickSetImagePage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePage(MagickWand *wand, const unsigned long width, const unsigned long height, const long x, const long y)
     * }
     */
    public static MethodHandle MagickSetImagePage$handle() {
        return MagickSetImagePage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePage(MagickWand *wand, const unsigned long width, const unsigned long height, const long x, const long y)
     * }
     */
    public static MemorySegment MagickSetImagePage$address() {
        return MagickSetImagePage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePage(MagickWand *wand, const unsigned long width, const unsigned long height, const long x, const long y)
     * }
     */
    public static int MagickSetImagePage(MemorySegment wand, long width, long height, long x, long y) {
        var mh$ = MagickSetImagePage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImagePage", wand, width, height, x, y);
            }
            return (int)mh$.invokeExact(wand, width, height, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImagePixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImagePixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static FunctionDescriptor MagickSetImagePixels$descriptor() {
        return MagickSetImagePixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static MethodHandle MagickSetImagePixels$handle() {
        return MagickSetImagePixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static MemorySegment MagickSetImagePixels$address() {
        return MagickSetImagePixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImagePixels(MagickWand *, const long, const long, const unsigned long, const unsigned long, const char *, const StorageType, unsigned char *)
     * }
     */
    public static int MagickSetImagePixels(MemorySegment x0, long x1, long x2, long x3, long x4, MemorySegment x5, int x6, MemorySegment x7) {
        var mh$ = MagickSetImagePixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImagePixels", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageRedPrimary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageRedPrimary");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRedPrimary(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageRedPrimary$descriptor() {
        return MagickSetImageRedPrimary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRedPrimary(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageRedPrimary$handle() {
        return MagickSetImageRedPrimary.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRedPrimary(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageRedPrimary$address() {
        return MagickSetImageRedPrimary.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRedPrimary(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageRedPrimary(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageRedPrimary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageRedPrimary", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageRenderingIntent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageRenderingIntent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static FunctionDescriptor MagickSetImageRenderingIntent$descriptor() {
        return MagickSetImageRenderingIntent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static MethodHandle MagickSetImageRenderingIntent$handle() {
        return MagickSetImageRenderingIntent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static MemorySegment MagickSetImageRenderingIntent$address() {
        return MagickSetImageRenderingIntent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageRenderingIntent(MagickWand *, const RenderingIntent)
     * }
     */
    public static int MagickSetImageRenderingIntent(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageRenderingIntent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageRenderingIntent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageResolution$descriptor() {
        return MagickSetImageResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageResolution$handle() {
        return MagickSetImageResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageResolution$address() {
        return MagickSetImageResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageResolution(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageResolution(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageResolution", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageScene {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageScene");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageScene(MagickWand *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageScene$descriptor() {
        return MagickSetImageScene.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageScene(MagickWand *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageScene$handle() {
        return MagickSetImageScene.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageScene(MagickWand *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageScene$address() {
        return MagickSetImageScene.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageScene(MagickWand *, const unsigned long)
     * }
     */
    public static int MagickSetImageScene(MemorySegment x0, long x1) {
        var mh$ = MagickSetImageScene.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageScene", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static FunctionDescriptor MagickSetImageType$descriptor() {
        return MagickSetImageType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static MethodHandle MagickSetImageType$handle() {
        return MagickSetImageType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static MemorySegment MagickSetImageType$address() {
        return MagickSetImageType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageType(MagickWand *, const ImageType)
     * }
     */
    public static int MagickSetImageType(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageType", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageSavedType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageSavedType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageSavedType(MagickWand *, const ImageType)
     * }
     */
    public static FunctionDescriptor MagickSetImageSavedType$descriptor() {
        return MagickSetImageSavedType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageSavedType(MagickWand *, const ImageType)
     * }
     */
    public static MethodHandle MagickSetImageSavedType$handle() {
        return MagickSetImageSavedType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageSavedType(MagickWand *, const ImageType)
     * }
     */
    public static MemorySegment MagickSetImageSavedType$address() {
        return MagickSetImageSavedType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageSavedType(MagickWand *, const ImageType)
     * }
     */
    public static int MagickSetImageSavedType(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageSavedType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageSavedType", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static FunctionDescriptor MagickSetImageUnits$descriptor() {
        return MagickSetImageUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static MethodHandle MagickSetImageUnits$handle() {
        return MagickSetImageUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static MemorySegment MagickSetImageUnits$address() {
        return MagickSetImageUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageUnits(MagickWand *, const ResolutionType)
     * }
     */
    public static int MagickSetImageUnits(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageUnits", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageVirtualPixelMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageVirtualPixelMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static FunctionDescriptor MagickSetImageVirtualPixelMethod$descriptor() {
        return MagickSetImageVirtualPixelMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static MethodHandle MagickSetImageVirtualPixelMethod$handle() {
        return MagickSetImageVirtualPixelMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static MemorySegment MagickSetImageVirtualPixelMethod$address() {
        return MagickSetImageVirtualPixelMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageVirtualPixelMethod(MagickWand *, const VirtualPixelMethod)
     * }
     */
    public static int MagickSetImageVirtualPixelMethod(MemorySegment x0, int x1) {
        var mh$ = MagickSetImageVirtualPixelMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageVirtualPixelMethod", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetPassphrase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetPassphrase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickSetPassphrase$descriptor() {
        return MagickSetPassphrase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickSetPassphrase$handle() {
        return MagickSetPassphrase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickSetPassphrase$address() {
        return MagickSetPassphrase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetPassphrase(MagickWand *, const char *)
     * }
     */
    public static int MagickSetPassphrase(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickSetPassphrase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetPassphrase", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageProfile(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetImageProfile$descriptor() {
        return MagickSetImageProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageProfile(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetImageProfile$handle() {
        return MagickSetImageProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageProfile(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetImageProfile$address() {
        return MagickSetImageProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageProfile(MagickWand *, const char *, const unsigned char *, const unsigned long)
     * }
     */
    public static int MagickSetImageProfile(MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = MagickSetImageProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageProfile", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetResolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetResolution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolution(MagickWand *wand, const double x_resolution, const double y_resolution)
     * }
     */
    public static FunctionDescriptor MagickSetResolution$descriptor() {
        return MagickSetResolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolution(MagickWand *wand, const double x_resolution, const double y_resolution)
     * }
     */
    public static MethodHandle MagickSetResolution$handle() {
        return MagickSetResolution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolution(MagickWand *wand, const double x_resolution, const double y_resolution)
     * }
     */
    public static MemorySegment MagickSetResolution$address() {
        return MagickSetResolution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolution(MagickWand *wand, const double x_resolution, const double y_resolution)
     * }
     */
    public static int MagickSetResolution(MemorySegment wand, double x_resolution, double y_resolution) {
        var mh$ = MagickSetResolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetResolution", wand, x_resolution, y_resolution);
            }
            return (int)mh$.invokeExact(wand, x_resolution, y_resolution);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetResolutionUnits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetResolutionUnits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolutionUnits(MagickWand *wand, const ResolutionType units)
     * }
     */
    public static FunctionDescriptor MagickSetResolutionUnits$descriptor() {
        return MagickSetResolutionUnits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolutionUnits(MagickWand *wand, const ResolutionType units)
     * }
     */
    public static MethodHandle MagickSetResolutionUnits$handle() {
        return MagickSetResolutionUnits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolutionUnits(MagickWand *wand, const ResolutionType units)
     * }
     */
    public static MemorySegment MagickSetResolutionUnits$address() {
        return MagickSetResolutionUnits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetResolutionUnits(MagickWand *wand, const ResolutionType units)
     * }
     */
    public static int MagickSetResolutionUnits(MemorySegment wand, int units) {
        var mh$ = MagickSetResolutionUnits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetResolutionUnits", wand, units);
            }
            return (int)mh$.invokeExact(wand, units);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetResourceLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_INT,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetResourceLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResourceLimit(const ResourceType type, const unsigned long limit)
     * }
     */
    public static FunctionDescriptor MagickSetResourceLimit$descriptor() {
        return MagickSetResourceLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResourceLimit(const ResourceType type, const unsigned long limit)
     * }
     */
    public static MethodHandle MagickSetResourceLimit$handle() {
        return MagickSetResourceLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetResourceLimit(const ResourceType type, const unsigned long limit)
     * }
     */
    public static MemorySegment MagickSetResourceLimit$address() {
        return MagickSetResourceLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetResourceLimit(const ResourceType type, const unsigned long limit)
     * }
     */
    public static int MagickSetResourceLimit(int type, long limit) {
        var mh$ = MagickSetResourceLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetResourceLimit", type, limit);
            }
            return (int)mh$.invokeExact(type, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetSamplingFactors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetSamplingFactors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSamplingFactors(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static FunctionDescriptor MagickSetSamplingFactors$descriptor() {
        return MagickSetSamplingFactors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSamplingFactors(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static MethodHandle MagickSetSamplingFactors$handle() {
        return MagickSetSamplingFactors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSamplingFactors(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static MemorySegment MagickSetSamplingFactors$address() {
        return MagickSetSamplingFactors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetSamplingFactors(MagickWand *, const unsigned long, const double *)
     * }
     */
    public static int MagickSetSamplingFactors(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = MagickSetSamplingFactors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetSamplingFactors", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSize(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickSetSize$descriptor() {
        return MagickSetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSize(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickSetSize$handle() {
        return MagickSetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetSize(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickSetSize$address() {
        return MagickSetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetSize(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickSetSize(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickSetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetImageWhitePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetImageWhitePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageWhitePoint(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSetImageWhitePoint$descriptor() {
        return MagickSetImageWhitePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageWhitePoint(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSetImageWhitePoint$handle() {
        return MagickSetImageWhitePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageWhitePoint(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSetImageWhitePoint$address() {
        return MagickSetImageWhitePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetImageWhitePoint(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSetImageWhitePoint(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSetImageWhitePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetImageWhitePoint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSetInterlaceScheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSetInterlaceScheme");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static FunctionDescriptor MagickSetInterlaceScheme$descriptor() {
        return MagickSetInterlaceScheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MethodHandle MagickSetInterlaceScheme$handle() {
        return MagickSetInterlaceScheme.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static MemorySegment MagickSetInterlaceScheme$address() {
        return MagickSetInterlaceScheme.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSetInterlaceScheme(MagickWand *, const InterlaceType)
     * }
     */
    public static int MagickSetInterlaceScheme(MemorySegment x0, int x1) {
        var mh$ = MagickSetInterlaceScheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSetInterlaceScheme", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSharpenImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSharpenImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickSharpenImage$descriptor() {
        return MagickSharpenImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickSharpenImage$handle() {
        return MagickSharpenImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickSharpenImage$address() {
        return MagickSharpenImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSharpenImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickSharpenImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickSharpenImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSharpenImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickShaveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_LONG,
            magick_wand_h.C_LONG
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickShaveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickShaveImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static FunctionDescriptor MagickShaveImage$descriptor() {
        return MagickShaveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickShaveImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MethodHandle MagickShaveImage$handle() {
        return MagickShaveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickShaveImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static MemorySegment MagickShaveImage$address() {
        return MagickShaveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickShaveImage(MagickWand *, const unsigned long, const unsigned long)
     * }
     */
    public static int MagickShaveImage(MemorySegment x0, long x1, long x2) {
        var mh$ = MagickShaveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickShaveImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickShearImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickShearImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickShearImage$descriptor() {
        return MagickShearImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickShearImage$handle() {
        return MagickShearImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickShearImage$address() {
        return MagickShearImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickShearImage(MagickWand *, const PixelWand *, const double, const double)
     * }
     */
    public static int MagickShearImage(MemorySegment x0, MemorySegment x1, double x2, double x3) {
        var mh$ = MagickShearImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickShearImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSolarizeImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSolarizeImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSolarizeImage$descriptor() {
        return MagickSolarizeImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSolarizeImage$handle() {
        return MagickSolarizeImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSolarizeImage$address() {
        return MagickSolarizeImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSolarizeImage(MagickWand *, const double)
     * }
     */
    public static int MagickSolarizeImage(MemorySegment x0, double x1) {
        var mh$ = MagickSolarizeImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSolarizeImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSpreadImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSpreadImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSpreadImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSpreadImage$descriptor() {
        return MagickSpreadImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSpreadImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSpreadImage$handle() {
        return MagickSpreadImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSpreadImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSpreadImage$address() {
        return MagickSpreadImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSpreadImage(MagickWand *, const double)
     * }
     */
    public static int MagickSpreadImage(MemorySegment x0, double x1) {
        var mh$ = MagickSpreadImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSpreadImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickStripImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickStripImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickStripImage(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickStripImage$descriptor() {
        return MagickStripImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickStripImage(MagickWand *)
     * }
     */
    public static MethodHandle MagickStripImage$handle() {
        return MagickStripImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickStripImage(MagickWand *)
     * }
     */
    public static MemorySegment MagickStripImage$address() {
        return MagickStripImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickStripImage(MagickWand *)
     * }
     */
    public static int MagickStripImage(MemorySegment x0) {
        var mh$ = MagickStripImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickStripImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickSwirlImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickSwirlImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickSwirlImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickSwirlImage$descriptor() {
        return MagickSwirlImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickSwirlImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickSwirlImage$handle() {
        return MagickSwirlImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickSwirlImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickSwirlImage$address() {
        return MagickSwirlImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickSwirlImage(MagickWand *, const double)
     * }
     */
    public static int MagickSwirlImage(MemorySegment x0, double x1) {
        var mh$ = MagickSwirlImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickSwirlImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTintImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickTintImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickTintImage$descriptor() {
        return MagickTintImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickTintImage$handle() {
        return MagickTintImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickTintImage$address() {
        return MagickTintImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickTintImage(MagickWand *, const PixelWand *, const PixelWand *)
     * }
     */
    public static int MagickTintImage(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickTintImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTintImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickThresholdImage$descriptor() {
        return MagickThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickThresholdImage$handle() {
        return MagickThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickThresholdImage$address() {
        return MagickThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImage(MagickWand *, const double)
     * }
     */
    public static int MagickThresholdImage(MemorySegment x0, double x1) {
        var mh$ = MagickThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickThresholdImageChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickThresholdImageChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static FunctionDescriptor MagickThresholdImageChannel$descriptor() {
        return MagickThresholdImageChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static MethodHandle MagickThresholdImageChannel$handle() {
        return MagickThresholdImageChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static MemorySegment MagickThresholdImageChannel$address() {
        return MagickThresholdImageChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickThresholdImageChannel(MagickWand *, const ChannelType, const double)
     * }
     */
    public static int MagickThresholdImageChannel(MemorySegment x0, int x1, double x2) {
        var mh$ = MagickThresholdImageChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickThresholdImageChannel", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTransparentImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_SHORT,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickTransparentImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickTransparentImage(MagickWand *, const PixelWand *, const Quantum, const double)
     * }
     */
    public static FunctionDescriptor MagickTransparentImage$descriptor() {
        return MagickTransparentImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickTransparentImage(MagickWand *, const PixelWand *, const Quantum, const double)
     * }
     */
    public static MethodHandle MagickTransparentImage$handle() {
        return MagickTransparentImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickTransparentImage(MagickWand *, const PixelWand *, const Quantum, const double)
     * }
     */
    public static MemorySegment MagickTransparentImage$address() {
        return MagickTransparentImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickTransparentImage(MagickWand *, const PixelWand *, const Quantum, const double)
     * }
     */
    public static int MagickTransparentImage(MemorySegment x0, MemorySegment x1, short x2, double x3) {
        var mh$ = MagickTransparentImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTransparentImage", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickTrimImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickTrimImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static FunctionDescriptor MagickTrimImage$descriptor() {
        return MagickTrimImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static MethodHandle MagickTrimImage$handle() {
        return MagickTrimImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static MemorySegment MagickTrimImage$address() {
        return MagickTrimImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickTrimImage(MagickWand *, const double)
     * }
     */
    public static int MagickTrimImage(MemorySegment x0, double x1) {
        var mh$ = MagickTrimImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickTrimImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickUnsharpMaskImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickUnsharpMaskImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickUnsharpMaskImage$descriptor() {
        return MagickUnsharpMaskImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MethodHandle MagickUnsharpMaskImage$handle() {
        return MagickUnsharpMaskImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static MemorySegment MagickUnsharpMaskImage$address() {
        return MagickUnsharpMaskImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickUnsharpMaskImage(MagickWand *, const double, const double, const double, const double)
     * }
     */
    public static int MagickUnsharpMaskImage(MemorySegment x0, double x1, double x2, double x3, double x4) {
        var mh$ = MagickUnsharpMaskImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickUnsharpMaskImage", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWaveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_DOUBLE,
            magick_wand_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickWaveImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWaveImage(MagickWand *, const double, const double)
     * }
     */
    public static FunctionDescriptor MagickWaveImage$descriptor() {
        return MagickWaveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWaveImage(MagickWand *, const double, const double)
     * }
     */
    public static MethodHandle MagickWaveImage$handle() {
        return MagickWaveImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWaveImage(MagickWand *, const double, const double)
     * }
     */
    public static MemorySegment MagickWaveImage$address() {
        return MagickWaveImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWaveImage(MagickWand *, const double, const double)
     * }
     */
    public static int MagickWaveImage(MemorySegment x0, double x1, double x2) {
        var mh$ = MagickWaveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWaveImage", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWhiteThresholdImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickWhiteThresholdImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static FunctionDescriptor MagickWhiteThresholdImage$descriptor() {
        return MagickWhiteThresholdImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MethodHandle MagickWhiteThresholdImage$handle() {
        return MagickWhiteThresholdImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static MemorySegment MagickWhiteThresholdImage$address() {
        return MagickWhiteThresholdImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWhiteThresholdImage(MagickWand *, const PixelWand *)
     * }
     */
    public static int MagickWhiteThresholdImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWhiteThresholdImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWhiteThresholdImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickWriteImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static FunctionDescriptor MagickWriteImage$descriptor() {
        return MagickWriteImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static MethodHandle MagickWriteImage$handle() {
        return MagickWriteImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static MemorySegment MagickWriteImage$address() {
        return MagickWriteImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImage(MagickWand *, const char *)
     * }
     */
    public static int MagickWriteImage(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWriteImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImage", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImageFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickWriteImageFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static FunctionDescriptor MagickWriteImageFile$descriptor() {
        return MagickWriteImageFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static MethodHandle MagickWriteImageFile$handle() {
        return MagickWriteImageFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static MemorySegment MagickWriteImageFile$address() {
        return MagickWriteImageFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImageFile(MagickWand *, FILE *)
     * }
     */
    public static int MagickWriteImageFile(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWriteImageFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImageFile", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImagesFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickWriteImagesFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImagesFile(MagickWand *, FILE *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickWriteImagesFile$descriptor() {
        return MagickWriteImagesFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImagesFile(MagickWand *, FILE *, const unsigned int)
     * }
     */
    public static MethodHandle MagickWriteImagesFile$handle() {
        return MagickWriteImagesFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImagesFile(MagickWand *, FILE *, const unsigned int)
     * }
     */
    public static MemorySegment MagickWriteImagesFile$address() {
        return MagickWriteImagesFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImagesFile(MagickWand *, FILE *, const unsigned int)
     * }
     */
    public static int MagickWriteImagesFile(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickWriteImagesFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImagesFile", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickWriteImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImages(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static FunctionDescriptor MagickWriteImages$descriptor() {
        return MagickWriteImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImages(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static MethodHandle MagickWriteImages$handle() {
        return MagickWriteImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImages(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static MemorySegment MagickWriteImages$address() {
        return MagickWriteImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned int MagickWriteImages(MagickWand *, const char *, const unsigned int)
     * }
     */
    public static int MagickWriteImages(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MagickWriteImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImages", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageColors(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageColors$descriptor() {
        return MagickGetImageColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageColors(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageColors$handle() {
        return MagickGetImageColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageColors(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageColors$address() {
        return MagickGetImageColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageColors(MagickWand *)
     * }
     */
    public static long MagickGetImageColors(MemorySegment x0) {
        var mh$ = MagickGetImageColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageColors", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDelay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageDelay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDelay(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageDelay$descriptor() {
        return MagickGetImageDelay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDelay(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageDelay$handle() {
        return MagickGetImageDelay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDelay(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageDelay$address() {
        return MagickGetImageDelay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDelay(MagickWand *)
     * }
     */
    public static long MagickGetImageDelay(MemorySegment x0) {
        var mh$ = MagickGetImageDelay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDelay", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageChannelDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageChannelDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageChannelDepth(MagickWand *, const ChannelType)
     * }
     */
    public static FunctionDescriptor MagickGetImageChannelDepth$descriptor() {
        return MagickGetImageChannelDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageChannelDepth(MagickWand *, const ChannelType)
     * }
     */
    public static MethodHandle MagickGetImageChannelDepth$handle() {
        return MagickGetImageChannelDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageChannelDepth(MagickWand *, const ChannelType)
     * }
     */
    public static MemorySegment MagickGetImageChannelDepth$address() {
        return MagickGetImageChannelDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageChannelDepth(MagickWand *, const ChannelType)
     * }
     */
    public static long MagickGetImageChannelDepth(MemorySegment x0, int x1) {
        var mh$ = MagickGetImageChannelDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageChannelDepth", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDepth(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageDepth$descriptor() {
        return MagickGetImageDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDepth(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageDepth$handle() {
        return MagickGetImageDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDepth(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageDepth$address() {
        return MagickGetImageDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageDepth(MagickWand *)
     * }
     */
    public static long MagickGetImageDepth(MemorySegment x0) {
        var mh$ = MagickGetImageDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageDepth", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageHeight(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageHeight$descriptor() {
        return MagickGetImageHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageHeight(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageHeight$handle() {
        return MagickGetImageHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageHeight(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageHeight$address() {
        return MagickGetImageHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageHeight(MagickWand *)
     * }
     */
    public static long MagickGetImageHeight(MemorySegment x0) {
        var mh$ = MagickGetImageHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageHeight", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageIterations(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageIterations$descriptor() {
        return MagickGetImageIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageIterations(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageIterations$handle() {
        return MagickGetImageIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageIterations(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageIterations$address() {
        return MagickGetImageIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageIterations(MagickWand *)
     * }
     */
    public static long MagickGetImageIterations(MemorySegment x0) {
        var mh$ = MagickGetImageIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageIterations", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageScene {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageScene");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageScene(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageScene$descriptor() {
        return MagickGetImageScene.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageScene(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageScene$handle() {
        return MagickGetImageScene.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageScene(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageScene$address() {
        return MagickGetImageScene.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageScene(MagickWand *)
     * }
     */
    public static long MagickGetImageScene(MemorySegment x0) {
        var mh$ = MagickGetImageScene.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageScene", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageWidth(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageWidth$descriptor() {
        return MagickGetImageWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageWidth(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageWidth$handle() {
        return MagickGetImageWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageWidth(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageWidth$address() {
        return MagickGetImageWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetImageWidth(MagickWand *)
     * }
     */
    public static long MagickGetImageWidth(MemorySegment x0) {
        var mh$ = MagickGetImageWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageWidth", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetNumberImages {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetNumberImages");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetNumberImages(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetNumberImages$descriptor() {
        return MagickGetNumberImages.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetNumberImages(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetNumberImages$handle() {
        return MagickGetNumberImages.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetNumberImages(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetNumberImages$address() {
        return MagickGetNumberImages.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetNumberImages(MagickWand *)
     * }
     */
    public static long MagickGetNumberImages(MemorySegment x0) {
        var mh$ = MagickGetNumberImages.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetNumberImages", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetResourceLimit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_LONG,
            magick_wand_h.C_INT
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetResourceLimit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static FunctionDescriptor MagickGetResourceLimit$descriptor() {
        return MagickGetResourceLimit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static MethodHandle MagickGetResourceLimit$handle() {
        return MagickGetResourceLimit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static MemorySegment MagickGetResourceLimit$address() {
        return MagickGetResourceLimit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long MagickGetResourceLimit(const ResourceType)
     * }
     */
    public static long MagickGetResourceLimit(int x0) {
        var mh$ = MagickGetResourceLimit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetResourceLimit", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageVirtualPixelMethod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_INT,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageVirtualPixelMethod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickGetImageVirtualPixelMethod$descriptor() {
        return MagickGetImageVirtualPixelMethod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static MethodHandle MagickGetImageVirtualPixelMethod$handle() {
        return MagickGetImageVirtualPixelMethod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static MemorySegment MagickGetImageVirtualPixelMethod$address() {
        return MagickGetImageVirtualPixelMethod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VirtualPixelMethod MagickGetImageVirtualPixelMethod(MagickWand *)
     * }
     */
    public static int MagickGetImageVirtualPixelMethod(MemorySegment x0) {
        var mh$ = MagickGetImageVirtualPixelMethod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageVirtualPixelMethod", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickGetImageProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickGetImageProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickGetImageProfile$descriptor() {
        return MagickGetImageProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MethodHandle MagickGetImageProfile$handle() {
        return MagickGetImageProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageProfile$address() {
        return MagickGetImageProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickGetImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickGetImageProfile(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickGetImageProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickGetImageProfile", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickRemoveImageProfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickRemoveImageProfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static FunctionDescriptor MagickRemoveImageProfile$descriptor() {
        return MagickRemoveImageProfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MethodHandle MagickRemoveImageProfile$handle() {
        return MagickRemoveImageProfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickRemoveImageProfile$address() {
        return MagickRemoveImageProfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickRemoveImageProfile(MagickWand *, const char *, unsigned long *)
     * }
     */
    public static MemorySegment MagickRemoveImageProfile(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = MagickRemoveImageProfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickRemoveImageProfile", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickWriteImageBlob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER,
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickWriteImageBlob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *MagickWriteImageBlob(MagickWand *, size_t *)
     * }
     */
    public static FunctionDescriptor MagickWriteImageBlob$descriptor() {
        return MagickWriteImageBlob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *MagickWriteImageBlob(MagickWand *, size_t *)
     * }
     */
    public static MethodHandle MagickWriteImageBlob$handle() {
        return MagickWriteImageBlob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned char *MagickWriteImageBlob(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickWriteImageBlob$address() {
        return MagickWriteImageBlob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned char *MagickWriteImageBlob(MagickWand *, size_t *)
     * }
     */
    public static MemorySegment MagickWriteImageBlob(MemorySegment x0, MemorySegment x1) {
        var mh$ = MagickWriteImageBlob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickWriteImageBlob", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickClearException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickClearException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickClearException(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickClearException$descriptor() {
        return MagickClearException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickClearException(MagickWand *)
     * }
     */
    public static MethodHandle MagickClearException$handle() {
        return MagickClearException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickClearException(MagickWand *)
     * }
     */
    public static MemorySegment MagickClearException$address() {
        return MagickClearException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickClearException(MagickWand *)
     * }
     */
    public static void MagickClearException(MemorySegment x0) {
        var mh$ = MagickClearException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickClearException", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MagickResetIterator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            magick_wand_h.C_POINTER
        );

        public static final MemorySegment ADDR = magick_wand_h.findOrThrow("MagickResetIterator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static FunctionDescriptor MagickResetIterator$descriptor() {
        return MagickResetIterator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static MethodHandle MagickResetIterator$handle() {
        return MagickResetIterator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static MemorySegment MagickResetIterator$address() {
        return MagickResetIterator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void MagickResetIterator(MagickWand *)
     * }
     */
    public static void MagickResetIterator(MemorySegment x0) {
        var mh$ = MagickResetIterator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MagickResetIterator", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("/tmp");
        }
        return Holder.P_tmpdir;
    }
    private static final int __HAVE_DISTINCT_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return __HAVE_DISTINCT_FLOAT16;
    }
    private static final int __HAVE_DISTINCT_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return __HAVE_DISTINCT_FLOAT128X;
    }
    private static final int __HAVE_FLOAT128_UNLIKE_LDBL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 1
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return __HAVE_FLOAT128_UNLIKE_LDBL;
    }
    private static final int __WCLONE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return __WCLONE;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int __PTHREAD_RWLOCK_ELISION_EXTRA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return __PTHREAD_RWLOCK_ELISION_EXTRA;
    }
    private static final long MagickSignature = 2880220587L;
    /**
     * {@snippet lang=c :
     * #define MagickSignature 2880220587
     * }
     */
    public static long MagickSignature() {
        return MagickSignature;
    }
    private static final int YCbCrColorspace = (int)17L;
    /**
     * {@snippet lang=c :
     * #define YCbCrColorspace 17
     * }
     */
    public static int YCbCrColorspace() {
        return YCbCrColorspace;
    }
    /**
     * {@snippet lang=c :
     * #define MagickLogFilename "log.mgk"
     * }
     */
    public static MemorySegment MagickLogFilename() {
        class Holder {
            static final MemorySegment MagickLogFilename
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("log.mgk");
        }
        return Holder.MagickLogFilename;
    }
    private static final int MaxColormapSize = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define MaxColormapSize 65536
     * }
     */
    public static int MaxColormapSize() {
        return MaxColormapSize;
    }
    private static final int MaxMap = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define MaxMap 65535
     * }
     */
    public static int MaxMap() {
        return MaxMap;
    }
    private static final float MaxMapFloat = 65535.0f;
    /**
     * {@snippet lang=c :
     * #define MaxMapFloat 65535.0
     * }
     */
    public static float MaxMapFloat() {
        return MaxMapFloat;
    }
    private static final double MaxMapDouble = 65535.0d;
    /**
     * {@snippet lang=c :
     * #define MaxMapDouble 65535.0
     * }
     */
    public static double MaxMapDouble() {
        return MaxMapDouble;
    }
    private static final int MaxRGB = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define MaxRGB 65535
     * }
     */
    public static int MaxRGB() {
        return MaxRGB;
    }
    private static final float MaxRGBFloat = 65535.0f;
    /**
     * {@snippet lang=c :
     * #define MaxRGBFloat 65535.0
     * }
     */
    public static float MaxRGBFloat() {
        return MaxRGBFloat;
    }
    private static final double MaxRGBDouble = 65535.0d;
    /**
     * {@snippet lang=c :
     * #define MaxRGBDouble 65535.0
     * }
     */
    public static double MaxRGBDouble() {
        return MaxRGBDouble;
    }
    private static final long OpaqueOpacity = 0L;
    /**
     * {@snippet lang=c :
     * #define OpaqueOpacity 0
     * }
     */
    public static long OpaqueOpacity() {
        return OpaqueOpacity;
    }
    private static final int TransparentOpacity = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define TransparentOpacity 65535
     * }
     */
    public static int TransparentOpacity() {
        return TransparentOpacity;
    }
    private static final int RunlengthEncodedCompression = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RunlengthEncodedCompression 8
     * }
     */
    public static int RunlengthEncodedCompression() {
        return RunlengthEncodedCompression;
    }
    private static final long MinBlobExtent = 32768L;
    /**
     * {@snippet lang=c :
     * #define MinBlobExtent 32768
     * }
     */
    public static long MinBlobExtent() {
        return MinBlobExtent;
    }
    private static final long MAGICK_RANDOM_MAX = 4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAGICK_RANDOM_MAX 4294967295
     * }
     */
    public static long MAGICK_RANDOM_MAX() {
        return MAGICK_RANDOM_MAX;
    }
    private static final int DefaultResizeFilter = (int)13L;
    /**
     * {@snippet lang=c :
     * #define DefaultResizeFilter 13
     * }
     */
    public static int DefaultResizeFilter() {
        return DefaultResizeFilter;
    }
    private static final int DefaultThumbnailFilter = (int)2L;
    /**
     * {@snippet lang=c :
     * #define DefaultThumbnailFilter 2
     * }
     */
    public static int DefaultThumbnailFilter() {
        return DefaultThumbnailFilter;
    }
    /**
     * {@snippet lang=c :
     * #define MagickPackageName "GraphicsMagick"
     * }
     */
    public static MemorySegment MagickPackageName() {
        class Holder {
            static final MemorySegment MagickPackageName
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("GraphicsMagick");
        }
        return Holder.MagickPackageName;
    }
    /**
     * {@snippet lang=c :
     * #define MagickCopyright "Copyright (C) 2002-2024 GraphicsMagick Group.
     * Additional copyrights and licenses apply to this software.
     * See http://www.GraphicsMagick.org/www/Copyright.html for details."
     * }
     */
    public static MemorySegment MagickCopyright() {
        class Holder {
            static final MemorySegment MagickCopyright
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("Copyright (C) 2002-2024 GraphicsMagick Group.\nAdditional copyrights and licenses apply to this software.\nSee http://www.GraphicsMagick.org/www/Copyright.html for details.");
        }
        return Holder.MagickCopyright;
    }
    /**
     * {@snippet lang=c :
     * #define MagickLibVersionText "1.3.45"
     * }
     */
    public static MemorySegment MagickLibVersionText() {
        class Holder {
            static final MemorySegment MagickLibVersionText
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("1.3.45");
        }
        return Holder.MagickLibVersionText;
    }
    private static final int MagickLibVersionNumber = (int)28L;
    /**
     * {@snippet lang=c :
     * #define MagickLibVersionNumber 28
     * }
     */
    public static int MagickLibVersionNumber() {
        return MagickLibVersionNumber;
    }
    /**
     * {@snippet lang=c :
     * #define MagickChangeDate "20240827"
     * }
     */
    public static MemorySegment MagickChangeDate() {
        class Holder {
            static final MemorySegment MagickChangeDate
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("20240827");
        }
        return Holder.MagickChangeDate;
    }
    /**
     * {@snippet lang=c :
     * #define MagickReleaseDate "2024-08-27"
     * }
     */
    public static MemorySegment MagickReleaseDate() {
        class Holder {
            static final MemorySegment MagickReleaseDate
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("2024-08-27");
        }
        return Holder.MagickReleaseDate;
    }
    /**
     * {@snippet lang=c :
     * #define MagickQuantumDepth "Q16"
     * }
     */
    public static MemorySegment MagickQuantumDepth() {
        class Holder {
            static final MemorySegment MagickQuantumDepth
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("Q16");
        }
        return Holder.MagickQuantumDepth;
    }
    /**
     * {@snippet lang=c :
     * #define MagickVersion "GraphicsMagick 1.3.45 2024-08-27 Q16 http://www.GraphicsMagick.org/"
     * }
     */
    public static MemorySegment MagickVersion() {
        class Holder {
            static final MemorySegment MagickVersion
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("GraphicsMagick 1.3.45 2024-08-27 Q16 http://www.GraphicsMagick.org/");
        }
        return Holder.MagickVersion;
    }
    /**
     * {@snippet lang=c :
     * #define MagickWebSite "http://www.GraphicsMagick.org/"
     * }
     */
    public static MemorySegment MagickWebSite() {
        class Holder {
            static final MemorySegment MagickWebSite
                = magick_wand_h.LIBRARY_ARENA.allocateFrom("http://www.GraphicsMagick.org/");
        }
        return Holder.MagickWebSite;
    }
    private static final int ReplaceCompositeOp = (int)13L;
    /**
     * {@snippet lang=c :
     * #define ReplaceCompositeOp 13
     * }
     */
    public static int ReplaceCompositeOp() {
        return ReplaceCompositeOp;
    }
    private static final int IndexChannel = (int)8L;
    /**
     * {@snippet lang=c :
     * #define IndexChannel 8
     * }
     */
    public static int IndexChannel() {
        return IndexChannel;
    }
    private static final int AreaResource = (int)0L;
    /**
     * {@snippet lang=c :
     * #define AreaResource 0
     * }
     */
    public static int AreaResource() {
        return AreaResource;
    }
}

