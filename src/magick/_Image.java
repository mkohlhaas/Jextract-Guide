// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _Image {
 *     ClassType storage_class;
 *     ColorspaceType colorspace;
 *     CompressionType compression;
 *     unsigned int dither;
 *     unsigned int matte;
 *     unsigned long columns;
 *     unsigned long rows;
 *     unsigned int colors;
 *     unsigned int depth;
 *     PixelPacket *colormap;
 *     PixelPacket background_color;
 *     PixelPacket border_color;
 *     PixelPacket matte_color;
 *     double gamma;
 *     ChromaticityInfo chromaticity;
 *     OrientationType orientation;
 *     RenderingIntent rendering_intent;
 *     ResolutionType units;
 *     char *montage;
 *     char *directory;
 *     char *geometry;
 *     long offset;
 *     double x_resolution;
 *     double y_resolution;
 *     RectangleInfo page;
 *     RectangleInfo tile_info;
 *     double blur;
 *     double fuzz;
 *     FilterTypes filter;
 *     InterlaceType interlace;
 *     EndianType endian;
 *     GravityType gravity;
 *     CompositeOperator compose;
 *     DisposeType dispose;
 *     unsigned long scene;
 *     unsigned long delay;
 *     unsigned long iterations;
 *     unsigned long total_colors;
 *     long start_loop;
 *     ErrorInfo error;
 *     TimerInfo timer;
 *     void *client_data;
 *     char filename[2053];
 *     char magick_filename[2053];
 *     char magick[2053];
 *     unsigned long magick_columns;
 *     unsigned long magick_rows;
 *     ExceptionInfo exception;
 *     struct _Image *previous;
 *     struct _Image *next;
 *     void *profiles;
 *     unsigned int is_monochrome;
 *     unsigned int is_grayscale;
 *     unsigned int taint;
 *     struct _ImageExtra *extra;
 *     unsigned int ping;
 *     _CacheInfoPtr_ cache;
 *     _ThreadViewSetPtr_ default_views;
 *     _ImageAttributePtr_ attributes;
 *     _Ascii85InfoPtr_ ascii85;
 *     _BlobInfoPtr_ blob;
 *     long reference_count;
 *     _SemaphoreInfoPtr_ semaphore;
 *     unsigned int logging;
 *     struct _Image *list;
 *     unsigned long signature;
 * }
 * }
 */
public class _Image {

    _Image() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_INT.withName("storage_class"),
        magick_wand_h.C_INT.withName("colorspace"),
        magick_wand_h.C_INT.withName("compression"),
        magick_wand_h.C_INT.withName("dither"),
        magick_wand_h.C_INT.withName("matte"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_LONG.withName("columns"),
        magick_wand_h.C_LONG.withName("rows"),
        magick_wand_h.C_INT.withName("colors"),
        magick_wand_h.C_INT.withName("depth"),
        magick_wand_h.C_POINTER.withName("colormap"),
        _PixelPacket.layout().withName("background_color"),
        _PixelPacket.layout().withName("border_color"),
        _PixelPacket.layout().withName("matte_color"),
        magick_wand_h.C_DOUBLE.withName("gamma"),
        _ChromaticityInfo.layout().withName("chromaticity"),
        magick_wand_h.C_INT.withName("orientation"),
        magick_wand_h.C_INT.withName("rendering_intent"),
        magick_wand_h.C_INT.withName("units"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_POINTER.withName("montage"),
        magick_wand_h.C_POINTER.withName("directory"),
        magick_wand_h.C_POINTER.withName("geometry"),
        magick_wand_h.C_LONG.withName("offset"),
        magick_wand_h.C_DOUBLE.withName("x_resolution"),
        magick_wand_h.C_DOUBLE.withName("y_resolution"),
        _RectangleInfo.layout().withName("page"),
        _RectangleInfo.layout().withName("tile_info"),
        magick_wand_h.C_DOUBLE.withName("blur"),
        magick_wand_h.C_DOUBLE.withName("fuzz"),
        magick_wand_h.C_INT.withName("filter"),
        magick_wand_h.C_INT.withName("interlace"),
        magick_wand_h.C_INT.withName("endian"),
        magick_wand_h.C_INT.withName("gravity"),
        magick_wand_h.C_INT.withName("compose"),
        magick_wand_h.C_INT.withName("dispose"),
        magick_wand_h.C_LONG.withName("scene"),
        magick_wand_h.C_LONG.withName("delay"),
        magick_wand_h.C_LONG.withName("iterations"),
        magick_wand_h.C_LONG.withName("total_colors"),
        magick_wand_h.C_LONG.withName("start_loop"),
        _ErrorInfo.layout().withName("error"),
        _TimerInfo.layout().withName("timer"),
        magick_wand_h.C_POINTER.withName("client_data"),
        MemoryLayout.sequenceLayout(2053, magick_wand_h.C_CHAR).withName("filename"),
        MemoryLayout.sequenceLayout(2053, magick_wand_h.C_CHAR).withName("magick_filename"),
        MemoryLayout.sequenceLayout(2053, magick_wand_h.C_CHAR).withName("magick"),
        MemoryLayout.paddingLayout(1),
        magick_wand_h.C_LONG.withName("magick_columns"),
        magick_wand_h.C_LONG.withName("magick_rows"),
        _ExceptionInfo.layout().withName("exception"),
        magick_wand_h.C_POINTER.withName("previous"),
        magick_wand_h.C_POINTER.withName("next"),
        magick_wand_h.C_POINTER.withName("profiles"),
        magick_wand_h.C_INT.withName("is_monochrome"),
        magick_wand_h.C_INT.withName("is_grayscale"),
        magick_wand_h.C_INT.withName("taint"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_POINTER.withName("extra"),
        magick_wand_h.C_INT.withName("ping"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_POINTER.withName("cache"),
        magick_wand_h.C_POINTER.withName("default_views"),
        magick_wand_h.C_POINTER.withName("attributes"),
        magick_wand_h.C_POINTER.withName("ascii85"),
        magick_wand_h.C_POINTER.withName("blob"),
        magick_wand_h.C_LONG.withName("reference_count"),
        magick_wand_h.C_POINTER.withName("semaphore"),
        magick_wand_h.C_INT.withName("logging"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_POINTER.withName("list"),
        magick_wand_h.C_LONG.withName("signature")
    ).withName("_Image");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt storage_class$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storage_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ClassType storage_class
     * }
     */
    public static final OfInt storage_class$layout() {
        return storage_class$LAYOUT;
    }

    private static final long storage_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ClassType storage_class
     * }
     */
    public static final long storage_class$offset() {
        return storage_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ClassType storage_class
     * }
     */
    public static int storage_class(MemorySegment struct) {
        return struct.get(storage_class$LAYOUT, storage_class$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ClassType storage_class
     * }
     */
    public static void storage_class(MemorySegment struct, int fieldValue) {
        struct.set(storage_class$LAYOUT, storage_class$OFFSET, fieldValue);
    }

    private static final OfInt colorspace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorspace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final OfInt colorspace$layout() {
        return colorspace$LAYOUT;
    }

    private static final long colorspace$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final long colorspace$offset() {
        return colorspace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static int colorspace(MemorySegment struct) {
        return struct.get(colorspace$LAYOUT, colorspace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static void colorspace(MemorySegment struct, int fieldValue) {
        struct.set(colorspace$LAYOUT, colorspace$OFFSET, fieldValue);
    }

    private static final OfInt compression$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compression"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static final OfInt compression$layout() {
        return compression$LAYOUT;
    }

    private static final long compression$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static final long compression$offset() {
        return compression$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static int compression(MemorySegment struct) {
        return struct.get(compression$LAYOUT, compression$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static void compression(MemorySegment struct, int fieldValue) {
        struct.set(compression$LAYOUT, compression$OFFSET, fieldValue);
    }

    private static final OfInt dither$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dither"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static final OfInt dither$layout() {
        return dither$LAYOUT;
    }

    private static final long dither$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static final long dither$offset() {
        return dither$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static int dither(MemorySegment struct) {
        return struct.get(dither$LAYOUT, dither$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static void dither(MemorySegment struct, int fieldValue) {
        struct.set(dither$LAYOUT, dither$OFFSET, fieldValue);
    }

    private static final OfInt matte$LAYOUT = (OfInt)$LAYOUT.select(groupElement("matte"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int matte
     * }
     */
    public static final OfInt matte$layout() {
        return matte$LAYOUT;
    }

    private static final long matte$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int matte
     * }
     */
    public static final long matte$offset() {
        return matte$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int matte
     * }
     */
    public static int matte(MemorySegment struct) {
        return struct.get(matte$LAYOUT, matte$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int matte
     * }
     */
    public static void matte(MemorySegment struct, int fieldValue) {
        struct.set(matte$LAYOUT, matte$OFFSET, fieldValue);
    }

    private static final OfLong columns$LAYOUT = (OfLong)$LAYOUT.select(groupElement("columns"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long columns
     * }
     */
    public static final OfLong columns$layout() {
        return columns$LAYOUT;
    }

    private static final long columns$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long columns
     * }
     */
    public static final long columns$offset() {
        return columns$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long columns
     * }
     */
    public static long columns(MemorySegment struct) {
        return struct.get(columns$LAYOUT, columns$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long columns
     * }
     */
    public static void columns(MemorySegment struct, long fieldValue) {
        struct.set(columns$LAYOUT, columns$OFFSET, fieldValue);
    }

    private static final OfLong rows$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long rows
     * }
     */
    public static final OfLong rows$layout() {
        return rows$LAYOUT;
    }

    private static final long rows$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long rows
     * }
     */
    public static final long rows$offset() {
        return rows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long rows
     * }
     */
    public static long rows(MemorySegment struct) {
        return struct.get(rows$LAYOUT, rows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long rows
     * }
     */
    public static void rows(MemorySegment struct, long fieldValue) {
        struct.set(rows$LAYOUT, rows$OFFSET, fieldValue);
    }

    private static final OfInt colors$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int colors
     * }
     */
    public static final OfInt colors$layout() {
        return colors$LAYOUT;
    }

    private static final long colors$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int colors
     * }
     */
    public static final long colors$offset() {
        return colors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int colors
     * }
     */
    public static int colors(MemorySegment struct) {
        return struct.get(colors$LAYOUT, colors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int colors
     * }
     */
    public static void colors(MemorySegment struct, int fieldValue) {
        struct.set(colors$LAYOUT, colors$OFFSET, fieldValue);
    }

    private static final OfInt depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int depth
     * }
     */
    public static final OfInt depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int depth
     * }
     */
    public static int depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int depth
     * }
     */
    public static void depth(MemorySegment struct, int fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    private static final AddressLayout colormap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("colormap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelPacket *colormap
     * }
     */
    public static final AddressLayout colormap$layout() {
        return colormap$LAYOUT;
    }

    private static final long colormap$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelPacket *colormap
     * }
     */
    public static final long colormap$offset() {
        return colormap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelPacket *colormap
     * }
     */
    public static MemorySegment colormap(MemorySegment struct) {
        return struct.get(colormap$LAYOUT, colormap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelPacket *colormap
     * }
     */
    public static void colormap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(colormap$LAYOUT, colormap$OFFSET, fieldValue);
    }

    private static final GroupLayout background_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("background_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelPacket background_color
     * }
     */
    public static final GroupLayout background_color$layout() {
        return background_color$LAYOUT;
    }

    private static final long background_color$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelPacket background_color
     * }
     */
    public static final long background_color$offset() {
        return background_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelPacket background_color
     * }
     */
    public static MemorySegment background_color(MemorySegment struct) {
        return struct.asSlice(background_color$OFFSET, background_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelPacket background_color
     * }
     */
    public static void background_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, background_color$OFFSET, background_color$LAYOUT.byteSize());
    }

    private static final GroupLayout border_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("border_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelPacket border_color
     * }
     */
    public static final GroupLayout border_color$layout() {
        return border_color$LAYOUT;
    }

    private static final long border_color$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelPacket border_color
     * }
     */
    public static final long border_color$offset() {
        return border_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelPacket border_color
     * }
     */
    public static MemorySegment border_color(MemorySegment struct) {
        return struct.asSlice(border_color$OFFSET, border_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelPacket border_color
     * }
     */
    public static void border_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, border_color$OFFSET, border_color$LAYOUT.byteSize());
    }

    private static final GroupLayout matte_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("matte_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelPacket matte_color
     * }
     */
    public static final GroupLayout matte_color$layout() {
        return matte_color$LAYOUT;
    }

    private static final long matte_color$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelPacket matte_color
     * }
     */
    public static final long matte_color$offset() {
        return matte_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelPacket matte_color
     * }
     */
    public static MemorySegment matte_color(MemorySegment struct) {
        return struct.asSlice(matte_color$OFFSET, matte_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelPacket matte_color
     * }
     */
    public static void matte_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, matte_color$OFFSET, matte_color$LAYOUT.byteSize());
    }

    private static final OfDouble gamma$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("gamma"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double gamma
     * }
     */
    public static final OfDouble gamma$layout() {
        return gamma$LAYOUT;
    }

    private static final long gamma$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double gamma
     * }
     */
    public static final long gamma$offset() {
        return gamma$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double gamma
     * }
     */
    public static double gamma(MemorySegment struct) {
        return struct.get(gamma$LAYOUT, gamma$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double gamma
     * }
     */
    public static void gamma(MemorySegment struct, double fieldValue) {
        struct.set(gamma$LAYOUT, gamma$OFFSET, fieldValue);
    }

    private static final GroupLayout chromaticity$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("chromaticity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ChromaticityInfo chromaticity
     * }
     */
    public static final GroupLayout chromaticity$layout() {
        return chromaticity$LAYOUT;
    }

    private static final long chromaticity$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ChromaticityInfo chromaticity
     * }
     */
    public static final long chromaticity$offset() {
        return chromaticity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ChromaticityInfo chromaticity
     * }
     */
    public static MemorySegment chromaticity(MemorySegment struct) {
        return struct.asSlice(chromaticity$OFFSET, chromaticity$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ChromaticityInfo chromaticity
     * }
     */
    public static void chromaticity(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, chromaticity$OFFSET, chromaticity$LAYOUT.byteSize());
    }

    private static final OfInt orientation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("orientation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrientationType orientation
     * }
     */
    public static final OfInt orientation$layout() {
        return orientation$LAYOUT;
    }

    private static final long orientation$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrientationType orientation
     * }
     */
    public static final long orientation$offset() {
        return orientation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrientationType orientation
     * }
     */
    public static int orientation(MemorySegment struct) {
        return struct.get(orientation$LAYOUT, orientation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrientationType orientation
     * }
     */
    public static void orientation(MemorySegment struct, int fieldValue) {
        struct.set(orientation$LAYOUT, orientation$OFFSET, fieldValue);
    }

    private static final OfInt rendering_intent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rendering_intent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RenderingIntent rendering_intent
     * }
     */
    public static final OfInt rendering_intent$layout() {
        return rendering_intent$LAYOUT;
    }

    private static final long rendering_intent$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RenderingIntent rendering_intent
     * }
     */
    public static final long rendering_intent$offset() {
        return rendering_intent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RenderingIntent rendering_intent
     * }
     */
    public static int rendering_intent(MemorySegment struct) {
        return struct.get(rendering_intent$LAYOUT, rendering_intent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RenderingIntent rendering_intent
     * }
     */
    public static void rendering_intent(MemorySegment struct, int fieldValue) {
        struct.set(rendering_intent$LAYOUT, rendering_intent$OFFSET, fieldValue);
    }

    private static final OfInt units$LAYOUT = (OfInt)$LAYOUT.select(groupElement("units"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static final OfInt units$layout() {
        return units$LAYOUT;
    }

    private static final long units$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static final long units$offset() {
        return units$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static int units(MemorySegment struct) {
        return struct.get(units$LAYOUT, units$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static void units(MemorySegment struct, int fieldValue) {
        struct.set(units$LAYOUT, units$OFFSET, fieldValue);
    }

    private static final AddressLayout montage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("montage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *montage
     * }
     */
    public static final AddressLayout montage$layout() {
        return montage$LAYOUT;
    }

    private static final long montage$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *montage
     * }
     */
    public static final long montage$offset() {
        return montage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *montage
     * }
     */
    public static MemorySegment montage(MemorySegment struct) {
        return struct.get(montage$LAYOUT, montage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *montage
     * }
     */
    public static void montage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(montage$LAYOUT, montage$OFFSET, fieldValue);
    }

    private static final AddressLayout directory$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("directory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *directory
     * }
     */
    public static final AddressLayout directory$layout() {
        return directory$LAYOUT;
    }

    private static final long directory$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *directory
     * }
     */
    public static final long directory$offset() {
        return directory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *directory
     * }
     */
    public static MemorySegment directory(MemorySegment struct) {
        return struct.get(directory$LAYOUT, directory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *directory
     * }
     */
    public static void directory(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(directory$LAYOUT, directory$OFFSET, fieldValue);
    }

    private static final AddressLayout geometry$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("geometry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *geometry
     * }
     */
    public static final AddressLayout geometry$layout() {
        return geometry$LAYOUT;
    }

    private static final long geometry$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *geometry
     * }
     */
    public static final long geometry$offset() {
        return geometry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *geometry
     * }
     */
    public static MemorySegment geometry(MemorySegment struct) {
        return struct.get(geometry$LAYOUT, geometry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *geometry
     * }
     */
    public static void geometry(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(geometry$LAYOUT, geometry$OFFSET, fieldValue);
    }

    private static final OfLong offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long offset
     * }
     */
    public static final OfLong offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long offset
     * }
     */
    public static long offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long offset
     * }
     */
    public static void offset(MemorySegment struct, long fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfDouble x_resolution$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("x_resolution"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double x_resolution
     * }
     */
    public static final OfDouble x_resolution$layout() {
        return x_resolution$LAYOUT;
    }

    private static final long x_resolution$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double x_resolution
     * }
     */
    public static final long x_resolution$offset() {
        return x_resolution$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double x_resolution
     * }
     */
    public static double x_resolution(MemorySegment struct) {
        return struct.get(x_resolution$LAYOUT, x_resolution$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double x_resolution
     * }
     */
    public static void x_resolution(MemorySegment struct, double fieldValue) {
        struct.set(x_resolution$LAYOUT, x_resolution$OFFSET, fieldValue);
    }

    private static final OfDouble y_resolution$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("y_resolution"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double y_resolution
     * }
     */
    public static final OfDouble y_resolution$layout() {
        return y_resolution$LAYOUT;
    }

    private static final long y_resolution$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double y_resolution
     * }
     */
    public static final long y_resolution$offset() {
        return y_resolution$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double y_resolution
     * }
     */
    public static double y_resolution(MemorySegment struct) {
        return struct.get(y_resolution$LAYOUT, y_resolution$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double y_resolution
     * }
     */
    public static void y_resolution(MemorySegment struct, double fieldValue) {
        struct.set(y_resolution$LAYOUT, y_resolution$OFFSET, fieldValue);
    }

    private static final GroupLayout page$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("page"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RectangleInfo page
     * }
     */
    public static final GroupLayout page$layout() {
        return page$LAYOUT;
    }

    private static final long page$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RectangleInfo page
     * }
     */
    public static final long page$offset() {
        return page$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RectangleInfo page
     * }
     */
    public static MemorySegment page(MemorySegment struct) {
        return struct.asSlice(page$OFFSET, page$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RectangleInfo page
     * }
     */
    public static void page(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, page$OFFSET, page$LAYOUT.byteSize());
    }

    private static final GroupLayout tile_info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tile_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RectangleInfo tile_info
     * }
     */
    public static final GroupLayout tile_info$layout() {
        return tile_info$LAYOUT;
    }

    private static final long tile_info$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RectangleInfo tile_info
     * }
     */
    public static final long tile_info$offset() {
        return tile_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RectangleInfo tile_info
     * }
     */
    public static MemorySegment tile_info(MemorySegment struct) {
        return struct.asSlice(tile_info$OFFSET, tile_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RectangleInfo tile_info
     * }
     */
    public static void tile_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tile_info$OFFSET, tile_info$LAYOUT.byteSize());
    }

    private static final OfDouble blur$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("blur"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double blur
     * }
     */
    public static final OfDouble blur$layout() {
        return blur$LAYOUT;
    }

    private static final long blur$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double blur
     * }
     */
    public static final long blur$offset() {
        return blur$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double blur
     * }
     */
    public static double blur(MemorySegment struct) {
        return struct.get(blur$LAYOUT, blur$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double blur
     * }
     */
    public static void blur(MemorySegment struct, double fieldValue) {
        struct.set(blur$LAYOUT, blur$OFFSET, fieldValue);
    }

    private static final OfDouble fuzz$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("fuzz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static final OfDouble fuzz$layout() {
        return fuzz$LAYOUT;
    }

    private static final long fuzz$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static final long fuzz$offset() {
        return fuzz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static double fuzz(MemorySegment struct) {
        return struct.get(fuzz$LAYOUT, fuzz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static void fuzz(MemorySegment struct, double fieldValue) {
        struct.set(fuzz$LAYOUT, fuzz$OFFSET, fieldValue);
    }

    private static final OfInt filter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("filter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FilterTypes filter
     * }
     */
    public static final OfInt filter$layout() {
        return filter$LAYOUT;
    }

    private static final long filter$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FilterTypes filter
     * }
     */
    public static final long filter$offset() {
        return filter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FilterTypes filter
     * }
     */
    public static int filter(MemorySegment struct) {
        return struct.get(filter$LAYOUT, filter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FilterTypes filter
     * }
     */
    public static void filter(MemorySegment struct, int fieldValue) {
        struct.set(filter$LAYOUT, filter$OFFSET, fieldValue);
    }

    private static final OfInt interlace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("interlace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static final OfInt interlace$layout() {
        return interlace$LAYOUT;
    }

    private static final long interlace$OFFSET = 332;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static final long interlace$offset() {
        return interlace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static int interlace(MemorySegment struct) {
        return struct.get(interlace$LAYOUT, interlace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static void interlace(MemorySegment struct, int fieldValue) {
        struct.set(interlace$LAYOUT, interlace$OFFSET, fieldValue);
    }

    private static final OfInt endian$LAYOUT = (OfInt)$LAYOUT.select(groupElement("endian"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static final OfInt endian$layout() {
        return endian$LAYOUT;
    }

    private static final long endian$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static final long endian$offset() {
        return endian$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static int endian(MemorySegment struct) {
        return struct.get(endian$LAYOUT, endian$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static void endian(MemorySegment struct, int fieldValue) {
        struct.set(endian$LAYOUT, endian$OFFSET, fieldValue);
    }

    private static final OfInt gravity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gravity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GravityType gravity
     * }
     */
    public static final OfInt gravity$layout() {
        return gravity$LAYOUT;
    }

    private static final long gravity$OFFSET = 340;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GravityType gravity
     * }
     */
    public static final long gravity$offset() {
        return gravity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GravityType gravity
     * }
     */
    public static int gravity(MemorySegment struct) {
        return struct.get(gravity$LAYOUT, gravity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GravityType gravity
     * }
     */
    public static void gravity(MemorySegment struct, int fieldValue) {
        struct.set(gravity$LAYOUT, gravity$OFFSET, fieldValue);
    }

    private static final OfInt compose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CompositeOperator compose
     * }
     */
    public static final OfInt compose$layout() {
        return compose$LAYOUT;
    }

    private static final long compose$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CompositeOperator compose
     * }
     */
    public static final long compose$offset() {
        return compose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CompositeOperator compose
     * }
     */
    public static int compose(MemorySegment struct) {
        return struct.get(compose$LAYOUT, compose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CompositeOperator compose
     * }
     */
    public static void compose(MemorySegment struct, int fieldValue) {
        struct.set(compose$LAYOUT, compose$OFFSET, fieldValue);
    }

    private static final OfInt dispose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dispose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DisposeType dispose
     * }
     */
    public static final OfInt dispose$layout() {
        return dispose$LAYOUT;
    }

    private static final long dispose$OFFSET = 348;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DisposeType dispose
     * }
     */
    public static final long dispose$offset() {
        return dispose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DisposeType dispose
     * }
     */
    public static int dispose(MemorySegment struct) {
        return struct.get(dispose$LAYOUT, dispose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DisposeType dispose
     * }
     */
    public static void dispose(MemorySegment struct, int fieldValue) {
        struct.set(dispose$LAYOUT, dispose$OFFSET, fieldValue);
    }

    private static final OfLong scene$LAYOUT = (OfLong)$LAYOUT.select(groupElement("scene"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long scene
     * }
     */
    public static final OfLong scene$layout() {
        return scene$LAYOUT;
    }

    private static final long scene$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long scene
     * }
     */
    public static final long scene$offset() {
        return scene$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long scene
     * }
     */
    public static long scene(MemorySegment struct) {
        return struct.get(scene$LAYOUT, scene$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long scene
     * }
     */
    public static void scene(MemorySegment struct, long fieldValue) {
        struct.set(scene$LAYOUT, scene$OFFSET, fieldValue);
    }

    private static final OfLong delay$LAYOUT = (OfLong)$LAYOUT.select(groupElement("delay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long delay
     * }
     */
    public static final OfLong delay$layout() {
        return delay$LAYOUT;
    }

    private static final long delay$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long delay
     * }
     */
    public static final long delay$offset() {
        return delay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long delay
     * }
     */
    public static long delay(MemorySegment struct) {
        return struct.get(delay$LAYOUT, delay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long delay
     * }
     */
    public static void delay(MemorySegment struct, long fieldValue) {
        struct.set(delay$LAYOUT, delay$OFFSET, fieldValue);
    }

    private static final OfLong iterations$LAYOUT = (OfLong)$LAYOUT.select(groupElement("iterations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long iterations
     * }
     */
    public static final OfLong iterations$layout() {
        return iterations$LAYOUT;
    }

    private static final long iterations$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long iterations
     * }
     */
    public static final long iterations$offset() {
        return iterations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long iterations
     * }
     */
    public static long iterations(MemorySegment struct) {
        return struct.get(iterations$LAYOUT, iterations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long iterations
     * }
     */
    public static void iterations(MemorySegment struct, long fieldValue) {
        struct.set(iterations$LAYOUT, iterations$OFFSET, fieldValue);
    }

    private static final OfLong total_colors$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_colors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long total_colors
     * }
     */
    public static final OfLong total_colors$layout() {
        return total_colors$LAYOUT;
    }

    private static final long total_colors$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long total_colors
     * }
     */
    public static final long total_colors$offset() {
        return total_colors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long total_colors
     * }
     */
    public static long total_colors(MemorySegment struct) {
        return struct.get(total_colors$LAYOUT, total_colors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long total_colors
     * }
     */
    public static void total_colors(MemorySegment struct, long fieldValue) {
        struct.set(total_colors$LAYOUT, total_colors$OFFSET, fieldValue);
    }

    private static final OfLong start_loop$LAYOUT = (OfLong)$LAYOUT.select(groupElement("start_loop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long start_loop
     * }
     */
    public static final OfLong start_loop$layout() {
        return start_loop$LAYOUT;
    }

    private static final long start_loop$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long start_loop
     * }
     */
    public static final long start_loop$offset() {
        return start_loop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long start_loop
     * }
     */
    public static long start_loop(MemorySegment struct) {
        return struct.get(start_loop$LAYOUT, start_loop$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long start_loop
     * }
     */
    public static void start_loop(MemorySegment struct, long fieldValue) {
        struct.set(start_loop$LAYOUT, start_loop$OFFSET, fieldValue);
    }

    private static final GroupLayout error$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("error"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ErrorInfo error
     * }
     */
    public static final GroupLayout error$layout() {
        return error$LAYOUT;
    }

    private static final long error$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ErrorInfo error
     * }
     */
    public static final long error$offset() {
        return error$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ErrorInfo error
     * }
     */
    public static MemorySegment error(MemorySegment struct) {
        return struct.asSlice(error$OFFSET, error$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ErrorInfo error
     * }
     */
    public static void error(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, error$OFFSET, error$LAYOUT.byteSize());
    }

    private static final GroupLayout timer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("timer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimerInfo timer
     * }
     */
    public static final GroupLayout timer$layout() {
        return timer$LAYOUT;
    }

    private static final long timer$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimerInfo timer
     * }
     */
    public static final long timer$offset() {
        return timer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimerInfo timer
     * }
     */
    public static MemorySegment timer(MemorySegment struct) {
        return struct.asSlice(timer$OFFSET, timer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimerInfo timer
     * }
     */
    public static void timer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, timer$OFFSET, timer$LAYOUT.byteSize());
    }

    private static final AddressLayout client_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final AddressLayout client_data$layout() {
        return client_data$LAYOUT;
    }

    private static final long client_data$OFFSET = 480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final long client_data$offset() {
        return client_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static MemorySegment client_data(MemorySegment struct) {
        return struct.get(client_data$LAYOUT, client_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static void client_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client_data$LAYOUT, client_data$OFFSET, fieldValue);
    }

    private static final SequenceLayout filename$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static final SequenceLayout filename$layout() {
        return filename$LAYOUT;
    }

    private static final long filename$OFFSET = 488;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static final long filename$offset() {
        return filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static MemorySegment filename(MemorySegment struct) {
        return struct.asSlice(filename$OFFSET, filename$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static void filename(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, filename$OFFSET, filename$LAYOUT.byteSize());
    }

    private static long[] filename$DIMS = { 2053 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static long[] filename$dimensions() {
        return filename$DIMS;
    }
    private static final VarHandle filename$ELEM_HANDLE = filename$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static byte filename(MemorySegment struct, long index0) {
        return (byte)filename$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static void filename(MemorySegment struct, long index0, byte fieldValue) {
        filename$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout magick_filename$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("magick_filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char magick_filename[2053]
     * }
     */
    public static final SequenceLayout magick_filename$layout() {
        return magick_filename$LAYOUT;
    }

    private static final long magick_filename$OFFSET = 2541;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char magick_filename[2053]
     * }
     */
    public static final long magick_filename$offset() {
        return magick_filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char magick_filename[2053]
     * }
     */
    public static MemorySegment magick_filename(MemorySegment struct) {
        return struct.asSlice(magick_filename$OFFSET, magick_filename$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char magick_filename[2053]
     * }
     */
    public static void magick_filename(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, magick_filename$OFFSET, magick_filename$LAYOUT.byteSize());
    }

    private static long[] magick_filename$DIMS = { 2053 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char magick_filename[2053]
     * }
     */
    public static long[] magick_filename$dimensions() {
        return magick_filename$DIMS;
    }
    private static final VarHandle magick_filename$ELEM_HANDLE = magick_filename$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char magick_filename[2053]
     * }
     */
    public static byte magick_filename(MemorySegment struct, long index0) {
        return (byte)magick_filename$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char magick_filename[2053]
     * }
     */
    public static void magick_filename(MemorySegment struct, long index0, byte fieldValue) {
        magick_filename$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout magick$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("magick"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static final SequenceLayout magick$layout() {
        return magick$LAYOUT;
    }

    private static final long magick$OFFSET = 4594;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static final long magick$offset() {
        return magick$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static MemorySegment magick(MemorySegment struct) {
        return struct.asSlice(magick$OFFSET, magick$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static void magick(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, magick$OFFSET, magick$LAYOUT.byteSize());
    }

    private static long[] magick$DIMS = { 2053 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static long[] magick$dimensions() {
        return magick$DIMS;
    }
    private static final VarHandle magick$ELEM_HANDLE = magick$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static byte magick(MemorySegment struct, long index0) {
        return (byte)magick$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static void magick(MemorySegment struct, long index0, byte fieldValue) {
        magick$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong magick_columns$LAYOUT = (OfLong)$LAYOUT.select(groupElement("magick_columns"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long magick_columns
     * }
     */
    public static final OfLong magick_columns$layout() {
        return magick_columns$LAYOUT;
    }

    private static final long magick_columns$OFFSET = 6648;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long magick_columns
     * }
     */
    public static final long magick_columns$offset() {
        return magick_columns$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long magick_columns
     * }
     */
    public static long magick_columns(MemorySegment struct) {
        return struct.get(magick_columns$LAYOUT, magick_columns$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long magick_columns
     * }
     */
    public static void magick_columns(MemorySegment struct, long fieldValue) {
        struct.set(magick_columns$LAYOUT, magick_columns$OFFSET, fieldValue);
    }

    private static final OfLong magick_rows$LAYOUT = (OfLong)$LAYOUT.select(groupElement("magick_rows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long magick_rows
     * }
     */
    public static final OfLong magick_rows$layout() {
        return magick_rows$LAYOUT;
    }

    private static final long magick_rows$OFFSET = 6656;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long magick_rows
     * }
     */
    public static final long magick_rows$offset() {
        return magick_rows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long magick_rows
     * }
     */
    public static long magick_rows(MemorySegment struct) {
        return struct.get(magick_rows$LAYOUT, magick_rows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long magick_rows
     * }
     */
    public static void magick_rows(MemorySegment struct, long fieldValue) {
        struct.set(magick_rows$LAYOUT, magick_rows$OFFSET, fieldValue);
    }

    private static final GroupLayout exception$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("exception"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ExceptionInfo exception
     * }
     */
    public static final GroupLayout exception$layout() {
        return exception$LAYOUT;
    }

    private static final long exception$OFFSET = 6664;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ExceptionInfo exception
     * }
     */
    public static final long exception$offset() {
        return exception$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ExceptionInfo exception
     * }
     */
    public static MemorySegment exception(MemorySegment struct) {
        return struct.asSlice(exception$OFFSET, exception$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ExceptionInfo exception
     * }
     */
    public static void exception(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, exception$OFFSET, exception$LAYOUT.byteSize());
    }

    private static final AddressLayout previous$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("previous"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _Image *previous
     * }
     */
    public static final AddressLayout previous$layout() {
        return previous$LAYOUT;
    }

    private static final long previous$OFFSET = 6728;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _Image *previous
     * }
     */
    public static final long previous$offset() {
        return previous$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _Image *previous
     * }
     */
    public static MemorySegment previous(MemorySegment struct) {
        return struct.get(previous$LAYOUT, previous$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _Image *previous
     * }
     */
    public static void previous(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(previous$LAYOUT, previous$OFFSET, fieldValue);
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _Image *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 6736;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _Image *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _Image *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _Image *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    private static final AddressLayout profiles$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("profiles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *profiles
     * }
     */
    public static final AddressLayout profiles$layout() {
        return profiles$LAYOUT;
    }

    private static final long profiles$OFFSET = 6744;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *profiles
     * }
     */
    public static final long profiles$offset() {
        return profiles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *profiles
     * }
     */
    public static MemorySegment profiles(MemorySegment struct) {
        return struct.get(profiles$LAYOUT, profiles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *profiles
     * }
     */
    public static void profiles(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(profiles$LAYOUT, profiles$OFFSET, fieldValue);
    }

    private static final OfInt is_monochrome$LAYOUT = (OfInt)$LAYOUT.select(groupElement("is_monochrome"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int is_monochrome
     * }
     */
    public static final OfInt is_monochrome$layout() {
        return is_monochrome$LAYOUT;
    }

    private static final long is_monochrome$OFFSET = 6752;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int is_monochrome
     * }
     */
    public static final long is_monochrome$offset() {
        return is_monochrome$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int is_monochrome
     * }
     */
    public static int is_monochrome(MemorySegment struct) {
        return struct.get(is_monochrome$LAYOUT, is_monochrome$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int is_monochrome
     * }
     */
    public static void is_monochrome(MemorySegment struct, int fieldValue) {
        struct.set(is_monochrome$LAYOUT, is_monochrome$OFFSET, fieldValue);
    }

    private static final OfInt is_grayscale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("is_grayscale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int is_grayscale
     * }
     */
    public static final OfInt is_grayscale$layout() {
        return is_grayscale$LAYOUT;
    }

    private static final long is_grayscale$OFFSET = 6756;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int is_grayscale
     * }
     */
    public static final long is_grayscale$offset() {
        return is_grayscale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int is_grayscale
     * }
     */
    public static int is_grayscale(MemorySegment struct) {
        return struct.get(is_grayscale$LAYOUT, is_grayscale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int is_grayscale
     * }
     */
    public static void is_grayscale(MemorySegment struct, int fieldValue) {
        struct.set(is_grayscale$LAYOUT, is_grayscale$OFFSET, fieldValue);
    }

    private static final OfInt taint$LAYOUT = (OfInt)$LAYOUT.select(groupElement("taint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int taint
     * }
     */
    public static final OfInt taint$layout() {
        return taint$LAYOUT;
    }

    private static final long taint$OFFSET = 6760;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int taint
     * }
     */
    public static final long taint$offset() {
        return taint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int taint
     * }
     */
    public static int taint(MemorySegment struct) {
        return struct.get(taint$LAYOUT, taint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int taint
     * }
     */
    public static void taint(MemorySegment struct, int fieldValue) {
        struct.set(taint$LAYOUT, taint$OFFSET, fieldValue);
    }

    private static final AddressLayout extra$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("extra"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _ImageExtra *extra
     * }
     */
    public static final AddressLayout extra$layout() {
        return extra$LAYOUT;
    }

    private static final long extra$OFFSET = 6768;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _ImageExtra *extra
     * }
     */
    public static final long extra$offset() {
        return extra$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _ImageExtra *extra
     * }
     */
    public static MemorySegment extra(MemorySegment struct) {
        return struct.get(extra$LAYOUT, extra$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _ImageExtra *extra
     * }
     */
    public static void extra(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(extra$LAYOUT, extra$OFFSET, fieldValue);
    }

    private static final OfInt ping$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ping"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int ping
     * }
     */
    public static final OfInt ping$layout() {
        return ping$LAYOUT;
    }

    private static final long ping$OFFSET = 6776;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int ping
     * }
     */
    public static final long ping$offset() {
        return ping$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int ping
     * }
     */
    public static int ping(MemorySegment struct) {
        return struct.get(ping$LAYOUT, ping$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int ping
     * }
     */
    public static void ping(MemorySegment struct, int fieldValue) {
        struct.set(ping$LAYOUT, ping$OFFSET, fieldValue);
    }

    private static final AddressLayout cache$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _CacheInfoPtr_ cache
     * }
     */
    public static final AddressLayout cache$layout() {
        return cache$LAYOUT;
    }

    private static final long cache$OFFSET = 6784;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _CacheInfoPtr_ cache
     * }
     */
    public static final long cache$offset() {
        return cache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _CacheInfoPtr_ cache
     * }
     */
    public static MemorySegment cache(MemorySegment struct) {
        return struct.get(cache$LAYOUT, cache$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _CacheInfoPtr_ cache
     * }
     */
    public static void cache(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cache$LAYOUT, cache$OFFSET, fieldValue);
    }

    private static final AddressLayout default_views$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("default_views"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _ThreadViewSetPtr_ default_views
     * }
     */
    public static final AddressLayout default_views$layout() {
        return default_views$LAYOUT;
    }

    private static final long default_views$OFFSET = 6792;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _ThreadViewSetPtr_ default_views
     * }
     */
    public static final long default_views$offset() {
        return default_views$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _ThreadViewSetPtr_ default_views
     * }
     */
    public static MemorySegment default_views(MemorySegment struct) {
        return struct.get(default_views$LAYOUT, default_views$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _ThreadViewSetPtr_ default_views
     * }
     */
    public static void default_views(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(default_views$LAYOUT, default_views$OFFSET, fieldValue);
    }

    private static final AddressLayout attributes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("attributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _ImageAttributePtr_ attributes
     * }
     */
    public static final AddressLayout attributes$layout() {
        return attributes$LAYOUT;
    }

    private static final long attributes$OFFSET = 6800;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _ImageAttributePtr_ attributes
     * }
     */
    public static final long attributes$offset() {
        return attributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _ImageAttributePtr_ attributes
     * }
     */
    public static MemorySegment attributes(MemorySegment struct) {
        return struct.get(attributes$LAYOUT, attributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _ImageAttributePtr_ attributes
     * }
     */
    public static void attributes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(attributes$LAYOUT, attributes$OFFSET, fieldValue);
    }

    private static final AddressLayout ascii85$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ascii85"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _Ascii85InfoPtr_ ascii85
     * }
     */
    public static final AddressLayout ascii85$layout() {
        return ascii85$LAYOUT;
    }

    private static final long ascii85$OFFSET = 6808;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _Ascii85InfoPtr_ ascii85
     * }
     */
    public static final long ascii85$offset() {
        return ascii85$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Ascii85InfoPtr_ ascii85
     * }
     */
    public static MemorySegment ascii85(MemorySegment struct) {
        return struct.get(ascii85$LAYOUT, ascii85$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Ascii85InfoPtr_ ascii85
     * }
     */
    public static void ascii85(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ascii85$LAYOUT, ascii85$OFFSET, fieldValue);
    }

    private static final AddressLayout blob$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("blob"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _BlobInfoPtr_ blob
     * }
     */
    public static final AddressLayout blob$layout() {
        return blob$LAYOUT;
    }

    private static final long blob$OFFSET = 6816;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _BlobInfoPtr_ blob
     * }
     */
    public static final long blob$offset() {
        return blob$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _BlobInfoPtr_ blob
     * }
     */
    public static MemorySegment blob(MemorySegment struct) {
        return struct.get(blob$LAYOUT, blob$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _BlobInfoPtr_ blob
     * }
     */
    public static void blob(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(blob$LAYOUT, blob$OFFSET, fieldValue);
    }

    private static final OfLong reference_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("reference_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long reference_count
     * }
     */
    public static final OfLong reference_count$layout() {
        return reference_count$LAYOUT;
    }

    private static final long reference_count$OFFSET = 6824;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long reference_count
     * }
     */
    public static final long reference_count$offset() {
        return reference_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long reference_count
     * }
     */
    public static long reference_count(MemorySegment struct) {
        return struct.get(reference_count$LAYOUT, reference_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long reference_count
     * }
     */
    public static void reference_count(MemorySegment struct, long fieldValue) {
        struct.set(reference_count$LAYOUT, reference_count$OFFSET, fieldValue);
    }

    private static final AddressLayout semaphore$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("semaphore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _SemaphoreInfoPtr_ semaphore
     * }
     */
    public static final AddressLayout semaphore$layout() {
        return semaphore$LAYOUT;
    }

    private static final long semaphore$OFFSET = 6832;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _SemaphoreInfoPtr_ semaphore
     * }
     */
    public static final long semaphore$offset() {
        return semaphore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _SemaphoreInfoPtr_ semaphore
     * }
     */
    public static MemorySegment semaphore(MemorySegment struct) {
        return struct.get(semaphore$LAYOUT, semaphore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _SemaphoreInfoPtr_ semaphore
     * }
     */
    public static void semaphore(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(semaphore$LAYOUT, semaphore$OFFSET, fieldValue);
    }

    private static final OfInt logging$LAYOUT = (OfInt)$LAYOUT.select(groupElement("logging"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int logging
     * }
     */
    public static final OfInt logging$layout() {
        return logging$LAYOUT;
    }

    private static final long logging$OFFSET = 6840;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int logging
     * }
     */
    public static final long logging$offset() {
        return logging$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int logging
     * }
     */
    public static int logging(MemorySegment struct) {
        return struct.get(logging$LAYOUT, logging$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int logging
     * }
     */
    public static void logging(MemorySegment struct, int fieldValue) {
        struct.set(logging$LAYOUT, logging$OFFSET, fieldValue);
    }

    private static final AddressLayout list$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _Image *list
     * }
     */
    public static final AddressLayout list$layout() {
        return list$LAYOUT;
    }

    private static final long list$OFFSET = 6848;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _Image *list
     * }
     */
    public static final long list$offset() {
        return list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _Image *list
     * }
     */
    public static MemorySegment list(MemorySegment struct) {
        return struct.get(list$LAYOUT, list$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _Image *list
     * }
     */
    public static void list(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(list$LAYOUT, list$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 6856;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

