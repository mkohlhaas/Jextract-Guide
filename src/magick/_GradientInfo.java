// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GradientInfo {
 *     GradientType type;
 *     PixelPacket color;
 *     SegmentInfo stop;
 *     unsigned long length;
 *     SpreadMethod spread;
 *     unsigned long signature;
 *     struct _GradientInfo *previous;
 *     struct _GradientInfo *next;
 * }
 * }
 */
public class _GradientInfo {

    _GradientInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_INT.withName("type"),
        _PixelPacket.layout().withName("color"),
        MemoryLayout.paddingLayout(4),
        _SegmentInfo.layout().withName("stop"),
        magick_wand_h.C_LONG.withName("length"),
        magick_wand_h.C_INT.withName("spread"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_LONG.withName("signature"),
        magick_wand_h.C_POINTER.withName("previous"),
        magick_wand_h.C_POINTER.withName("next")
    ).withName("_GradientInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GradientType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GradientType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GradientType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GradientType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final GroupLayout color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelPacket color
     * }
     */
    public static final GroupLayout color$layout() {
        return color$LAYOUT;
    }

    private static final long color$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelPacket color
     * }
     */
    public static final long color$offset() {
        return color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelPacket color
     * }
     */
    public static MemorySegment color(MemorySegment struct) {
        return struct.asSlice(color$OFFSET, color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelPacket color
     * }
     */
    public static void color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, color$OFFSET, color$LAYOUT.byteSize());
    }

    private static final GroupLayout stop$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("stop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SegmentInfo stop
     * }
     */
    public static final GroupLayout stop$layout() {
        return stop$LAYOUT;
    }

    private static final long stop$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SegmentInfo stop
     * }
     */
    public static final long stop$offset() {
        return stop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SegmentInfo stop
     * }
     */
    public static MemorySegment stop(MemorySegment struct) {
        return struct.asSlice(stop$OFFSET, stop$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SegmentInfo stop
     * }
     */
    public static void stop(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stop$OFFSET, stop$LAYOUT.byteSize());
    }

    private static final OfLong length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long length
     * }
     */
    public static final OfLong length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long length
     * }
     */
    public static long length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long length
     * }
     */
    public static void length(MemorySegment struct, long fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final OfInt spread$LAYOUT = (OfInt)$LAYOUT.select(groupElement("spread"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SpreadMethod spread
     * }
     */
    public static final OfInt spread$layout() {
        return spread$LAYOUT;
    }

    private static final long spread$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SpreadMethod spread
     * }
     */
    public static final long spread$offset() {
        return spread$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SpreadMethod spread
     * }
     */
    public static int spread(MemorySegment struct) {
        return struct.get(spread$LAYOUT, spread$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SpreadMethod spread
     * }
     */
    public static void spread(MemorySegment struct, int fieldValue) {
        struct.set(spread$LAYOUT, spread$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    private static final AddressLayout previous$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("previous"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _GradientInfo *previous
     * }
     */
    public static final AddressLayout previous$layout() {
        return previous$LAYOUT;
    }

    private static final long previous$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _GradientInfo *previous
     * }
     */
    public static final long previous$offset() {
        return previous$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _GradientInfo *previous
     * }
     */
    public static MemorySegment previous(MemorySegment struct) {
        return struct.get(previous$LAYOUT, previous$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _GradientInfo *previous
     * }
     */
    public static void previous(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(previous$LAYOUT, previous$OFFSET, fieldValue);
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _GradientInfo *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _GradientInfo *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _GradientInfo *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _GradientInfo *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

