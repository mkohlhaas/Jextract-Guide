// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _DelegateInfo {
 *     char *path;
 *     char *decode;
 *     char *encode;
 *     char *commands;
 *     int mode;
 *     unsigned int stealth;
 *     unsigned long signature;
 *     struct _DelegateInfo *previous;
 *     struct _DelegateInfo *next;
 * }
 * }
 */
public class _DelegateInfo {

    _DelegateInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_POINTER.withName("path"),
        magick_wand_h.C_POINTER.withName("decode"),
        magick_wand_h.C_POINTER.withName("encode"),
        magick_wand_h.C_POINTER.withName("commands"),
        magick_wand_h.C_INT.withName("mode"),
        magick_wand_h.C_INT.withName("stealth"),
        magick_wand_h.C_LONG.withName("signature"),
        magick_wand_h.C_POINTER.withName("previous"),
        magick_wand_h.C_POINTER.withName("next")
    ).withName("_DelegateInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *path
     * }
     */
    public static final AddressLayout path$layout() {
        return path$LAYOUT;
    }

    private static final long path$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *path
     * }
     */
    public static final long path$offset() {
        return path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *path
     * }
     */
    public static MemorySegment path(MemorySegment struct) {
        return struct.get(path$LAYOUT, path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *path
     * }
     */
    public static void path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(path$LAYOUT, path$OFFSET, fieldValue);
    }

    private static final AddressLayout decode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("decode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *decode
     * }
     */
    public static final AddressLayout decode$layout() {
        return decode$LAYOUT;
    }

    private static final long decode$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *decode
     * }
     */
    public static final long decode$offset() {
        return decode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *decode
     * }
     */
    public static MemorySegment decode(MemorySegment struct) {
        return struct.get(decode$LAYOUT, decode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *decode
     * }
     */
    public static void decode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(decode$LAYOUT, decode$OFFSET, fieldValue);
    }

    private static final AddressLayout encode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("encode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *encode
     * }
     */
    public static final AddressLayout encode$layout() {
        return encode$LAYOUT;
    }

    private static final long encode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *encode
     * }
     */
    public static final long encode$offset() {
        return encode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *encode
     * }
     */
    public static MemorySegment encode(MemorySegment struct) {
        return struct.get(encode$LAYOUT, encode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *encode
     * }
     */
    public static void encode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(encode$LAYOUT, encode$OFFSET, fieldValue);
    }

    private static final AddressLayout commands$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("commands"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *commands
     * }
     */
    public static final AddressLayout commands$layout() {
        return commands$LAYOUT;
    }

    private static final long commands$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *commands
     * }
     */
    public static final long commands$offset() {
        return commands$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *commands
     * }
     */
    public static MemorySegment commands(MemorySegment struct) {
        return struct.get(commands$LAYOUT, commands$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *commands
     * }
     */
    public static void commands(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(commands$LAYOUT, commands$OFFSET, fieldValue);
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final OfInt stealth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stealth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static final OfInt stealth$layout() {
        return stealth$LAYOUT;
    }

    private static final long stealth$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static final long stealth$offset() {
        return stealth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static int stealth(MemorySegment struct) {
        return struct.get(stealth$LAYOUT, stealth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static void stealth(MemorySegment struct, int fieldValue) {
        struct.set(stealth$LAYOUT, stealth$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    private static final AddressLayout previous$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("previous"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _DelegateInfo *previous
     * }
     */
    public static final AddressLayout previous$layout() {
        return previous$LAYOUT;
    }

    private static final long previous$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _DelegateInfo *previous
     * }
     */
    public static final long previous$offset() {
        return previous$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _DelegateInfo *previous
     * }
     */
    public static MemorySegment previous(MemorySegment struct) {
        return struct.get(previous$LAYOUT, previous$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _DelegateInfo *previous
     * }
     */
    public static void previous(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(previous$LAYOUT, previous$OFFSET, fieldValue);
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _DelegateInfo *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _DelegateInfo *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _DelegateInfo *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _DelegateInfo *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

