// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _TypeInfo {
 *     char *path;
 *     char *name;
 *     char *description;
 *     char *family;
 *     StyleType style;
 *     StretchType stretch;
 *     unsigned long weight;
 *     char *encoding;
 *     char *foundry;
 *     char *format;
 *     char *metrics;
 *     char *glyphs;
 *     unsigned int stealth;
 *     unsigned long signature;
 *     struct _TypeInfo *previous;
 *     struct _TypeInfo *next;
 * }
 * }
 */
public class _TypeInfo {

    _TypeInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_POINTER.withName("path"),
        magick_wand_h.C_POINTER.withName("name"),
        magick_wand_h.C_POINTER.withName("description"),
        magick_wand_h.C_POINTER.withName("family"),
        magick_wand_h.C_INT.withName("style"),
        magick_wand_h.C_INT.withName("stretch"),
        magick_wand_h.C_LONG.withName("weight"),
        magick_wand_h.C_POINTER.withName("encoding"),
        magick_wand_h.C_POINTER.withName("foundry"),
        magick_wand_h.C_POINTER.withName("format"),
        magick_wand_h.C_POINTER.withName("metrics"),
        magick_wand_h.C_POINTER.withName("glyphs"),
        magick_wand_h.C_INT.withName("stealth"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_LONG.withName("signature"),
        magick_wand_h.C_POINTER.withName("previous"),
        magick_wand_h.C_POINTER.withName("next")
    ).withName("_TypeInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *path
     * }
     */
    public static final AddressLayout path$layout() {
        return path$LAYOUT;
    }

    private static final long path$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *path
     * }
     */
    public static final long path$offset() {
        return path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *path
     * }
     */
    public static MemorySegment path(MemorySegment struct) {
        return struct.get(path$LAYOUT, path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *path
     * }
     */
    public static void path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(path$LAYOUT, path$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final AddressLayout family$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("family"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *family
     * }
     */
    public static final AddressLayout family$layout() {
        return family$LAYOUT;
    }

    private static final long family$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *family
     * }
     */
    public static final long family$offset() {
        return family$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *family
     * }
     */
    public static MemorySegment family(MemorySegment struct) {
        return struct.get(family$LAYOUT, family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *family
     * }
     */
    public static void family(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(family$LAYOUT, family$OFFSET, fieldValue);
    }

    private static final OfInt style$LAYOUT = (OfInt)$LAYOUT.select(groupElement("style"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StyleType style
     * }
     */
    public static final OfInt style$layout() {
        return style$LAYOUT;
    }

    private static final long style$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StyleType style
     * }
     */
    public static final long style$offset() {
        return style$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StyleType style
     * }
     */
    public static int style(MemorySegment struct) {
        return struct.get(style$LAYOUT, style$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StyleType style
     * }
     */
    public static void style(MemorySegment struct, int fieldValue) {
        struct.set(style$LAYOUT, style$OFFSET, fieldValue);
    }

    private static final OfInt stretch$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stretch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StretchType stretch
     * }
     */
    public static final OfInt stretch$layout() {
        return stretch$LAYOUT;
    }

    private static final long stretch$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StretchType stretch
     * }
     */
    public static final long stretch$offset() {
        return stretch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StretchType stretch
     * }
     */
    public static int stretch(MemorySegment struct) {
        return struct.get(stretch$LAYOUT, stretch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StretchType stretch
     * }
     */
    public static void stretch(MemorySegment struct, int fieldValue) {
        struct.set(stretch$LAYOUT, stretch$OFFSET, fieldValue);
    }

    private static final OfLong weight$LAYOUT = (OfLong)$LAYOUT.select(groupElement("weight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long weight
     * }
     */
    public static final OfLong weight$layout() {
        return weight$LAYOUT;
    }

    private static final long weight$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long weight
     * }
     */
    public static final long weight$offset() {
        return weight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long weight
     * }
     */
    public static long weight(MemorySegment struct) {
        return struct.get(weight$LAYOUT, weight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long weight
     * }
     */
    public static void weight(MemorySegment struct, long fieldValue) {
        struct.set(weight$LAYOUT, weight$OFFSET, fieldValue);
    }

    private static final AddressLayout encoding$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("encoding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *encoding
     * }
     */
    public static final AddressLayout encoding$layout() {
        return encoding$LAYOUT;
    }

    private static final long encoding$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *encoding
     * }
     */
    public static final long encoding$offset() {
        return encoding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *encoding
     * }
     */
    public static MemorySegment encoding(MemorySegment struct) {
        return struct.get(encoding$LAYOUT, encoding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *encoding
     * }
     */
    public static void encoding(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(encoding$LAYOUT, encoding$OFFSET, fieldValue);
    }

    private static final AddressLayout foundry$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("foundry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *foundry
     * }
     */
    public static final AddressLayout foundry$layout() {
        return foundry$LAYOUT;
    }

    private static final long foundry$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *foundry
     * }
     */
    public static final long foundry$offset() {
        return foundry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *foundry
     * }
     */
    public static MemorySegment foundry(MemorySegment struct) {
        return struct.get(foundry$LAYOUT, foundry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *foundry
     * }
     */
    public static void foundry(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(foundry$LAYOUT, foundry$OFFSET, fieldValue);
    }

    private static final AddressLayout format$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *format
     * }
     */
    public static final AddressLayout format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *format
     * }
     */
    public static MemorySegment format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *format
     * }
     */
    public static void format(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final AddressLayout metrics$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("metrics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *metrics
     * }
     */
    public static final AddressLayout metrics$layout() {
        return metrics$LAYOUT;
    }

    private static final long metrics$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *metrics
     * }
     */
    public static final long metrics$offset() {
        return metrics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *metrics
     * }
     */
    public static MemorySegment metrics(MemorySegment struct) {
        return struct.get(metrics$LAYOUT, metrics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *metrics
     * }
     */
    public static void metrics(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(metrics$LAYOUT, metrics$OFFSET, fieldValue);
    }

    private static final AddressLayout glyphs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("glyphs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *glyphs
     * }
     */
    public static final AddressLayout glyphs$layout() {
        return glyphs$LAYOUT;
    }

    private static final long glyphs$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *glyphs
     * }
     */
    public static final long glyphs$offset() {
        return glyphs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *glyphs
     * }
     */
    public static MemorySegment glyphs(MemorySegment struct) {
        return struct.get(glyphs$LAYOUT, glyphs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *glyphs
     * }
     */
    public static void glyphs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(glyphs$LAYOUT, glyphs$OFFSET, fieldValue);
    }

    private static final OfInt stealth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stealth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static final OfInt stealth$layout() {
        return stealth$LAYOUT;
    }

    private static final long stealth$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static final long stealth$offset() {
        return stealth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static int stealth(MemorySegment struct) {
        return struct.get(stealth$LAYOUT, stealth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int stealth
     * }
     */
    public static void stealth(MemorySegment struct, int fieldValue) {
        struct.set(stealth$LAYOUT, stealth$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    private static final AddressLayout previous$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("previous"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _TypeInfo *previous
     * }
     */
    public static final AddressLayout previous$layout() {
        return previous$LAYOUT;
    }

    private static final long previous$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _TypeInfo *previous
     * }
     */
    public static final long previous$offset() {
        return previous$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _TypeInfo *previous
     * }
     */
    public static MemorySegment previous(MemorySegment struct) {
        return struct.get(previous$LAYOUT, previous$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _TypeInfo *previous
     * }
     */
    public static void previous(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(previous$LAYOUT, previous$OFFSET, fieldValue);
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _TypeInfo *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _TypeInfo *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _TypeInfo *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _TypeInfo *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

