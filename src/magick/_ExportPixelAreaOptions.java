// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ExportPixelAreaOptions {
 *     QuantumSampleType sample_type;
 *     double double_minvalue;
 *     double double_maxvalue;
 *     unsigned int grayscale_miniswhite;
 *     unsigned long pad_bytes;
 *     unsigned char pad_value;
 *     EndianType endian;
 *     unsigned long signature;
 * }
 * }
 */
public class _ExportPixelAreaOptions {

    _ExportPixelAreaOptions() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_INT.withName("sample_type"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_DOUBLE.withName("double_minvalue"),
        magick_wand_h.C_DOUBLE.withName("double_maxvalue"),
        magick_wand_h.C_INT.withName("grayscale_miniswhite"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_LONG.withName("pad_bytes"),
        magick_wand_h.C_CHAR.withName("pad_value"),
        MemoryLayout.paddingLayout(3),
        magick_wand_h.C_INT.withName("endian"),
        magick_wand_h.C_LONG.withName("signature")
    ).withName("_ExportPixelAreaOptions");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sample_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sample_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * QuantumSampleType sample_type
     * }
     */
    public static final OfInt sample_type$layout() {
        return sample_type$LAYOUT;
    }

    private static final long sample_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * QuantumSampleType sample_type
     * }
     */
    public static final long sample_type$offset() {
        return sample_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * QuantumSampleType sample_type
     * }
     */
    public static int sample_type(MemorySegment struct) {
        return struct.get(sample_type$LAYOUT, sample_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * QuantumSampleType sample_type
     * }
     */
    public static void sample_type(MemorySegment struct, int fieldValue) {
        struct.set(sample_type$LAYOUT, sample_type$OFFSET, fieldValue);
    }

    private static final OfDouble double_minvalue$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("double_minvalue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double double_minvalue
     * }
     */
    public static final OfDouble double_minvalue$layout() {
        return double_minvalue$LAYOUT;
    }

    private static final long double_minvalue$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double double_minvalue
     * }
     */
    public static final long double_minvalue$offset() {
        return double_minvalue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double double_minvalue
     * }
     */
    public static double double_minvalue(MemorySegment struct) {
        return struct.get(double_minvalue$LAYOUT, double_minvalue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double double_minvalue
     * }
     */
    public static void double_minvalue(MemorySegment struct, double fieldValue) {
        struct.set(double_minvalue$LAYOUT, double_minvalue$OFFSET, fieldValue);
    }

    private static final OfDouble double_maxvalue$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("double_maxvalue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double double_maxvalue
     * }
     */
    public static final OfDouble double_maxvalue$layout() {
        return double_maxvalue$LAYOUT;
    }

    private static final long double_maxvalue$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double double_maxvalue
     * }
     */
    public static final long double_maxvalue$offset() {
        return double_maxvalue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double double_maxvalue
     * }
     */
    public static double double_maxvalue(MemorySegment struct) {
        return struct.get(double_maxvalue$LAYOUT, double_maxvalue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double double_maxvalue
     * }
     */
    public static void double_maxvalue(MemorySegment struct, double fieldValue) {
        struct.set(double_maxvalue$LAYOUT, double_maxvalue$OFFSET, fieldValue);
    }

    private static final OfInt grayscale_miniswhite$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grayscale_miniswhite"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int grayscale_miniswhite
     * }
     */
    public static final OfInt grayscale_miniswhite$layout() {
        return grayscale_miniswhite$LAYOUT;
    }

    private static final long grayscale_miniswhite$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int grayscale_miniswhite
     * }
     */
    public static final long grayscale_miniswhite$offset() {
        return grayscale_miniswhite$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int grayscale_miniswhite
     * }
     */
    public static int grayscale_miniswhite(MemorySegment struct) {
        return struct.get(grayscale_miniswhite$LAYOUT, grayscale_miniswhite$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int grayscale_miniswhite
     * }
     */
    public static void grayscale_miniswhite(MemorySegment struct, int fieldValue) {
        struct.set(grayscale_miniswhite$LAYOUT, grayscale_miniswhite$OFFSET, fieldValue);
    }

    private static final OfLong pad_bytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pad_bytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long pad_bytes
     * }
     */
    public static final OfLong pad_bytes$layout() {
        return pad_bytes$LAYOUT;
    }

    private static final long pad_bytes$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long pad_bytes
     * }
     */
    public static final long pad_bytes$offset() {
        return pad_bytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long pad_bytes
     * }
     */
    public static long pad_bytes(MemorySegment struct) {
        return struct.get(pad_bytes$LAYOUT, pad_bytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long pad_bytes
     * }
     */
    public static void pad_bytes(MemorySegment struct, long fieldValue) {
        struct.set(pad_bytes$LAYOUT, pad_bytes$OFFSET, fieldValue);
    }

    private static final OfByte pad_value$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pad_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char pad_value
     * }
     */
    public static final OfByte pad_value$layout() {
        return pad_value$LAYOUT;
    }

    private static final long pad_value$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char pad_value
     * }
     */
    public static final long pad_value$offset() {
        return pad_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char pad_value
     * }
     */
    public static byte pad_value(MemorySegment struct) {
        return struct.get(pad_value$LAYOUT, pad_value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char pad_value
     * }
     */
    public static void pad_value(MemorySegment struct, byte fieldValue) {
        struct.set(pad_value$LAYOUT, pad_value$OFFSET, fieldValue);
    }

    private static final OfInt endian$LAYOUT = (OfInt)$LAYOUT.select(groupElement("endian"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static final OfInt endian$layout() {
        return endian$LAYOUT;
    }

    private static final long endian$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static final long endian$offset() {
        return endian$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static int endian(MemorySegment struct) {
        return struct.get(endian$LAYOUT, endian$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static void endian(MemorySegment struct, int fieldValue) {
        struct.set(endian$LAYOUT, endian$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

