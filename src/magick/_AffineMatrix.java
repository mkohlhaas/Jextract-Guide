// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _AffineMatrix {
 *     double sx;
 *     double rx;
 *     double ry;
 *     double sy;
 *     double tx;
 *     double ty;
 * }
 * }
 */
public class _AffineMatrix {

    _AffineMatrix() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_DOUBLE.withName("sx"),
        magick_wand_h.C_DOUBLE.withName("rx"),
        magick_wand_h.C_DOUBLE.withName("ry"),
        magick_wand_h.C_DOUBLE.withName("sy"),
        magick_wand_h.C_DOUBLE.withName("tx"),
        magick_wand_h.C_DOUBLE.withName("ty")
    ).withName("_AffineMatrix");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble sx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static final OfDouble sx$layout() {
        return sx$LAYOUT;
    }

    private static final long sx$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static final long sx$offset() {
        return sx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static double sx(MemorySegment struct) {
        return struct.get(sx$LAYOUT, sx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double sx
     * }
     */
    public static void sx(MemorySegment struct, double fieldValue) {
        struct.set(sx$LAYOUT, sx$OFFSET, fieldValue);
    }

    private static final OfDouble rx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("rx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double rx
     * }
     */
    public static final OfDouble rx$layout() {
        return rx$LAYOUT;
    }

    private static final long rx$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double rx
     * }
     */
    public static final long rx$offset() {
        return rx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double rx
     * }
     */
    public static double rx(MemorySegment struct) {
        return struct.get(rx$LAYOUT, rx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double rx
     * }
     */
    public static void rx(MemorySegment struct, double fieldValue) {
        struct.set(rx$LAYOUT, rx$OFFSET, fieldValue);
    }

    private static final OfDouble ry$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("ry"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double ry
     * }
     */
    public static final OfDouble ry$layout() {
        return ry$LAYOUT;
    }

    private static final long ry$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double ry
     * }
     */
    public static final long ry$offset() {
        return ry$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double ry
     * }
     */
    public static double ry(MemorySegment struct) {
        return struct.get(ry$LAYOUT, ry$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double ry
     * }
     */
    public static void ry(MemorySegment struct, double fieldValue) {
        struct.set(ry$LAYOUT, ry$OFFSET, fieldValue);
    }

    private static final OfDouble sy$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("sy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static final OfDouble sy$layout() {
        return sy$LAYOUT;
    }

    private static final long sy$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static final long sy$offset() {
        return sy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static double sy(MemorySegment struct) {
        return struct.get(sy$LAYOUT, sy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double sy
     * }
     */
    public static void sy(MemorySegment struct, double fieldValue) {
        struct.set(sy$LAYOUT, sy$OFFSET, fieldValue);
    }

    private static final OfDouble tx$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("tx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double tx
     * }
     */
    public static final OfDouble tx$layout() {
        return tx$LAYOUT;
    }

    private static final long tx$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double tx
     * }
     */
    public static final long tx$offset() {
        return tx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double tx
     * }
     */
    public static double tx(MemorySegment struct) {
        return struct.get(tx$LAYOUT, tx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double tx
     * }
     */
    public static void tx(MemorySegment struct, double fieldValue) {
        struct.set(tx$LAYOUT, tx$OFFSET, fieldValue);
    }

    private static final OfDouble ty$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("ty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double ty
     * }
     */
    public static final OfDouble ty$layout() {
        return ty$LAYOUT;
    }

    private static final long ty$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double ty
     * }
     */
    public static final long ty$offset() {
        return ty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double ty
     * }
     */
    public static double ty(MemorySegment struct) {
        return struct.get(ty$LAYOUT, ty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double ty
     * }
     */
    public static void ty(MemorySegment struct, double fieldValue) {
        struct.set(ty$LAYOUT, ty$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

