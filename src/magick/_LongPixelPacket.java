// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _LongPixelPacket {
 *     unsigned long red;
 *     unsigned long green;
 *     unsigned long blue;
 *     unsigned long opacity;
 * }
 * }
 */
public class _LongPixelPacket {

    _LongPixelPacket() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_LONG.withName("red"),
        magick_wand_h.C_LONG.withName("green"),
        magick_wand_h.C_LONG.withName("blue"),
        magick_wand_h.C_LONG.withName("opacity")
    ).withName("_LongPixelPacket");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong red$LAYOUT = (OfLong)$LAYOUT.select(groupElement("red"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long red
     * }
     */
    public static final OfLong red$layout() {
        return red$LAYOUT;
    }

    private static final long red$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long red
     * }
     */
    public static final long red$offset() {
        return red$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long red
     * }
     */
    public static long red(MemorySegment struct) {
        return struct.get(red$LAYOUT, red$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long red
     * }
     */
    public static void red(MemorySegment struct, long fieldValue) {
        struct.set(red$LAYOUT, red$OFFSET, fieldValue);
    }

    private static final OfLong green$LAYOUT = (OfLong)$LAYOUT.select(groupElement("green"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long green
     * }
     */
    public static final OfLong green$layout() {
        return green$LAYOUT;
    }

    private static final long green$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long green
     * }
     */
    public static final long green$offset() {
        return green$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long green
     * }
     */
    public static long green(MemorySegment struct) {
        return struct.get(green$LAYOUT, green$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long green
     * }
     */
    public static void green(MemorySegment struct, long fieldValue) {
        struct.set(green$LAYOUT, green$OFFSET, fieldValue);
    }

    private static final OfLong blue$LAYOUT = (OfLong)$LAYOUT.select(groupElement("blue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long blue
     * }
     */
    public static final OfLong blue$layout() {
        return blue$LAYOUT;
    }

    private static final long blue$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long blue
     * }
     */
    public static final long blue$offset() {
        return blue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long blue
     * }
     */
    public static long blue(MemorySegment struct) {
        return struct.get(blue$LAYOUT, blue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long blue
     * }
     */
    public static void blue(MemorySegment struct, long fieldValue) {
        struct.set(blue$LAYOUT, blue$OFFSET, fieldValue);
    }

    private static final OfLong opacity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("opacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long opacity
     * }
     */
    public static final OfLong opacity$layout() {
        return opacity$LAYOUT;
    }

    private static final long opacity$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long opacity
     * }
     */
    public static final long opacity$offset() {
        return opacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long opacity
     * }
     */
    public static long opacity(MemorySegment struct) {
        return struct.get(opacity$LAYOUT, opacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long opacity
     * }
     */
    public static void opacity(MemorySegment struct, long fieldValue) {
        struct.set(opacity$LAYOUT, opacity$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

