// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _TokenInfo {
 *     int state;
 *     unsigned int flag;
 *     long offset;
 *     char quote;
 * }
 * }
 */
public class _TokenInfo {

    _TokenInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_INT.withName("state"),
        magick_wand_h.C_INT.withName("flag"),
        magick_wand_h.C_LONG.withName("offset"),
        magick_wand_h.C_CHAR.withName("quote"),
        MemoryLayout.paddingLayout(7)
    ).withName("_TokenInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt state$LAYOUT = (OfInt)$LAYOUT.select(groupElement("state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int state
     * }
     */
    public static final OfInt state$layout() {
        return state$LAYOUT;
    }

    private static final long state$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int state
     * }
     */
    public static final long state$offset() {
        return state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int state
     * }
     */
    public static int state(MemorySegment struct) {
        return struct.get(state$LAYOUT, state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int state
     * }
     */
    public static void state(MemorySegment struct, int fieldValue) {
        struct.set(state$LAYOUT, state$OFFSET, fieldValue);
    }

    private static final OfInt flag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flag
     * }
     */
    public static final OfInt flag$layout() {
        return flag$LAYOUT;
    }

    private static final long flag$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flag
     * }
     */
    public static final long flag$offset() {
        return flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flag
     * }
     */
    public static int flag(MemorySegment struct) {
        return struct.get(flag$LAYOUT, flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flag
     * }
     */
    public static void flag(MemorySegment struct, int fieldValue) {
        struct.set(flag$LAYOUT, flag$OFFSET, fieldValue);
    }

    private static final OfLong offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long offset
     * }
     */
    public static final OfLong offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long offset
     * }
     */
    public static long offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long offset
     * }
     */
    public static void offset(MemorySegment struct, long fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfByte quote$LAYOUT = (OfByte)$LAYOUT.select(groupElement("quote"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char quote
     * }
     */
    public static final OfByte quote$layout() {
        return quote$LAYOUT;
    }

    private static final long quote$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char quote
     * }
     */
    public static final long quote$offset() {
        return quote$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char quote
     * }
     */
    public static byte quote(MemorySegment struct) {
        return struct.get(quote$LAYOUT, quote$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char quote
     * }
     */
    public static void quote(MemorySegment struct, byte fieldValue) {
        struct.set(quote$LAYOUT, quote$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

