// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ImageInfo {
 *     CompressionType compression;
 *     unsigned int temporary;
 *     unsigned int adjoin;
 *     unsigned int antialias;
 *     unsigned long subimage;
 *     unsigned long subrange;
 *     unsigned long depth;
 *     char *size;
 *     char *tile;
 *     char *page;
 *     InterlaceType interlace;
 *     EndianType endian;
 *     ResolutionType units;
 *     unsigned long quality;
 *     char *sampling_factor;
 *     char *server_name;
 *     char *font;
 *     char *texture;
 *     char *density;
 *     double pointsize;
 *     double fuzz;
 *     PixelPacket pen;
 *     PixelPacket background_color;
 *     PixelPacket border_color;
 *     PixelPacket matte_color;
 *     unsigned int dither;
 *     unsigned int monochrome;
 *     unsigned int progress;
 *     ColorspaceType colorspace;
 *     ImageType type;
 *     long group;
 *     unsigned int verbose;
 *     char *view;
 *     char *authenticate;
 *     void *client_data;
 *     FILE *file;
 *     char magick[2053];
 *     char filename[2053];
 *     _CacheInfoPtr_ cache;
 *     void *definitions;
 *     Image *attributes;
 *     unsigned int ping;
 *     PreviewType preview_type;
 *     unsigned int affirm;
 *     _BlobInfoPtr_ blob;
 *     size_t length;
 *     char unique[2053];
 *     char zero[2053];
 *     unsigned long signature;
 * }
 * }
 */
public class _ImageInfo {

    _ImageInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_INT.withName("compression"),
        magick_wand_h.C_INT.withName("temporary"),
        magick_wand_h.C_INT.withName("adjoin"),
        magick_wand_h.C_INT.withName("antialias"),
        magick_wand_h.C_LONG.withName("subimage"),
        magick_wand_h.C_LONG.withName("subrange"),
        magick_wand_h.C_LONG.withName("depth"),
        magick_wand_h.C_POINTER.withName("size"),
        magick_wand_h.C_POINTER.withName("tile"),
        magick_wand_h.C_POINTER.withName("page"),
        magick_wand_h.C_INT.withName("interlace"),
        magick_wand_h.C_INT.withName("endian"),
        magick_wand_h.C_INT.withName("units"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_LONG.withName("quality"),
        magick_wand_h.C_POINTER.withName("sampling_factor"),
        magick_wand_h.C_POINTER.withName("server_name"),
        magick_wand_h.C_POINTER.withName("font"),
        magick_wand_h.C_POINTER.withName("texture"),
        magick_wand_h.C_POINTER.withName("density"),
        magick_wand_h.C_DOUBLE.withName("pointsize"),
        magick_wand_h.C_DOUBLE.withName("fuzz"),
        _PixelPacket.layout().withName("pen"),
        _PixelPacket.layout().withName("background_color"),
        _PixelPacket.layout().withName("border_color"),
        _PixelPacket.layout().withName("matte_color"),
        magick_wand_h.C_INT.withName("dither"),
        magick_wand_h.C_INT.withName("monochrome"),
        magick_wand_h.C_INT.withName("progress"),
        magick_wand_h.C_INT.withName("colorspace"),
        magick_wand_h.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_LONG.withName("group"),
        magick_wand_h.C_INT.withName("verbose"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_POINTER.withName("view"),
        magick_wand_h.C_POINTER.withName("authenticate"),
        magick_wand_h.C_POINTER.withName("client_data"),
        magick_wand_h.C_POINTER.withName("file"),
        MemoryLayout.sequenceLayout(2053, magick_wand_h.C_CHAR).withName("magick"),
        MemoryLayout.sequenceLayout(2053, magick_wand_h.C_CHAR).withName("filename"),
        MemoryLayout.paddingLayout(6),
        magick_wand_h.C_POINTER.withName("cache"),
        magick_wand_h.C_POINTER.withName("definitions"),
        magick_wand_h.C_POINTER.withName("attributes"),
        magick_wand_h.C_INT.withName("ping"),
        magick_wand_h.C_INT.withName("preview_type"),
        magick_wand_h.C_INT.withName("affirm"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_POINTER.withName("blob"),
        magick_wand_h.C_LONG.withName("length"),
        MemoryLayout.sequenceLayout(2053, magick_wand_h.C_CHAR).withName("unique"),
        MemoryLayout.sequenceLayout(2053, magick_wand_h.C_CHAR).withName("zero"),
        MemoryLayout.paddingLayout(6),
        magick_wand_h.C_LONG.withName("signature")
    ).withName("_ImageInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt compression$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compression"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static final OfInt compression$layout() {
        return compression$LAYOUT;
    }

    private static final long compression$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static final long compression$offset() {
        return compression$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static int compression(MemorySegment struct) {
        return struct.get(compression$LAYOUT, compression$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CompressionType compression
     * }
     */
    public static void compression(MemorySegment struct, int fieldValue) {
        struct.set(compression$LAYOUT, compression$OFFSET, fieldValue);
    }

    private static final OfInt temporary$LAYOUT = (OfInt)$LAYOUT.select(groupElement("temporary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int temporary
     * }
     */
    public static final OfInt temporary$layout() {
        return temporary$LAYOUT;
    }

    private static final long temporary$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int temporary
     * }
     */
    public static final long temporary$offset() {
        return temporary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int temporary
     * }
     */
    public static int temporary(MemorySegment struct) {
        return struct.get(temporary$LAYOUT, temporary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int temporary
     * }
     */
    public static void temporary(MemorySegment struct, int fieldValue) {
        struct.set(temporary$LAYOUT, temporary$OFFSET, fieldValue);
    }

    private static final OfInt adjoin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("adjoin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int adjoin
     * }
     */
    public static final OfInt adjoin$layout() {
        return adjoin$LAYOUT;
    }

    private static final long adjoin$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int adjoin
     * }
     */
    public static final long adjoin$offset() {
        return adjoin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int adjoin
     * }
     */
    public static int adjoin(MemorySegment struct) {
        return struct.get(adjoin$LAYOUT, adjoin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int adjoin
     * }
     */
    public static void adjoin(MemorySegment struct, int fieldValue) {
        struct.set(adjoin$LAYOUT, adjoin$OFFSET, fieldValue);
    }

    private static final OfInt antialias$LAYOUT = (OfInt)$LAYOUT.select(groupElement("antialias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int antialias
     * }
     */
    public static final OfInt antialias$layout() {
        return antialias$LAYOUT;
    }

    private static final long antialias$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int antialias
     * }
     */
    public static final long antialias$offset() {
        return antialias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int antialias
     * }
     */
    public static int antialias(MemorySegment struct) {
        return struct.get(antialias$LAYOUT, antialias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int antialias
     * }
     */
    public static void antialias(MemorySegment struct, int fieldValue) {
        struct.set(antialias$LAYOUT, antialias$OFFSET, fieldValue);
    }

    private static final OfLong subimage$LAYOUT = (OfLong)$LAYOUT.select(groupElement("subimage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long subimage
     * }
     */
    public static final OfLong subimage$layout() {
        return subimage$LAYOUT;
    }

    private static final long subimage$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long subimage
     * }
     */
    public static final long subimage$offset() {
        return subimage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long subimage
     * }
     */
    public static long subimage(MemorySegment struct) {
        return struct.get(subimage$LAYOUT, subimage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long subimage
     * }
     */
    public static void subimage(MemorySegment struct, long fieldValue) {
        struct.set(subimage$LAYOUT, subimage$OFFSET, fieldValue);
    }

    private static final OfLong subrange$LAYOUT = (OfLong)$LAYOUT.select(groupElement("subrange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long subrange
     * }
     */
    public static final OfLong subrange$layout() {
        return subrange$LAYOUT;
    }

    private static final long subrange$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long subrange
     * }
     */
    public static final long subrange$offset() {
        return subrange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long subrange
     * }
     */
    public static long subrange(MemorySegment struct) {
        return struct.get(subrange$LAYOUT, subrange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long subrange
     * }
     */
    public static void subrange(MemorySegment struct, long fieldValue) {
        struct.set(subrange$LAYOUT, subrange$OFFSET, fieldValue);
    }

    private static final OfLong depth$LAYOUT = (OfLong)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long depth
     * }
     */
    public static final OfLong depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long depth
     * }
     */
    public static long depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long depth
     * }
     */
    public static void depth(MemorySegment struct, long fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    private static final AddressLayout size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *size
     * }
     */
    public static final AddressLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *size
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final AddressLayout tile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *tile
     * }
     */
    public static final AddressLayout tile$layout() {
        return tile$LAYOUT;
    }

    private static final long tile$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *tile
     * }
     */
    public static final long tile$offset() {
        return tile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *tile
     * }
     */
    public static MemorySegment tile(MemorySegment struct) {
        return struct.get(tile$LAYOUT, tile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *tile
     * }
     */
    public static void tile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tile$LAYOUT, tile$OFFSET, fieldValue);
    }

    private static final AddressLayout page$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("page"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *page
     * }
     */
    public static final AddressLayout page$layout() {
        return page$LAYOUT;
    }

    private static final long page$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *page
     * }
     */
    public static final long page$offset() {
        return page$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *page
     * }
     */
    public static MemorySegment page(MemorySegment struct) {
        return struct.get(page$LAYOUT, page$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *page
     * }
     */
    public static void page(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(page$LAYOUT, page$OFFSET, fieldValue);
    }

    private static final OfInt interlace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("interlace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static final OfInt interlace$layout() {
        return interlace$LAYOUT;
    }

    private static final long interlace$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static final long interlace$offset() {
        return interlace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static int interlace(MemorySegment struct) {
        return struct.get(interlace$LAYOUT, interlace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * InterlaceType interlace
     * }
     */
    public static void interlace(MemorySegment struct, int fieldValue) {
        struct.set(interlace$LAYOUT, interlace$OFFSET, fieldValue);
    }

    private static final OfInt endian$LAYOUT = (OfInt)$LAYOUT.select(groupElement("endian"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static final OfInt endian$layout() {
        return endian$LAYOUT;
    }

    private static final long endian$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static final long endian$offset() {
        return endian$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static int endian(MemorySegment struct) {
        return struct.get(endian$LAYOUT, endian$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EndianType endian
     * }
     */
    public static void endian(MemorySegment struct, int fieldValue) {
        struct.set(endian$LAYOUT, endian$OFFSET, fieldValue);
    }

    private static final OfInt units$LAYOUT = (OfInt)$LAYOUT.select(groupElement("units"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static final OfInt units$layout() {
        return units$LAYOUT;
    }

    private static final long units$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static final long units$offset() {
        return units$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static int units(MemorySegment struct) {
        return struct.get(units$LAYOUT, units$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ResolutionType units
     * }
     */
    public static void units(MemorySegment struct, int fieldValue) {
        struct.set(units$LAYOUT, units$OFFSET, fieldValue);
    }

    private static final OfLong quality$LAYOUT = (OfLong)$LAYOUT.select(groupElement("quality"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long quality
     * }
     */
    public static final OfLong quality$layout() {
        return quality$LAYOUT;
    }

    private static final long quality$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long quality
     * }
     */
    public static final long quality$offset() {
        return quality$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long quality
     * }
     */
    public static long quality(MemorySegment struct) {
        return struct.get(quality$LAYOUT, quality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long quality
     * }
     */
    public static void quality(MemorySegment struct, long fieldValue) {
        struct.set(quality$LAYOUT, quality$OFFSET, fieldValue);
    }

    private static final AddressLayout sampling_factor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sampling_factor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *sampling_factor
     * }
     */
    public static final AddressLayout sampling_factor$layout() {
        return sampling_factor$LAYOUT;
    }

    private static final long sampling_factor$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *sampling_factor
     * }
     */
    public static final long sampling_factor$offset() {
        return sampling_factor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *sampling_factor
     * }
     */
    public static MemorySegment sampling_factor(MemorySegment struct) {
        return struct.get(sampling_factor$LAYOUT, sampling_factor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *sampling_factor
     * }
     */
    public static void sampling_factor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sampling_factor$LAYOUT, sampling_factor$OFFSET, fieldValue);
    }

    private static final AddressLayout server_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("server_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *server_name
     * }
     */
    public static final AddressLayout server_name$layout() {
        return server_name$LAYOUT;
    }

    private static final long server_name$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *server_name
     * }
     */
    public static final long server_name$offset() {
        return server_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *server_name
     * }
     */
    public static MemorySegment server_name(MemorySegment struct) {
        return struct.get(server_name$LAYOUT, server_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *server_name
     * }
     */
    public static void server_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(server_name$LAYOUT, server_name$OFFSET, fieldValue);
    }

    private static final AddressLayout font$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("font"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *font
     * }
     */
    public static final AddressLayout font$layout() {
        return font$LAYOUT;
    }

    private static final long font$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *font
     * }
     */
    public static final long font$offset() {
        return font$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *font
     * }
     */
    public static MemorySegment font(MemorySegment struct) {
        return struct.get(font$LAYOUT, font$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *font
     * }
     */
    public static void font(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(font$LAYOUT, font$OFFSET, fieldValue);
    }

    private static final AddressLayout texture$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("texture"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *texture
     * }
     */
    public static final AddressLayout texture$layout() {
        return texture$LAYOUT;
    }

    private static final long texture$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *texture
     * }
     */
    public static final long texture$offset() {
        return texture$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *texture
     * }
     */
    public static MemorySegment texture(MemorySegment struct) {
        return struct.get(texture$LAYOUT, texture$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *texture
     * }
     */
    public static void texture(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(texture$LAYOUT, texture$OFFSET, fieldValue);
    }

    private static final AddressLayout density$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("density"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *density
     * }
     */
    public static final AddressLayout density$layout() {
        return density$LAYOUT;
    }

    private static final long density$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *density
     * }
     */
    public static final long density$offset() {
        return density$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *density
     * }
     */
    public static MemorySegment density(MemorySegment struct) {
        return struct.get(density$LAYOUT, density$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *density
     * }
     */
    public static void density(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(density$LAYOUT, density$OFFSET, fieldValue);
    }

    private static final OfDouble pointsize$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("pointsize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double pointsize
     * }
     */
    public static final OfDouble pointsize$layout() {
        return pointsize$LAYOUT;
    }

    private static final long pointsize$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double pointsize
     * }
     */
    public static final long pointsize$offset() {
        return pointsize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double pointsize
     * }
     */
    public static double pointsize(MemorySegment struct) {
        return struct.get(pointsize$LAYOUT, pointsize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double pointsize
     * }
     */
    public static void pointsize(MemorySegment struct, double fieldValue) {
        struct.set(pointsize$LAYOUT, pointsize$OFFSET, fieldValue);
    }

    private static final OfDouble fuzz$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("fuzz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static final OfDouble fuzz$layout() {
        return fuzz$LAYOUT;
    }

    private static final long fuzz$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static final long fuzz$offset() {
        return fuzz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static double fuzz(MemorySegment struct) {
        return struct.get(fuzz$LAYOUT, fuzz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double fuzz
     * }
     */
    public static void fuzz(MemorySegment struct, double fieldValue) {
        struct.set(fuzz$LAYOUT, fuzz$OFFSET, fieldValue);
    }

    private static final GroupLayout pen$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelPacket pen
     * }
     */
    public static final GroupLayout pen$layout() {
        return pen$LAYOUT;
    }

    private static final long pen$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelPacket pen
     * }
     */
    public static final long pen$offset() {
        return pen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelPacket pen
     * }
     */
    public static MemorySegment pen(MemorySegment struct) {
        return struct.asSlice(pen$OFFSET, pen$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelPacket pen
     * }
     */
    public static void pen(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pen$OFFSET, pen$LAYOUT.byteSize());
    }

    private static final GroupLayout background_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("background_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelPacket background_color
     * }
     */
    public static final GroupLayout background_color$layout() {
        return background_color$LAYOUT;
    }

    private static final long background_color$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelPacket background_color
     * }
     */
    public static final long background_color$offset() {
        return background_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelPacket background_color
     * }
     */
    public static MemorySegment background_color(MemorySegment struct) {
        return struct.asSlice(background_color$OFFSET, background_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelPacket background_color
     * }
     */
    public static void background_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, background_color$OFFSET, background_color$LAYOUT.byteSize());
    }

    private static final GroupLayout border_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("border_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelPacket border_color
     * }
     */
    public static final GroupLayout border_color$layout() {
        return border_color$LAYOUT;
    }

    private static final long border_color$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelPacket border_color
     * }
     */
    public static final long border_color$offset() {
        return border_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelPacket border_color
     * }
     */
    public static MemorySegment border_color(MemorySegment struct) {
        return struct.asSlice(border_color$OFFSET, border_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelPacket border_color
     * }
     */
    public static void border_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, border_color$OFFSET, border_color$LAYOUT.byteSize());
    }

    private static final GroupLayout matte_color$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("matte_color"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PixelPacket matte_color
     * }
     */
    public static final GroupLayout matte_color$layout() {
        return matte_color$LAYOUT;
    }

    private static final long matte_color$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PixelPacket matte_color
     * }
     */
    public static final long matte_color$offset() {
        return matte_color$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PixelPacket matte_color
     * }
     */
    public static MemorySegment matte_color(MemorySegment struct) {
        return struct.asSlice(matte_color$OFFSET, matte_color$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PixelPacket matte_color
     * }
     */
    public static void matte_color(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, matte_color$OFFSET, matte_color$LAYOUT.byteSize());
    }

    private static final OfInt dither$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dither"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static final OfInt dither$layout() {
        return dither$LAYOUT;
    }

    private static final long dither$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static final long dither$offset() {
        return dither$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static int dither(MemorySegment struct) {
        return struct.get(dither$LAYOUT, dither$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static void dither(MemorySegment struct, int fieldValue) {
        struct.set(dither$LAYOUT, dither$OFFSET, fieldValue);
    }

    private static final OfInt monochrome$LAYOUT = (OfInt)$LAYOUT.select(groupElement("monochrome"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int monochrome
     * }
     */
    public static final OfInt monochrome$layout() {
        return monochrome$LAYOUT;
    }

    private static final long monochrome$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int monochrome
     * }
     */
    public static final long monochrome$offset() {
        return monochrome$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int monochrome
     * }
     */
    public static int monochrome(MemorySegment struct) {
        return struct.get(monochrome$LAYOUT, monochrome$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int monochrome
     * }
     */
    public static void monochrome(MemorySegment struct, int fieldValue) {
        struct.set(monochrome$LAYOUT, monochrome$OFFSET, fieldValue);
    }

    private static final OfInt progress$LAYOUT = (OfInt)$LAYOUT.select(groupElement("progress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int progress
     * }
     */
    public static final OfInt progress$layout() {
        return progress$LAYOUT;
    }

    private static final long progress$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int progress
     * }
     */
    public static final long progress$offset() {
        return progress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int progress
     * }
     */
    public static int progress(MemorySegment struct) {
        return struct.get(progress$LAYOUT, progress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int progress
     * }
     */
    public static void progress(MemorySegment struct, int fieldValue) {
        struct.set(progress$LAYOUT, progress$OFFSET, fieldValue);
    }

    private static final OfInt colorspace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorspace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final OfInt colorspace$layout() {
        return colorspace$LAYOUT;
    }

    private static final long colorspace$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final long colorspace$offset() {
        return colorspace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static int colorspace(MemorySegment struct) {
        return struct.get(colorspace$LAYOUT, colorspace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static void colorspace(MemorySegment struct, int fieldValue) {
        struct.set(colorspace$LAYOUT, colorspace$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImageType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImageType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImageType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImageType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfLong group$LAYOUT = (OfLong)$LAYOUT.select(groupElement("group"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long group
     * }
     */
    public static final OfLong group$layout() {
        return group$LAYOUT;
    }

    private static final long group$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long group
     * }
     */
    public static final long group$offset() {
        return group$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long group
     * }
     */
    public static long group(MemorySegment struct) {
        return struct.get(group$LAYOUT, group$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long group
     * }
     */
    public static void group(MemorySegment struct, long fieldValue) {
        struct.set(group$LAYOUT, group$OFFSET, fieldValue);
    }

    private static final OfInt verbose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("verbose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int verbose
     * }
     */
    public static final OfInt verbose$layout() {
        return verbose$LAYOUT;
    }

    private static final long verbose$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int verbose
     * }
     */
    public static final long verbose$offset() {
        return verbose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int verbose
     * }
     */
    public static int verbose(MemorySegment struct) {
        return struct.get(verbose$LAYOUT, verbose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int verbose
     * }
     */
    public static void verbose(MemorySegment struct, int fieldValue) {
        struct.set(verbose$LAYOUT, verbose$OFFSET, fieldValue);
    }

    private static final AddressLayout view$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("view"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *view
     * }
     */
    public static final AddressLayout view$layout() {
        return view$LAYOUT;
    }

    private static final long view$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *view
     * }
     */
    public static final long view$offset() {
        return view$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *view
     * }
     */
    public static MemorySegment view(MemorySegment struct) {
        return struct.get(view$LAYOUT, view$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *view
     * }
     */
    public static void view(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(view$LAYOUT, view$OFFSET, fieldValue);
    }

    private static final AddressLayout authenticate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("authenticate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *authenticate
     * }
     */
    public static final AddressLayout authenticate$layout() {
        return authenticate$LAYOUT;
    }

    private static final long authenticate$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *authenticate
     * }
     */
    public static final long authenticate$offset() {
        return authenticate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *authenticate
     * }
     */
    public static MemorySegment authenticate(MemorySegment struct) {
        return struct.get(authenticate$LAYOUT, authenticate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *authenticate
     * }
     */
    public static void authenticate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(authenticate$LAYOUT, authenticate$OFFSET, fieldValue);
    }

    private static final AddressLayout client_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final AddressLayout client_data$layout() {
        return client_data$LAYOUT;
    }

    private static final long client_data$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static final long client_data$offset() {
        return client_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static MemorySegment client_data(MemorySegment struct) {
        return struct.get(client_data$LAYOUT, client_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *client_data
     * }
     */
    public static void client_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client_data$LAYOUT, client_data$OFFSET, fieldValue);
    }

    private static final AddressLayout file$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("file"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILE *file
     * }
     */
    public static final AddressLayout file$layout() {
        return file$LAYOUT;
    }

    private static final long file$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILE *file
     * }
     */
    public static final long file$offset() {
        return file$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILE *file
     * }
     */
    public static MemorySegment file(MemorySegment struct) {
        return struct.get(file$LAYOUT, file$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILE *file
     * }
     */
    public static void file(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(file$LAYOUT, file$OFFSET, fieldValue);
    }

    private static final SequenceLayout magick$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("magick"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static final SequenceLayout magick$layout() {
        return magick$LAYOUT;
    }

    private static final long magick$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static final long magick$offset() {
        return magick$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static MemorySegment magick(MemorySegment struct) {
        return struct.asSlice(magick$OFFSET, magick$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static void magick(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, magick$OFFSET, magick$LAYOUT.byteSize());
    }

    private static long[] magick$DIMS = { 2053 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static long[] magick$dimensions() {
        return magick$DIMS;
    }
    private static final VarHandle magick$ELEM_HANDLE = magick$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static byte magick(MemorySegment struct, long index0) {
        return (byte)magick$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char magick[2053]
     * }
     */
    public static void magick(MemorySegment struct, long index0, byte fieldValue) {
        magick$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout filename$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("filename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static final SequenceLayout filename$layout() {
        return filename$LAYOUT;
    }

    private static final long filename$OFFSET = 2301;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static final long filename$offset() {
        return filename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static MemorySegment filename(MemorySegment struct) {
        return struct.asSlice(filename$OFFSET, filename$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static void filename(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, filename$OFFSET, filename$LAYOUT.byteSize());
    }

    private static long[] filename$DIMS = { 2053 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static long[] filename$dimensions() {
        return filename$DIMS;
    }
    private static final VarHandle filename$ELEM_HANDLE = filename$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static byte filename(MemorySegment struct, long index0) {
        return (byte)filename$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char filename[2053]
     * }
     */
    public static void filename(MemorySegment struct, long index0, byte fieldValue) {
        filename$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout cache$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _CacheInfoPtr_ cache
     * }
     */
    public static final AddressLayout cache$layout() {
        return cache$LAYOUT;
    }

    private static final long cache$OFFSET = 4360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _CacheInfoPtr_ cache
     * }
     */
    public static final long cache$offset() {
        return cache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _CacheInfoPtr_ cache
     * }
     */
    public static MemorySegment cache(MemorySegment struct) {
        return struct.get(cache$LAYOUT, cache$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _CacheInfoPtr_ cache
     * }
     */
    public static void cache(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cache$LAYOUT, cache$OFFSET, fieldValue);
    }

    private static final AddressLayout definitions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("definitions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *definitions
     * }
     */
    public static final AddressLayout definitions$layout() {
        return definitions$LAYOUT;
    }

    private static final long definitions$OFFSET = 4368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *definitions
     * }
     */
    public static final long definitions$offset() {
        return definitions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *definitions
     * }
     */
    public static MemorySegment definitions(MemorySegment struct) {
        return struct.get(definitions$LAYOUT, definitions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *definitions
     * }
     */
    public static void definitions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(definitions$LAYOUT, definitions$OFFSET, fieldValue);
    }

    private static final AddressLayout attributes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("attributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Image *attributes
     * }
     */
    public static final AddressLayout attributes$layout() {
        return attributes$LAYOUT;
    }

    private static final long attributes$OFFSET = 4376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Image *attributes
     * }
     */
    public static final long attributes$offset() {
        return attributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Image *attributes
     * }
     */
    public static MemorySegment attributes(MemorySegment struct) {
        return struct.get(attributes$LAYOUT, attributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Image *attributes
     * }
     */
    public static void attributes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(attributes$LAYOUT, attributes$OFFSET, fieldValue);
    }

    private static final OfInt ping$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ping"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int ping
     * }
     */
    public static final OfInt ping$layout() {
        return ping$LAYOUT;
    }

    private static final long ping$OFFSET = 4384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int ping
     * }
     */
    public static final long ping$offset() {
        return ping$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int ping
     * }
     */
    public static int ping(MemorySegment struct) {
        return struct.get(ping$LAYOUT, ping$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int ping
     * }
     */
    public static void ping(MemorySegment struct, int fieldValue) {
        struct.set(ping$LAYOUT, ping$OFFSET, fieldValue);
    }

    private static final OfInt preview_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preview_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PreviewType preview_type
     * }
     */
    public static final OfInt preview_type$layout() {
        return preview_type$LAYOUT;
    }

    private static final long preview_type$OFFSET = 4388;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PreviewType preview_type
     * }
     */
    public static final long preview_type$offset() {
        return preview_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PreviewType preview_type
     * }
     */
    public static int preview_type(MemorySegment struct) {
        return struct.get(preview_type$LAYOUT, preview_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PreviewType preview_type
     * }
     */
    public static void preview_type(MemorySegment struct, int fieldValue) {
        struct.set(preview_type$LAYOUT, preview_type$OFFSET, fieldValue);
    }

    private static final OfInt affirm$LAYOUT = (OfInt)$LAYOUT.select(groupElement("affirm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int affirm
     * }
     */
    public static final OfInt affirm$layout() {
        return affirm$LAYOUT;
    }

    private static final long affirm$OFFSET = 4392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int affirm
     * }
     */
    public static final long affirm$offset() {
        return affirm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int affirm
     * }
     */
    public static int affirm(MemorySegment struct) {
        return struct.get(affirm$LAYOUT, affirm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int affirm
     * }
     */
    public static void affirm(MemorySegment struct, int fieldValue) {
        struct.set(affirm$LAYOUT, affirm$OFFSET, fieldValue);
    }

    private static final AddressLayout blob$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("blob"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * _BlobInfoPtr_ blob
     * }
     */
    public static final AddressLayout blob$layout() {
        return blob$LAYOUT;
    }

    private static final long blob$OFFSET = 4400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * _BlobInfoPtr_ blob
     * }
     */
    public static final long blob$offset() {
        return blob$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * _BlobInfoPtr_ blob
     * }
     */
    public static MemorySegment blob(MemorySegment struct) {
        return struct.get(blob$LAYOUT, blob$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * _BlobInfoPtr_ blob
     * }
     */
    public static void blob(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(blob$LAYOUT, blob$OFFSET, fieldValue);
    }

    private static final OfLong length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final OfLong length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 4408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static long length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static void length(MemorySegment struct, long fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final SequenceLayout unique$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("unique"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char unique[2053]
     * }
     */
    public static final SequenceLayout unique$layout() {
        return unique$LAYOUT;
    }

    private static final long unique$OFFSET = 4416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char unique[2053]
     * }
     */
    public static final long unique$offset() {
        return unique$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char unique[2053]
     * }
     */
    public static MemorySegment unique(MemorySegment struct) {
        return struct.asSlice(unique$OFFSET, unique$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char unique[2053]
     * }
     */
    public static void unique(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, unique$OFFSET, unique$LAYOUT.byteSize());
    }

    private static long[] unique$DIMS = { 2053 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char unique[2053]
     * }
     */
    public static long[] unique$dimensions() {
        return unique$DIMS;
    }
    private static final VarHandle unique$ELEM_HANDLE = unique$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char unique[2053]
     * }
     */
    public static byte unique(MemorySegment struct, long index0) {
        return (byte)unique$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char unique[2053]
     * }
     */
    public static void unique(MemorySegment struct, long index0, byte fieldValue) {
        unique$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout zero$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("zero"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char zero[2053]
     * }
     */
    public static final SequenceLayout zero$layout() {
        return zero$LAYOUT;
    }

    private static final long zero$OFFSET = 6469;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char zero[2053]
     * }
     */
    public static final long zero$offset() {
        return zero$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char zero[2053]
     * }
     */
    public static MemorySegment zero(MemorySegment struct) {
        return struct.asSlice(zero$OFFSET, zero$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char zero[2053]
     * }
     */
    public static void zero(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, zero$OFFSET, zero$LAYOUT.byteSize());
    }

    private static long[] zero$DIMS = { 2053 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char zero[2053]
     * }
     */
    public static long[] zero$dimensions() {
        return zero$DIMS;
    }
    private static final VarHandle zero$ELEM_HANDLE = zero$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char zero[2053]
     * }
     */
    public static byte zero(MemorySegment struct, long index0) {
        return (byte)zero$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char zero[2053]
     * }
     */
    public static void zero(MemorySegment struct, long index0, byte fieldValue) {
        zero$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 8528;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

