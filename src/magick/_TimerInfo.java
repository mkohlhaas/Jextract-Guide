// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _TimerInfo {
 *     Timer user;
 *     Timer elapsed;
 *     TimerState state;
 *     unsigned long signature;
 * }
 * }
 */
public class _TimerInfo {

    _TimerInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _Timer.layout().withName("user"),
        _Timer.layout().withName("elapsed"),
        magick_wand_h.C_INT.withName("state"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_LONG.withName("signature")
    ).withName("_TimerInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout user$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("user"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Timer user
     * }
     */
    public static final GroupLayout user$layout() {
        return user$LAYOUT;
    }

    private static final long user$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Timer user
     * }
     */
    public static final long user$offset() {
        return user$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Timer user
     * }
     */
    public static MemorySegment user(MemorySegment struct) {
        return struct.asSlice(user$OFFSET, user$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Timer user
     * }
     */
    public static void user(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, user$OFFSET, user$LAYOUT.byteSize());
    }

    private static final GroupLayout elapsed$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("elapsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Timer elapsed
     * }
     */
    public static final GroupLayout elapsed$layout() {
        return elapsed$LAYOUT;
    }

    private static final long elapsed$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Timer elapsed
     * }
     */
    public static final long elapsed$offset() {
        return elapsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Timer elapsed
     * }
     */
    public static MemorySegment elapsed(MemorySegment struct) {
        return struct.asSlice(elapsed$OFFSET, elapsed$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Timer elapsed
     * }
     */
    public static void elapsed(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, elapsed$OFFSET, elapsed$LAYOUT.byteSize());
    }

    private static final OfInt state$LAYOUT = (OfInt)$LAYOUT.select(groupElement("state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimerState state
     * }
     */
    public static final OfInt state$layout() {
        return state$LAYOUT;
    }

    private static final long state$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimerState state
     * }
     */
    public static final long state$offset() {
        return state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimerState state
     * }
     */
    public static int state(MemorySegment struct) {
        return struct.get(state$LAYOUT, state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimerState state
     * }
     */
    public static void state(MemorySegment struct, int fieldValue) {
        struct.set(state$LAYOUT, state$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

