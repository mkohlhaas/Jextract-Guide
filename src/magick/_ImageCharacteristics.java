// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ImageCharacteristics {
 *     unsigned int cmyk;
 *     unsigned int grayscale;
 *     unsigned int monochrome;
 *     unsigned int opaque;
 *     unsigned int palette;
 * }
 * }
 */
public class _ImageCharacteristics {

    _ImageCharacteristics() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_INT.withName("cmyk"),
        magick_wand_h.C_INT.withName("grayscale"),
        magick_wand_h.C_INT.withName("monochrome"),
        magick_wand_h.C_INT.withName("opaque"),
        magick_wand_h.C_INT.withName("palette")
    ).withName("_ImageCharacteristics");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cmyk$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cmyk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int cmyk
     * }
     */
    public static final OfInt cmyk$layout() {
        return cmyk$LAYOUT;
    }

    private static final long cmyk$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int cmyk
     * }
     */
    public static final long cmyk$offset() {
        return cmyk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int cmyk
     * }
     */
    public static int cmyk(MemorySegment struct) {
        return struct.get(cmyk$LAYOUT, cmyk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int cmyk
     * }
     */
    public static void cmyk(MemorySegment struct, int fieldValue) {
        struct.set(cmyk$LAYOUT, cmyk$OFFSET, fieldValue);
    }

    private static final OfInt grayscale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grayscale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int grayscale
     * }
     */
    public static final OfInt grayscale$layout() {
        return grayscale$LAYOUT;
    }

    private static final long grayscale$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int grayscale
     * }
     */
    public static final long grayscale$offset() {
        return grayscale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int grayscale
     * }
     */
    public static int grayscale(MemorySegment struct) {
        return struct.get(grayscale$LAYOUT, grayscale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int grayscale
     * }
     */
    public static void grayscale(MemorySegment struct, int fieldValue) {
        struct.set(grayscale$LAYOUT, grayscale$OFFSET, fieldValue);
    }

    private static final OfInt monochrome$LAYOUT = (OfInt)$LAYOUT.select(groupElement("monochrome"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int monochrome
     * }
     */
    public static final OfInt monochrome$layout() {
        return monochrome$LAYOUT;
    }

    private static final long monochrome$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int monochrome
     * }
     */
    public static final long monochrome$offset() {
        return monochrome$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int monochrome
     * }
     */
    public static int monochrome(MemorySegment struct) {
        return struct.get(monochrome$LAYOUT, monochrome$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int monochrome
     * }
     */
    public static void monochrome(MemorySegment struct, int fieldValue) {
        struct.set(monochrome$LAYOUT, monochrome$OFFSET, fieldValue);
    }

    private static final OfInt opaque$LAYOUT = (OfInt)$LAYOUT.select(groupElement("opaque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int opaque
     * }
     */
    public static final OfInt opaque$layout() {
        return opaque$LAYOUT;
    }

    private static final long opaque$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int opaque
     * }
     */
    public static final long opaque$offset() {
        return opaque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int opaque
     * }
     */
    public static int opaque(MemorySegment struct) {
        return struct.get(opaque$LAYOUT, opaque$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int opaque
     * }
     */
    public static void opaque(MemorySegment struct, int fieldValue) {
        struct.set(opaque$LAYOUT, opaque$OFFSET, fieldValue);
    }

    private static final OfInt palette$LAYOUT = (OfInt)$LAYOUT.select(groupElement("palette"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int palette
     * }
     */
    public static final OfInt palette$layout() {
        return palette$LAYOUT;
    }

    private static final long palette$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int palette
     * }
     */
    public static final long palette$offset() {
        return palette$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int palette
     * }
     */
    public static int palette(MemorySegment struct) {
        return struct.get(palette$LAYOUT, palette$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int palette
     * }
     */
    public static void palette(MemorySegment struct, int fieldValue) {
        struct.set(palette$LAYOUT, palette$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

