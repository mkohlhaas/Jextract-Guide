// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _QuantizeInfo {
 *     unsigned long number_colors;
 *     unsigned int tree_depth;
 *     unsigned int dither;
 *     ColorspaceType colorspace;
 *     unsigned int measure_error;
 *     unsigned long signature;
 * }
 * }
 */
public class _QuantizeInfo {

    _QuantizeInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_LONG.withName("number_colors"),
        magick_wand_h.C_INT.withName("tree_depth"),
        magick_wand_h.C_INT.withName("dither"),
        magick_wand_h.C_INT.withName("colorspace"),
        magick_wand_h.C_INT.withName("measure_error"),
        magick_wand_h.C_LONG.withName("signature")
    ).withName("_QuantizeInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong number_colors$LAYOUT = (OfLong)$LAYOUT.select(groupElement("number_colors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long number_colors
     * }
     */
    public static final OfLong number_colors$layout() {
        return number_colors$LAYOUT;
    }

    private static final long number_colors$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long number_colors
     * }
     */
    public static final long number_colors$offset() {
        return number_colors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long number_colors
     * }
     */
    public static long number_colors(MemorySegment struct) {
        return struct.get(number_colors$LAYOUT, number_colors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long number_colors
     * }
     */
    public static void number_colors(MemorySegment struct, long fieldValue) {
        struct.set(number_colors$LAYOUT, number_colors$OFFSET, fieldValue);
    }

    private static final OfInt tree_depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tree_depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int tree_depth
     * }
     */
    public static final OfInt tree_depth$layout() {
        return tree_depth$LAYOUT;
    }

    private static final long tree_depth$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int tree_depth
     * }
     */
    public static final long tree_depth$offset() {
        return tree_depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int tree_depth
     * }
     */
    public static int tree_depth(MemorySegment struct) {
        return struct.get(tree_depth$LAYOUT, tree_depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int tree_depth
     * }
     */
    public static void tree_depth(MemorySegment struct, int fieldValue) {
        struct.set(tree_depth$LAYOUT, tree_depth$OFFSET, fieldValue);
    }

    private static final OfInt dither$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dither"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static final OfInt dither$layout() {
        return dither$LAYOUT;
    }

    private static final long dither$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static final long dither$offset() {
        return dither$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static int dither(MemorySegment struct) {
        return struct.get(dither$LAYOUT, dither$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int dither
     * }
     */
    public static void dither(MemorySegment struct, int fieldValue) {
        struct.set(dither$LAYOUT, dither$OFFSET, fieldValue);
    }

    private static final OfInt colorspace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorspace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final OfInt colorspace$layout() {
        return colorspace$LAYOUT;
    }

    private static final long colorspace$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static final long colorspace$offset() {
        return colorspace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static int colorspace(MemorySegment struct) {
        return struct.get(colorspace$LAYOUT, colorspace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ColorspaceType colorspace
     * }
     */
    public static void colorspace(MemorySegment struct, int fieldValue) {
        struct.set(colorspace$LAYOUT, colorspace$OFFSET, fieldValue);
    }

    private static final OfInt measure_error$LAYOUT = (OfInt)$LAYOUT.select(groupElement("measure_error"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int measure_error
     * }
     */
    public static final OfInt measure_error$layout() {
        return measure_error$LAYOUT;
    }

    private static final long measure_error$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int measure_error
     * }
     */
    public static final long measure_error$offset() {
        return measure_error$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int measure_error
     * }
     */
    public static int measure_error(MemorySegment struct) {
        return struct.get(measure_error$LAYOUT, measure_error$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int measure_error
     * }
     */
    public static void measure_error(MemorySegment struct, int fieldValue) {
        struct.set(measure_error$LAYOUT, measure_error$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

