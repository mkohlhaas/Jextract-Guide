// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ExceptionInfo {
 *     ExceptionType severity;
 *     char *reason;
 *     char *description;
 *     int error_number;
 *     char *module;
 *     char *function;
 *     unsigned long line;
 *     unsigned long signature;
 * }
 * }
 */
public class _ExceptionInfo {

    _ExceptionInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        magick_wand_h.C_INT.withName("severity"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_POINTER.withName("reason"),
        magick_wand_h.C_POINTER.withName("description"),
        magick_wand_h.C_INT.withName("error_number"),
        MemoryLayout.paddingLayout(4),
        magick_wand_h.C_POINTER.withName("module"),
        magick_wand_h.C_POINTER.withName("function"),
        magick_wand_h.C_LONG.withName("line"),
        magick_wand_h.C_LONG.withName("signature")
    ).withName("_ExceptionInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt severity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("severity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ExceptionType severity
     * }
     */
    public static final OfInt severity$layout() {
        return severity$LAYOUT;
    }

    private static final long severity$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ExceptionType severity
     * }
     */
    public static final long severity$offset() {
        return severity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ExceptionType severity
     * }
     */
    public static int severity(MemorySegment struct) {
        return struct.get(severity$LAYOUT, severity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ExceptionType severity
     * }
     */
    public static void severity(MemorySegment struct, int fieldValue) {
        struct.set(severity$LAYOUT, severity$OFFSET, fieldValue);
    }

    private static final AddressLayout reason$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reason"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *reason
     * }
     */
    public static final AddressLayout reason$layout() {
        return reason$LAYOUT;
    }

    private static final long reason$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *reason
     * }
     */
    public static final long reason$offset() {
        return reason$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *reason
     * }
     */
    public static MemorySegment reason(MemorySegment struct) {
        return struct.get(reason$LAYOUT, reason$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *reason
     * }
     */
    public static void reason(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reason$LAYOUT, reason$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final OfInt error_number$LAYOUT = (OfInt)$LAYOUT.select(groupElement("error_number"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int error_number
     * }
     */
    public static final OfInt error_number$layout() {
        return error_number$LAYOUT;
    }

    private static final long error_number$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int error_number
     * }
     */
    public static final long error_number$offset() {
        return error_number$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int error_number
     * }
     */
    public static int error_number(MemorySegment struct) {
        return struct.get(error_number$LAYOUT, error_number$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int error_number
     * }
     */
    public static void error_number(MemorySegment struct, int fieldValue) {
        struct.set(error_number$LAYOUT, error_number$OFFSET, fieldValue);
    }

    private static final AddressLayout module$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("module"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *module
     * }
     */
    public static final AddressLayout module$layout() {
        return module$LAYOUT;
    }

    private static final long module$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *module
     * }
     */
    public static final long module$offset() {
        return module$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *module
     * }
     */
    public static MemorySegment module(MemorySegment struct) {
        return struct.get(module$LAYOUT, module$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *module
     * }
     */
    public static void module(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(module$LAYOUT, module$OFFSET, fieldValue);
    }

    private static final AddressLayout function$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("function"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *function
     * }
     */
    public static final AddressLayout function$layout() {
        return function$LAYOUT;
    }

    private static final long function$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *function
     * }
     */
    public static final long function$offset() {
        return function$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *function
     * }
     */
    public static MemorySegment function(MemorySegment struct) {
        return struct.get(function$LAYOUT, function$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *function
     * }
     */
    public static void function(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(function$LAYOUT, function$OFFSET, fieldValue);
    }

    private static final OfLong line$LAYOUT = (OfLong)$LAYOUT.select(groupElement("line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long line
     * }
     */
    public static final OfLong line$layout() {
        return line$LAYOUT;
    }

    private static final long line$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long line
     * }
     */
    public static final long line$offset() {
        return line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long line
     * }
     */
    public static long line(MemorySegment struct) {
        return struct.get(line$LAYOUT, line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long line
     * }
     */
    public static void line(MemorySegment struct, long fieldValue) {
        struct.set(line$LAYOUT, line$OFFSET, fieldValue);
    }

    private static final OfLong signature$LAYOUT = (OfLong)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final OfLong signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static long signature(MemorySegment struct) {
        return struct.get(signature$LAYOUT, signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long signature
     * }
     */
    public static void signature(MemorySegment struct, long fieldValue) {
        struct.set(signature$LAYOUT, signature$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

