// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _TypeMetric {
 *     PointInfo pixels_per_em;
 *     double ascent;
 *     double descent;
 *     double width;
 *     double height;
 *     double max_advance;
 *     SegmentInfo bounds;
 *     double underline_position;
 *     double underline_thickness;
 * }
 * }
 */
public class _TypeMetric {

    _TypeMetric() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _PointInfo.layout().withName("pixels_per_em"),
        magick_wand_h.C_DOUBLE.withName("ascent"),
        magick_wand_h.C_DOUBLE.withName("descent"),
        magick_wand_h.C_DOUBLE.withName("width"),
        magick_wand_h.C_DOUBLE.withName("height"),
        magick_wand_h.C_DOUBLE.withName("max_advance"),
        _SegmentInfo.layout().withName("bounds"),
        magick_wand_h.C_DOUBLE.withName("underline_position"),
        magick_wand_h.C_DOUBLE.withName("underline_thickness")
    ).withName("_TypeMetric");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout pixels_per_em$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pixels_per_em"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PointInfo pixels_per_em
     * }
     */
    public static final GroupLayout pixels_per_em$layout() {
        return pixels_per_em$LAYOUT;
    }

    private static final long pixels_per_em$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PointInfo pixels_per_em
     * }
     */
    public static final long pixels_per_em$offset() {
        return pixels_per_em$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PointInfo pixels_per_em
     * }
     */
    public static MemorySegment pixels_per_em(MemorySegment struct) {
        return struct.asSlice(pixels_per_em$OFFSET, pixels_per_em$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PointInfo pixels_per_em
     * }
     */
    public static void pixels_per_em(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pixels_per_em$OFFSET, pixels_per_em$LAYOUT.byteSize());
    }

    private static final OfDouble ascent$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("ascent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double ascent
     * }
     */
    public static final OfDouble ascent$layout() {
        return ascent$LAYOUT;
    }

    private static final long ascent$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double ascent
     * }
     */
    public static final long ascent$offset() {
        return ascent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double ascent
     * }
     */
    public static double ascent(MemorySegment struct) {
        return struct.get(ascent$LAYOUT, ascent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double ascent
     * }
     */
    public static void ascent(MemorySegment struct, double fieldValue) {
        struct.set(ascent$LAYOUT, ascent$OFFSET, fieldValue);
    }

    private static final OfDouble descent$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("descent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double descent
     * }
     */
    public static final OfDouble descent$layout() {
        return descent$LAYOUT;
    }

    private static final long descent$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double descent
     * }
     */
    public static final long descent$offset() {
        return descent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double descent
     * }
     */
    public static double descent(MemorySegment struct) {
        return struct.get(descent$LAYOUT, descent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double descent
     * }
     */
    public static void descent(MemorySegment struct, double fieldValue) {
        struct.set(descent$LAYOUT, descent$OFFSET, fieldValue);
    }

    private static final OfDouble width$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double width
     * }
     */
    public static final OfDouble width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double width
     * }
     */
    public static double width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double width
     * }
     */
    public static void width(MemorySegment struct, double fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfDouble height$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double height
     * }
     */
    public static final OfDouble height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double height
     * }
     */
    public static double height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double height
     * }
     */
    public static void height(MemorySegment struct, double fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfDouble max_advance$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("max_advance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double max_advance
     * }
     */
    public static final OfDouble max_advance$layout() {
        return max_advance$LAYOUT;
    }

    private static final long max_advance$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double max_advance
     * }
     */
    public static final long max_advance$offset() {
        return max_advance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double max_advance
     * }
     */
    public static double max_advance(MemorySegment struct) {
        return struct.get(max_advance$LAYOUT, max_advance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double max_advance
     * }
     */
    public static void max_advance(MemorySegment struct, double fieldValue) {
        struct.set(max_advance$LAYOUT, max_advance$OFFSET, fieldValue);
    }

    private static final GroupLayout bounds$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bounds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SegmentInfo bounds
     * }
     */
    public static final GroupLayout bounds$layout() {
        return bounds$LAYOUT;
    }

    private static final long bounds$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SegmentInfo bounds
     * }
     */
    public static final long bounds$offset() {
        return bounds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SegmentInfo bounds
     * }
     */
    public static MemorySegment bounds(MemorySegment struct) {
        return struct.asSlice(bounds$OFFSET, bounds$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SegmentInfo bounds
     * }
     */
    public static void bounds(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bounds$OFFSET, bounds$LAYOUT.byteSize());
    }

    private static final OfDouble underline_position$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("underline_position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double underline_position
     * }
     */
    public static final OfDouble underline_position$layout() {
        return underline_position$LAYOUT;
    }

    private static final long underline_position$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double underline_position
     * }
     */
    public static final long underline_position$offset() {
        return underline_position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double underline_position
     * }
     */
    public static double underline_position(MemorySegment struct) {
        return struct.get(underline_position$LAYOUT, underline_position$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double underline_position
     * }
     */
    public static void underline_position(MemorySegment struct, double fieldValue) {
        struct.set(underline_position$LAYOUT, underline_position$OFFSET, fieldValue);
    }

    private static final OfDouble underline_thickness$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("underline_thickness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double underline_thickness
     * }
     */
    public static final OfDouble underline_thickness$layout() {
        return underline_thickness$LAYOUT;
    }

    private static final long underline_thickness$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double underline_thickness
     * }
     */
    public static final long underline_thickness$offset() {
        return underline_thickness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double underline_thickness
     * }
     */
    public static double underline_thickness(MemorySegment struct) {
        return struct.get(underline_thickness$LAYOUT, underline_thickness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double underline_thickness
     * }
     */
    public static void underline_thickness(MemorySegment struct, double fieldValue) {
        struct.set(underline_thickness$LAYOUT, underline_thickness$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

