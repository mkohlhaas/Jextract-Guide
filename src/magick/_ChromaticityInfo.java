// Generated by jextract

package magick;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ChromaticityInfo {
 *     PrimaryInfo red_primary;
 *     PrimaryInfo green_primary;
 *     PrimaryInfo blue_primary;
 *     PrimaryInfo white_point;
 * }
 * }
 */
public class _ChromaticityInfo {

    _ChromaticityInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _PrimaryInfo.layout().withName("red_primary"),
        _PrimaryInfo.layout().withName("green_primary"),
        _PrimaryInfo.layout().withName("blue_primary"),
        _PrimaryInfo.layout().withName("white_point")
    ).withName("_ChromaticityInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout red_primary$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("red_primary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PrimaryInfo red_primary
     * }
     */
    public static final GroupLayout red_primary$layout() {
        return red_primary$LAYOUT;
    }

    private static final long red_primary$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PrimaryInfo red_primary
     * }
     */
    public static final long red_primary$offset() {
        return red_primary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PrimaryInfo red_primary
     * }
     */
    public static MemorySegment red_primary(MemorySegment struct) {
        return struct.asSlice(red_primary$OFFSET, red_primary$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PrimaryInfo red_primary
     * }
     */
    public static void red_primary(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, red_primary$OFFSET, red_primary$LAYOUT.byteSize());
    }

    private static final GroupLayout green_primary$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("green_primary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PrimaryInfo green_primary
     * }
     */
    public static final GroupLayout green_primary$layout() {
        return green_primary$LAYOUT;
    }

    private static final long green_primary$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PrimaryInfo green_primary
     * }
     */
    public static final long green_primary$offset() {
        return green_primary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PrimaryInfo green_primary
     * }
     */
    public static MemorySegment green_primary(MemorySegment struct) {
        return struct.asSlice(green_primary$OFFSET, green_primary$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PrimaryInfo green_primary
     * }
     */
    public static void green_primary(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, green_primary$OFFSET, green_primary$LAYOUT.byteSize());
    }

    private static final GroupLayout blue_primary$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("blue_primary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PrimaryInfo blue_primary
     * }
     */
    public static final GroupLayout blue_primary$layout() {
        return blue_primary$LAYOUT;
    }

    private static final long blue_primary$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PrimaryInfo blue_primary
     * }
     */
    public static final long blue_primary$offset() {
        return blue_primary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PrimaryInfo blue_primary
     * }
     */
    public static MemorySegment blue_primary(MemorySegment struct) {
        return struct.asSlice(blue_primary$OFFSET, blue_primary$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PrimaryInfo blue_primary
     * }
     */
    public static void blue_primary(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, blue_primary$OFFSET, blue_primary$LAYOUT.byteSize());
    }

    private static final GroupLayout white_point$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("white_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PrimaryInfo white_point
     * }
     */
    public static final GroupLayout white_point$layout() {
        return white_point$LAYOUT;
    }

    private static final long white_point$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PrimaryInfo white_point
     * }
     */
    public static final long white_point$offset() {
        return white_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PrimaryInfo white_point
     * }
     */
    public static MemorySegment white_point(MemorySegment struct) {
        return struct.asSlice(white_point$OFFSET, white_point$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PrimaryInfo white_point
     * }
     */
    public static void white_point(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, white_point$OFFSET, white_point$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

